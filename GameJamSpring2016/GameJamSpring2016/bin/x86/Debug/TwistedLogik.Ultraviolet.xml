<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TwistedLogik.Ultraviolet</name>
    </assembly>
    <members>
        <member name="T:TwistedLogik.Ultraviolet.Audio.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.Audio"/> namespace contains types relating to Ultraviolet's audio subsystem.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.PlaybackState">
            <summary>
            Represents the playback state of a song or sound effect.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Audio.PlaybackState.Stopped">
            <summary>
            Playback is stopped.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Audio.PlaybackState.Playing">
            <summary>
            Playback is in progress.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Audio.PlaybackState.Paused">
            <summary>
            Playback is paused.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.Song">
            <summary>
            <para>Represents a song.</para>
            <para>Songs are audio resources, usually music, which are streamed from disk during playback.</para>
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.Song.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Audio.Song"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.Song.Duration">
            <summary>
            Gets the song's duration.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.SongPlayerFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Audio.SongPlayer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Audio.SongPlayer"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.SongPlayerEventHandler">
            <summary>
            Represents the method that is called when a <see cref="T:TwistedLogik.Ultraviolet.Audio.SongPlayer"/> raises an event.
            </summary>
            <param name="songPlayer">The <see cref="T:TwistedLogik.Ultraviolet.Audio.SongPlayer"/> that raised the event.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.SongPlayer">
            <summary>
            Represents an object which plays <see cref="T:TwistedLogik.Ultraviolet.Audio.Song"/> resources.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Audio.SongPlayer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Audio.SongPlayer"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Audio.SongPlayer"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the player's state.
            </summary>
            <param name="time">Time elapsed since the last update.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.Play(TwistedLogik.Ultraviolet.Audio.Song,System.Boolean)">
            <summary>
            Plays the specified <see cref="T:TwistedLogik.Ultraviolet.Audio.Song"/>.
            </summary>
            <param name="song">The <see cref="T:TwistedLogik.Ultraviolet.Audio.Song"/> to play.</param>
            <param name="loop">A value indicating whether to loop the song.</param>
            <returns><c>true</c> if the song began playing successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.Play(TwistedLogik.Ultraviolet.Audio.Song,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays the specified <see cref="T:TwistedLogik.Ultraviolet.Audio.Song"/>.
            </summary>
            <param name="song">The <see cref="T:TwistedLogik.Ultraviolet.Audio.Song"/> to play.</param>
            <param name="volume">A value from 0.0 (silent) to 1.0 (full volume) representing the song's volume.</param>
            <param name="pitch">A value from -1.0 (down one octave) to 1.0 (up one octave) indicating the song's pitch adjustment.</param>
            <param name="pan">A value from -1.0 (full left) to 1.0 (full right) representing the song's panning position.</param>
            <param name="loop">A value indicating whether to loop the song.</param>
            <returns><c>true</c> if the song began playing successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.Stop">
            <summary>
            Stops the song that is currently playing.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.Pause">
            <summary>
            Pauses the song that is currently playing.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.Resume">
            <summary>
            Resumes the song after it has been paused.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.SlideVolume(System.Single,System.TimeSpan)">
            <summary>
            Slides the song's volume to the specified value over the specified period of time.
            </summary>
            <param name="volume">The value to which to slide the song's volume.</param>
            <param name="time">The amount of time over which to perform the slide.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.SlidePitch(System.Single,System.TimeSpan)">
            <summary>
            Slides the song's pitch to the specified value over the specified period of time.
            </summary>
            <param name="pitch">The value to which to slide the song's pitch.</param>
            <param name="time">The amount of time over which to perform the slide.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.SlidePan(System.Single,System.TimeSpan)">
            <summary>
            Slides the song's pan to the specified value over the specified period of time.
            </summary>
            <param name="pan">The value to which to slide the song's pan.</param>
            <param name="time">The amount of time over which to perform the slide.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.State">
            <summary>
            Gets the song player's current playback state.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.IsPlaying">
            <summary>
            Gets a value indicating whether the song player is playing a song.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.IsLooping">
            <summary>
            Gets a value indicating whether the song player is looping.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.Position">
            <summary>
            Gets or sets the song player's position within the currently-playing song.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.Duration">
            <summary>
            Gets the duration of the currently-playing song.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.Volume">
            <summary>
            Gets or sets a value from 0.0 (silent) to 1.0 (full volume) representing the volume of the currently-playing song.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.Pitch">
            <summary>
            Gets or sets a value from -1.0 (down one octave) to 1.0 (up one octave) indicating the pitch adjustment of the currently-playing song.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SongPlayer.Pan">
            <summary>
            Gets or sets a value from -1.0 (full left) to 1.0 (full right) representing the panning position of the currently-playing song.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Audio.SongPlayer.SongStarted">
            <summary>
            Occurs when playback starts.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Audio.SongPlayer.SongEnded">
            <summary>
            Occurs when playback ends.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Audio.SongPlayer.StateChanged">
            <summary>
            Occurs when the song player's playback state changes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.OnSongStarted">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Audio.SongPlayer.SongStarted"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.OnSongEnded">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Audio.SongPlayer.SongEnded"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SongPlayer.OnStateChanged">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Audio.SongPlayer.StateChanged"/> event.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.SoundEffect">
            <summary>
            <para>Represents a sound effect.</para>
            <para>Sound effects are usually small audio files which are loaded entirely into memory prior to playback.</para>
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffect.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffect.Play">
            <summary>
            Plays the <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/> in a fire-and-forget fashion with default parameters.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffect.Play(System.Single,System.Single,System.Single)">
            <summary>
            Plays the <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/> in a fire-and-forget fashion with the specified parameters.
            </summary>
            <param name="volume">A value from 0.0 (silent) to 1.0 (full volume) representing the sound effect's volume.</param>
            <param name="pitch">A value from -1.0 (down one octave) to 1.0 (up one octave) indicating the sound effect's pitch adjustment.</param>
            <param name="pan">A value from -1.0 (full left) to 1.0 (full right) representing the sound effect's panning position.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffect.Duration">
            <summary>
            Gets the sound effect's duration.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayerFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer">
            <summary>
            Represents an object which plays <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/> resources.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the player's state.
            </summary>
            <param name="time">Time elapsed since the last update.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Play(TwistedLogik.Ultraviolet.Audio.SoundEffect,System.Boolean)">
            <summary>
            Plays a <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/>.
            </summary>
            <param name="soundEffect">The <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/> to play.</param>
            <param name="loop">A value indicating whether to loop the sound effect.</param>
            <returns><c>true</c> if the sound effect began playing successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Play(TwistedLogik.Ultraviolet.Audio.SoundEffect,System.Single,System.Single,System.Single,System.Boolean)">
            <summary>
            Plays a <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/>.
            </summary>
            <param name="soundEffect">The <see cref="T:TwistedLogik.Ultraviolet.Audio.SoundEffect"/> to play.</param>
            <param name="volume">A value from 0.0 (silent) to 1.0 (full volume) representing the sound effect's volume.</param>
            <param name="pitch">A value from -1.0 (down one octave) to 1.0 (up one octave) indicating the sound effect's pitch adjustment.</param>
            <param name="pan">A value from -1.0 (full left) to 1.0 (full right) representing the sound effect's panning position.</param>
            <param name="loop">A value indicating whether to loop the sound effect.</param>
            <returns><c>true</c> if the sound effect began playing successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Stop">
            <summary>
            Stops the sound effect that is currently playing.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Pause">
            <summary>
            Pauses the sound effect that is currently playing.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Resume">
            <summary>
            Resumes the sound effect after it has been paused.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.SlideVolume(System.Single,System.TimeSpan)">
            <summary>
            Slides the sound effect's volume to the specified value over the specified period of time.
            </summary>
            <param name="volume">The value to which to slide the sound effect's volume.</param>
            <param name="time">The amount of time over which to perform the slide.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.SlidePitch(System.Single,System.TimeSpan)">
            <summary>
            Slides the sound effect's pitch to the specified value over the specified period of time.
            </summary>
            <param name="pitch">The value to which to slide the sound effect's pitch.</param>
            <param name="time">The amount of time over which to perform the slide.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.SlidePan(System.Single,System.TimeSpan)">
            <summary>
            Slides the sound effect's pan to the specified value over the specified period of time.
            </summary>
            <param name="pan">The value to which to slide the sound effect's pan.</param>
            <param name="time">The amount of time over which to perform the slide.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.State">
            <summary>
            Gets the sound effect player's current playback state.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.IsPlaying">
            <summary>
            Gets a value indicating whether the sound effect player is playing a sound effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.IsLooping">
            <summary>
            Gets a value indicating whether the sound effect player is looping.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Position">
            <summary>
            Gets or sets the sound effect player's position within the currently-playing sound effect.
            </summary>
            <remarks>If no sound effect is currently playing, <see cref="F:System.TimeSpan.Zero"/> is returned.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Duration">
            <summary>
            Gets the duration of the currently-playing sound effect.
            </summary>
            <remarks>If no sound effect is currently playing, <see cref="F:System.TimeSpan.Zero"/> is returned.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Volume">
            <summary>
            Gets or sets a value from 0.0 (silent) to 1.0 (full volume) representing the 
            volume of the currently-playing sound effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Pitch">
            <summary>
            Gets or sets a value from -1.0 (down one octave) to 1.0 (up one octave) indicating the 
            pitch adjustment of the currently-playing sound effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Audio.SoundEffectPlayer.Pan">
            <summary>
            Gets or sets a value from -1.0 (full left) to 1.0 (full right) representing the 
            panning position of the currently-playing sound effect.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Circle">
            <summary>
            Represents a circle with integer radius and position.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            </summary>
            <param name="x">The x-coordinate of the circle's center.</param>
            <param name="y">The y-coordinate of the circle's center.</param>
            <param name="radius">The circle's radius.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.#ctor(TwistedLogik.Ultraviolet.Point2,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            </summary>
            <param name="position">The position of the circle's center.</param>
            <param name="radius">The circle's radius.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.op_Equality(TwistedLogik.Ultraviolet.Circle,TwistedLogik.Ultraviolet.Circle)">
            <summary>
            Compares two circles for equality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.Circle"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.Circle"/> to compare.</param>
            <returns><c>true</c> if the specified circles are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.op_Inequality(TwistedLogik.Ultraviolet.Circle,TwistedLogik.Ultraviolet.Circle)">
            <summary>
            Compares two circles for inequality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.Circle"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.Circle"/> to compare.</param>
            <returns><c>true</c> if the specified circles are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.op_Implicit(TwistedLogik.Ultraviolet.Circle)~TwistedLogik.Ultraviolet.CircleF">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            </summary>
            <param name="circle">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.TryParse(System.String,TwistedLogik.Ultraviolet.Circle@)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="circle">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.Parse(System.String)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure equivalent to the circle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Circle@)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="circle">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure equivalent to the circle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.Equals(TwistedLogik.Ultraviolet.Circle)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Circle.Interpolate(TwistedLogik.Ultraviolet.Circle,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Circle.Unit">
            <summary>
            Gets an instance representing the unit circle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Circle.Position">
            <summary>
            Gets the circle's position.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Circle.X">
            <summary>
            Gets the x-coordinate of the circle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Circle.Y">
            <summary>
            Gets the y-coordinate of the circle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Circle.Radius">
            <summary>
            Gets the circle's radius.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CircleD">
            <summary>
            Represents a circle with single-precision floating point radius and position.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            </summary>
            <param name="x">The x-coordinate of the circle's center.</param>
            <param name="y">The y-coordinate of the circle's center.</param>
            <param name="radius">The circle's radius.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.#ctor(TwistedLogik.Ultraviolet.Point2D,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            </summary>
            <param name="position">The position of the circle's center.</param>
            <param name="radius">The circle's radius.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.op_Equality(TwistedLogik.Ultraviolet.CircleD,TwistedLogik.Ultraviolet.CircleD)">
            <summary>
            Compares two circles for equality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> to compare.</param>
            <returns><c>true</c> if the specified circles are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.op_Inequality(TwistedLogik.Ultraviolet.CircleD,TwistedLogik.Ultraviolet.CircleD)">
            <summary>
            Compares two circles for inequality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> to compare.</param>
            <returns><c>true</c> if the specified circles are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.op_Explicit(TwistedLogik.Ultraviolet.CircleD)~TwistedLogik.Ultraviolet.Circle">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            </summary>
            <param name="circle">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.op_Implicit(TwistedLogik.Ultraviolet.Circle)~TwistedLogik.Ultraviolet.CircleD">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            </summary>
            <param name="circle">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.op_Explicit(TwistedLogik.Ultraviolet.CircleD)~TwistedLogik.Ultraviolet.CircleF">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            </summary>
            <param name="circle">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.op_Implicit(TwistedLogik.Ultraviolet.CircleF)~TwistedLogik.Ultraviolet.CircleD">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            </summary>
            <param name="circle">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.TryParse(System.String,TwistedLogik.Ultraviolet.CircleD@)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="circle">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.Parse(System.String)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure equivalent to the circle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.CircleD@)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="circle">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleD"/> structure equivalent to the circle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.Equals(TwistedLogik.Ultraviolet.CircleD)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleD.Interpolate(TwistedLogik.Ultraviolet.CircleD,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleD.Unit">
            <summary>
            Gets an instance which represents the unit circle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleD.Position">
            <summary>
            Gets the circle's position.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleD.X">
            <summary>
            Gets the x-coordinate of the circle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleD.Y">
            <summary>
            Gets the y-coordinate of the circle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleD.Radius">
            <summary>
            Gets the circle's radius.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CircleF">
            <summary>
            Represents a circle with single-precision floating point radius and position.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            </summary>
            <param name="x">The x-coordinate of the circle's center.</param>
            <param name="y">The y-coordinate of the circle's center.</param>
            <param name="radius">The circle's radius.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.#ctor(TwistedLogik.Ultraviolet.Point2F,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            </summary>
            <param name="position">The position of the circle's center.</param>
            <param name="radius">The circle's radius.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.op_Equality(TwistedLogik.Ultraviolet.CircleF,TwistedLogik.Ultraviolet.CircleF)">
            <summary>
            Compares two circles for equality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> to compare.</param>
            <returns><c>true</c> if the specified circles are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.op_Inequality(TwistedLogik.Ultraviolet.CircleF,TwistedLogik.Ultraviolet.CircleF)">
            <summary>
            Compares two circles for inequality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> to compare.</param>
            <returns><c>true</c> if the specified circles are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.op_Explicit(TwistedLogik.Ultraviolet.CircleF)~TwistedLogik.Ultraviolet.Circle">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure.
            </summary>
            <param name="circle">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.op_Implicit(TwistedLogik.Ultraviolet.Circle)~TwistedLogik.Ultraviolet.CircleF">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Circle"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            </summary>
            <param name="circle">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.TryParse(System.String,TwistedLogik.Ultraviolet.CircleF@)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="circle">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.Parse(System.String)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure equivalent to the circle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.CircleF@)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="circle">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a circle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure.
            </summary>
            <param name="s">A string containing a circle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.CircleF"/> structure equivalent to the circle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.Equals(TwistedLogik.Ultraviolet.CircleF)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CircleF.Interpolate(TwistedLogik.Ultraviolet.CircleF,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleF.Unit">
            <summary>
            Gets an instance which represents the unit circle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleF.Position">
            <summary>
            Gets the circle's position.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleF.X">
            <summary>
            Gets the x-coordinate of the circle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleF.Y">
            <summary>
            Gets the y-coordinate of the circle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CircleF.Radius">
            <summary>
            Gets the circle's radius.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.ClearOptions">
            <summary>
            Represents the set of buffers which will be cleared by the <see cref="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.Clear(TwistedLogik.Ultraviolet.ClearOptions,TwistedLogik.Ultraviolet.Color,System.Double,System.Int32)"/> method.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.ClearOptions.Target">
            <summary>
            Clears the render target.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.ClearOptions.DepthBuffer">
            <summary>
            Clears the depth buffer.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.ClearOptions.Stencil">
            <summary>
            Clears the stencil buffer.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Color">
            <summary>
            Represents an RGBA color.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Color"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure.
            </summary>
            <param name="packedValue">The color's packed value.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure with the specified component values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure with the specified component values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure with the specified component values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure with the specified component values.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.op_Equality(TwistedLogik.Ultraviolet.Color,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Compares two colors for equality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.Color"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.Color"/> to compare.</param>
            <returns><c>true</c> if the specified colors are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.op_Inequality(TwistedLogik.Ultraviolet.Color,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Compares two colors for inequality.
            </summary>
            <param name="c1">The first <see cref="T:TwistedLogik.Ultraviolet.Color"/> to compare.</param>
            <param name="c2">The second <see cref="T:TwistedLogik.Ultraviolet.Color"/> to compare.</param>
            <returns><c>true</c> if the specified colors are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.op_Multiply(TwistedLogik.Ultraviolet.Color,System.Single)">
            <summary>
            Multiplies each of the color's components by the specified scaling factor.
            </summary>
            <param name="color">The <see cref="T:TwistedLogik.Ultraviolet.Color"/> to multiply.</param>
            <param name="alpha">The scaling factor by which to multiply the color.</param>
            <returns>The scaled <see cref="T:TwistedLogik.Ultraviolet.Color"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.TryParse(System.String,TwistedLogik.Ultraviolet.Color@)">
            <summary>
            Converts the string representation of a color into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a color to convert.</param>
            <param name="color">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.Parse(System.String)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure equivalent to the color contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Color@)">
            <summary>
            Converts the string representation of a color into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a color to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="color">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure equivalent to the color contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.FromArgb(System.UInt32)">
            <summary>
            Creates a <see cref="T:TwistedLogik.Ultraviolet.Color"/> from a 32-bit integer in ARGB format.
            </summary>
            <param name="value">The integer from which to create a color.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Color"/> that corresponds to the specified integer value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.FromRgba(System.UInt32)">
            <summary>
            Creates a <see cref="T:TwistedLogik.Ultraviolet.Color"/> from a 32-bit integer in RGBA format.
            </summary>
            <param name="value">The integer from which to create a color.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Color"/> that corresponds to the specified integer value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.FromBgra(System.UInt32)">
            <summary>
            Creates a <see cref="T:TwistedLogik.Ultraviolet.Color"/> from a 32-bit integer in BGRA format.
            </summary>
            <param name="value">The integer from which to create a color.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Color"/> that corresponds to the specified integer value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.Equals(TwistedLogik.Ultraviolet.Color)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.ToArgb">
            <summary>
            Converts the <see cref="T:TwistedLogik.Ultraviolet.Color"/> to a 32-bit integer in ARGB format.
            </summary>
            <returns>The ARGB value that corresponds to this <see cref="T:TwistedLogik.Ultraviolet.Color"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.ToRgba">
            <summary>
            Converts the <see cref="T:TwistedLogik.Ultraviolet.Color"/> to a 32-bit integer in RGBA format.
            </summary>
            <returns>The RGBA value that corresponds to this <see cref="T:TwistedLogik.Ultraviolet.Color"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.ToBgra">
            <summary>
            Converts the <see cref="T:TwistedLogik.Ultraviolet.Color"/> to a 32-bit integer in BGRA format.
            </summary>
            <returns>The BGRA value that corresponds to this <see cref="T:TwistedLogik.Ultraviolet.Color"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.Interpolate(TwistedLogik.Ultraviolet.Color,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PackedValue">
            <summary>
            Gets the color's packed value.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.A">
            <summary>
            Gets the color's alpha component.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.R">
            <summary>
            Gets the color's red component.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.G">
            <summary>
            Gets the color's green component.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.B">
            <summary>
            Gets the color's blue component.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.AliceBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:240 G:248 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.AntiqueWhite">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:250 G:235 B:215 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Aqua">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Aquamarine">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:127 G:255 B:212 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Azure">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:240 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Beige">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:245 G:245 B:220 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Bisque">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:228 B:196 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Black">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.BlanchedAlmond">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:235 B:205 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Blue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:0 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.BlueViolet">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:138 G:43 B:226 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Brown">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:165 G:42 B:42 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.BurlyWood">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:222 G:184 B:135 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.CadetBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:95 G:158 B:160 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Chartreuse">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:127 G:255 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Chocolate">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:210 G:105 B:30 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Coral">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:127 B:80 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.CornflowerBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:100 G:149 B:237 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Cornsilk">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:248 B:220 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Crimson">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:220 G:20 B:60 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Cyan">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:0 B:139 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkCyan">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:139 B:139 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkGoldenrod">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:184 G:134 B:11 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkGray">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:169 G:169 B:169 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:100 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkKhaki">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:189 G:183 B:107 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkMagenta">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:139 G:0 B:139 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkOliveGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:85 G:107 B:47 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkOrange">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:140 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkOrchid">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:153 G:50 B:204 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkRed">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:139 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkSalmon">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:233 G:150 B:122 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkSeaGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:143 G:188 B:139 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkSlateBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:72 G:61 B:139 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkSlateGray">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:47 G:79 B:79 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkTurquoise">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:206 B:209 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DarkViolet">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:148 G:0 B:211 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DeepPink">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:20 B:147 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DeepSkyBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:191 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DimGray">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:105 G:105 B:105 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.DodgerBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:30 G:144 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Firebrick">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:178 G:34 B:34 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.FloralWhite">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:250 B:240 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.ForestGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:34 G:139 B:34 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Fuchsia">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:0 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Gainsboro">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:220 G:220 B:220 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.GhostWhite">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:248 G:248 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Gold">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:215 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Goldenrod">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:218 G:165 B:32 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Gray">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:128 G:128 B:128 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Green">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:128 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.GreenYellow">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:173 G:255 B:47 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Honeydew">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:240 G:255 B:240 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.HotPink">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:105 B:180 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.IndianRed">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:205 G:92 B:92 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Indigo">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:75 G:0 B:130 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Ivory">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:255 B:240 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Khaki">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:240 G:230 B:140 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Lavender">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:230 G:230 B:250 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LavenderBlush">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:240 B:245 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LawnGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:124 G:252 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LemonChiffon">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:250 B:205 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:173 G:216 B:230 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightCoral">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:240 G:128 B:128 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightCyan">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:224 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightGoldenrodYellow">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:250 G:250 B:210 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightGray">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:211 G:211 B:211 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:144 G:238 B:144 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightPink">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:182 B:193 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightSalmon">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:160 B:122 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightSeaGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:32 G:178 B:170 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightSkyBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:135 G:206 B:250 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightSlateGray">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:119 G:136 B:153 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightSteelBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:176 G:196 B:222 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LightYellow">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:255 B:224 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Lime">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:255 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.LimeGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:50 G:205 B:50 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Linen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:250 G:240 B:230 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Magenta">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:0 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Maroon">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:128 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumAquamarine">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:102 G:205 B:170 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:0 B:205 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumOrchid">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:186 G:85 B:211 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumPurple">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:147 G:112 B:219 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumSeaGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:60 G:179 B:113 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumSlateBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:123 G:104 B:238 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumSpringGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:250 B:154 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumTurquoise">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:72 G:209 B:204 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MediumVioletRed">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:199 G:21 B:133 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MidnightBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:25 G:25 B:112 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MintCream">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:245 G:255 B:250 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.MistyRose">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:228 B:225 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Moccasin">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:228 B:181 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.NavajoWhite">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:222 B:173 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Navy">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:0 B:128 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.OldLace">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:253 G:245 B:230 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Olive">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:128 G:128 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.OliveDrab">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:107 G:142 B:35 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Orange">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:165 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.OrangeRed">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:69 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Orchid">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:218 G:112 B:214 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PaleGoldenrod">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:238 G:232 B:170 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PaleGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:152 G:251 B:152 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PaleTurquoise">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:175 G:238 B:238 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PaleVioletRed">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:219 G:112 B:147 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PapayaWhip">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:239 B:213 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PeachPuff">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:218 B:185 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Peru">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:205 G:133 B:63 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Pink">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:192 B:203 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Plum">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:221 G:160 B:221 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.PowderBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:176 G:224 B:230 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Purple">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:128 G:0 B:128 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Red">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:0 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.RosyBrown">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:188 G:143 B:143 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.RoyalBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:65 G:105 B:225 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SaddleBrown">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:139 G:69 B:19 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Salmon">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:250 G:128 B:114 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SandyBrown">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:244 G:164 B:96 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SeaGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:46 G:139 B:87 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SeaShell">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:245 B:238 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Sienna">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:160 G:82 B:45 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Silver">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:192 G:192 B:192 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SkyBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:135 G:206 B:235 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SlateBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:106 G:90 B:205 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SlateGray">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:112 G:128 B:144 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Snow">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:250 B:250 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SpringGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:255 B:127 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.SteelBlue">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:70 G:130 B:180 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Tan">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:210 G:180 B:140 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Teal">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:128 B:128 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Thistle">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:216 G:191 B:216 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Tomato">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:99 B:71 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Transparent">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:0 G:0 B:0 A:0.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Turquoise">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:64 G:224 B:208 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Violet">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:238 G:130 B:238 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Wheat">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:245 G:222 B:179 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.White">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:255 B:255 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.WhiteSmoke">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:245 G:245 B:245 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.Yellow">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:255 G:255 B:0 A:255.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Color.YellowGreen">
            <summary>
            Gets the system-defined <see cref="T:TwistedLogik.Ultraviolet.Color"/> with the value R:154 G:205 B:50 A:255.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.TryParseHex(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Color@)">
            <summary>
            Converts the string representation of a color into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a color to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="color">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
            <remarks>Strings parsed by this method must be in one of the following formats:
            <list type="bullet">
            <item><description>#rgb</description></item>
            <item><description>#argb</description></item>
            <item><description>#rrggbb</description></item>
            <item><description>#aarrggbb</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Color.TryParseDelimitedOrNamed(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Color@)">
            <summary>
            Converts the string representation of a color into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Color"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a color to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="color">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
            <remarks>Strings parsed by this methods must be comma-delimited lists of three or four color components,
            in either R, G, B or A, R, G, B format, or a named color.</remarks>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.AssetException">
            <summary>
            Represents the exception that is thrown when an error occurs while retrieving an asset.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetException"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetException"/> class with the specified exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.AssetID">
            <summary>
            Represents a value which identifies an asset within one of the application's content manifests.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.#ctor(System.String,System.String,System.String,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure.
            </summary>
            <param name="manifestName">The name of the content manifest that contains the asset.</param>
            <param name="manifestGroup">The name of the content manifest group that contains the asset.</param>
            <param name="assetName">The asset's name within its content manifest group.</param>
            <param name="assetPath">The asset's path as specified by its content manifest.</param>
            <param name="assetIndex">The asset's index within its content manifest group.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.op_Equality(TwistedLogik.Ultraviolet.Content.AssetID,TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Returns <c>true</c> if the specified asset identifiers are equal.
            </summary>
            <param name="id1">The first <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> to compare.</param>
            <param name="id2">The second <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> to compare.</param>
            <returns><c>true</c> if the specified identifiers are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.op_Inequality(TwistedLogik.Ultraviolet.Content.AssetID,TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Returns <c>true</c> if the specified asset identifiers are not equal.
            </summary>
            <param name="id1">The first <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> to compare.</param>
            <param name="id2">The second <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> to compare.</param>
            <returns><c>true</c> if the specified identifiers are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.Parse(System.String)">
            <summary>
            Converts the string representation of an asset identifier to an instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure
            using the content manifest registry provided by the current Ultraviolet context.
            </summary>
            <param name="s">A string containing the asset identifier to convert.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.TryParse(System.String,TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Converts the string representation of an asset identifier to an instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure
            using the content manifest registry provided by the current Ultraviolet context.
            </summary>
            <param name="s">A string containing the asset identifier to convert.</param>
            <param name="value">An instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure that is equivalent to the specified string.</param>
            <returns><c>true</c> if the string was successfully parsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.Parse(TwistedLogik.Ultraviolet.Content.ContentManifestRegistry,System.String)">
            <summary>
            Converts the string representation of an asset identifier to an instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure.
            </summary>
            <param name="manifests">The content manifest registry that contains the currently-loaded content manifests.</param>
            <param name="s">A string containing the asset identifier to convert.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.TryParse(TwistedLogik.Ultraviolet.Content.ContentManifestRegistry,System.String,TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Converts the string representation of an asset identifier to an instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure.
            </summary>
            <param name="manifests">The content manifest registry that contains the currently-loaded content manifests.</param>
            <param name="s">A string containing the asset identifier to convert.</param>
            <param name="value">An instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure that is equivalent to the specified string.</param>
            <returns><c>true</c> if the string was successfully parsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetManifestName(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Gets the name of the content manifest that contains the specified asset.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The name of the content manifest that contains the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetManifestNameRef(TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Gets the name of the content manifest that contains the specified asset.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The name of the content manifest that contains the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetManifestGroup(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Gets the name of the content manifest group that contains the specified asset.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The name of the content manifest group that contains the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetManifestGroupRef(TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Gets the name of the content manifest group that contains the specified asset.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The name of the content manifest group that contains the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetAssetName(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Gets the specified asset's name within its content manifest group.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The specified asset's name within its content manifest group.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetAssetNameRef(TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Gets the specified asset's name within its content manifest group.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The specified asset's name within its content manifest group.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetAssetPath(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Gets the specified asset's full path relative to the content root directory.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The specified asset's full path relative to the content root directory.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetAssetPathRef(TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Gets the specified asset's full path relative to the content root directory.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The specified asset's full path relative to the content root directory.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetAssetIndex(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Gets the specified asset's index within its content manifest group.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The specified asset's index within its content manifest group.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetAssetIndexRef(TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Gets the specified asset's index within its content manifest group.
            </summary>
            <param name="id">The identifier of the asset to evaluate.</param>
            <returns>The specified asset's index within its content manifest group.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.GetHashCode">
            <summary>
            Retrieves the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns><c>true</c> if this object is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.Equals(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Determines whether this object is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this object.</param>
            <returns><c>true</c> if this object is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetID.Invalid">
            <summary>
            Gets an invalid asset identifier.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetID.IsValid">
            <summary>
            Gets a value indicating whether this is a valid asset identifier.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetID.TryParseInternal(TwistedLogik.Ultraviolet.Content.ContentManifestRegistry,System.String,TwistedLogik.Ultraviolet.Content.AssetID@)">
            <summary>
            Converts the string representation of an asset identifier to an instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure.
            </summary>
            <param name="manifests">The content manifest registry that contains the currently-loaded content manifests.</param>
            <param name="s">A string containing the asset identifier to convert.</param>
            <param name="value">An instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure that is equivalent to the specified string.</param>
            <returns><c>true</c> if the string was successfully parsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.AssetMetadata">
            <summary>
            Represents the metadata for an asset which is being loaded by the Ultraviolet content pipeline.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetMetadata.#ctor(System.String,System.String,System.Xml.Linq.XElement,System.Xml.Linq.XElement,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetMetadata"/> class.
            </summary>
            <param name="assetPath">The asset path of the asset being loaded.</param>
            <param name="assetFilePath">The path to the file that contains the asset being loaded.</param>
            <param name="importerMetadata">The asset's importer metadata.</param>
            <param name="processorMetadata">The asset's processor metadata.</param>
            <param name="isFile">A value indicating whether the asset was loaded from a file.</param>
            <param name="isStream">A value indicating whether the asset was loaded from a stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetMetadata.TwistedLogik#Ultraviolet#Content#IContentImporterMetadata#As``1">
            <summary>
            Creates an instance of the specified metadata type based on the metadata in this object.
            </summary>
            <typeparam name="T">The metadata type to create.</typeparam>
            <returns>A new instance of the specified metadata type.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AssetMetadata.TwistedLogik#Ultraviolet#Content#IContentProcessorMetadata#As``1">
            <summary>
            Creates an instance of the specified metadata type based on the metadata in this object.
            </summary>
            <typeparam name="T">The metadata type to create.</typeparam>
            <returns>A new instance of the specified metadata type.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.AssetPath">
            <summary>
            Gets the asset path of the asset being loaded.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.AssetFilePath">
            <summary>
            Gets the path to the file that contains the asset data.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.AssetFileName">
            <summary>
            Gets the name of the file that contains the asset data.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.Extension">
            <summary>
            Gets the file extension of the file being loaded.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.ImporterMetadata">
            <summary>
            Gets the asset's importer metadata.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.ProcessorMetadata">
            <summary>
            Gets the asset's processor metadata.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.IsFile">
            <summary>
            Gets a value indicating whether the asset was loaded from a file.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AssetMetadata.IsStream">
            <summary>
            Gets a value indicating whether the asset was loaded from a stream.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.AssetMetadata.StreamMetadata">
            <summary>
            Represents an empty asset metadata object for assets loaded from streams.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.AssetMetadata.InMemoryMetadata">
            <summary>
            Represents an empty asset metadata object for assets loaded in-memory.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader">
            <summary>
            Represents an object which can asynchronously load content assets on a background thread.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.Reset">
            <summary>
            Resets the content loader.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.AddStep(System.Action)">
            <summary>
            Adds a step to the content loader.
            </summary>
            <param name="step">The content loading step to add to the loader.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.AddStep(System.Action{TwistedLogik.Ultraviolet.Content.ContentManager})">
            <summary>
            Adds a step to the content loader.
            </summary>
            <param name="step">The content loading step to add to the loader.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.AddStep(TwistedLogik.Ultraviolet.Content.ContentManifest)">
            <summary>
            Adds a step to the content loader which loads the specified content manifest
            into the content manager's asset cache.
            </summary>
            <param name="manifest">The content manifest to load.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.AddDelay(System.Int32)">
            <summary>
            Adds a step which delays for the specified number of milliseconds.
            </summary>
            <param name="milliseconds">The number of milliseconds to delay.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.AddGarbageCollection">
            <summary>
            Adds a step which performs a garbage collection.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.AddGarbageCollection(System.Int32)">
            <summary>
            Adds a step which performs a garbage collection on the specified generation.
            </summary>
            <param name="generation">The generation on which to perform a collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.Load(TwistedLogik.Ultraviolet.Content.ContentManager,System.Action)">
            <summary>
            Asynchronously performs all of the steps that have been added to the loader.
            </summary>
            <param name="content">The content manager with which to load content.</param>
            <param name="continuation">An action to invoke when loading is complete.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.IsLoading">
            <summary>
            Gets a value indicating whether the content loader is in the process of loading content.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.IsLoaded">
            <summary>
            Gets a value indicating whether the loader's content is completely loaded.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.AsynchronousContentLoader.AddStepInternal(System.Action)">
            <summary>
            Adds a step to the content loader.
            </summary>
            <param name="step">The content loading step.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentArchive">
            <summary>
            Represents an archive containing multiple content files.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.#ctor(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Content.ContentArchiveNode})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/> class.
            </summary>
            <param name="roots">A collection containing the archive's root nodes.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.#ctor(System.Func{System.IO.Stream})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/> class.
            </summary>
            <param name="loader">A function which opens a stream into the archive data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.FromFileSystem(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new instance of <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/> from the specified set of directories.
            </summary>
            <param name="directories">A collection of directories from which to create the content archive.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.FromArchiveFile(System.Func{System.IO.Stream})">
            <summary>
            Creates a new instance of <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/> from the specified stream.
            </summary>
            <param name="loader">A function which opens a stream into the archive data.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.Save(System.IO.BinaryWriter)">
            <summary>
            Writes the content archive to the specified stream.
            </summary>
            <param name="writer">A <see cref="T:System.IO.BinaryWriter"/> on the stream to which to save the archive.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.Find(System.String,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.Extract(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/>.
            </summary>
            <returns>An enumerator that iterates through the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Content#ContentArchiveNode}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchive.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentArchiveNode">
            <summary>
            Represents a file or directory in an Ultraviolet content archive.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.#ctor(TwistedLogik.Ultraviolet.Content.ContentArchiveNode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchiveNode"/> class from a file or directory in the file system.
            </summary>
            <param name="parent">The node's parent node.</param>
            <param name="path">The path to the file or directory that this node represents.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.#ctor(TwistedLogik.Ultraviolet.Content.ContentArchiveNode,System.IO.BinaryReader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchiveNode"/> class from an archive stream.
            </summary>
            <param name="parent">The node's parent node.</param>
            <param name="reader">A <see cref="T:System.IO.BinaryReader"/> on the stream containing the archive data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.FromFileSystem(System.String)">
            <summary>
            Creates an archive tree that represents the specified path in the file system.
            </summary>
            <param name="path">The path for which to build an archive tree.</param>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchiveNode"/> that represents the root of the constructed archive tree.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.FromArchive(System.IO.BinaryReader)">
            <summary>
            Creates an archive tree that represents the data contained in the specified archive stream.
            </summary>
            <param name="reader">A <see cref="T:System.IO.BinaryReader"/> on the stream that contains the archive data.</param>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchiveNode"/> that represents the root of the constructed archive tree.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.ToString">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.WriteIndex(System.IO.BinaryWriter,System.Int64@)">
            <summary>
            Writes the node's index data, and the index data of its descendants, to the specified stream.
            </summary>
            <param name="writer">A <see cref="T:System.IO.BinaryWriter"/> on the stream to which to write the node data.</param>
            <param name="position">The position of the first node's data within the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.WriteData(System.IO.BinaryWriter)">
            <summary>
            Serializes the node and its descendants to the specified stream.
            </summary>
            <param name="writer">A <see cref="T:System.IO.BinaryWriter"/> on the stream to which to serialize the node.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.Parent">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.Path">
            <summary>
            Gets the file's path within its source.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.Name">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.IsFile">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.IsDirectory">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.Position">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.SizeInBytes">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.Children">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.BuildPath(TwistedLogik.Ultraviolet.Content.ContentArchiveNode,System.String)">
            <summary>
            Builds an asset path for a node.
            </summary>
            <param name="parent">The node's parent node.</param>
            <param name="name">The node's name.</param>
            <returns>The asset path for a node with the specified parameters.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.LoadChildren(System.String)">
            <summary>
            Loads the node's child nodes from the file system.
            </summary>
            <param name="path">The full path that the node represents.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveNode.WriteIndexInternal(System.IO.BinaryWriter,System.Int64@)">
            <summary>
            Writes the 
            </summary>
            <param name="writer"></param>
            <param name="position"></param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentArchiveStream">
            <summary>
            Represents a <see cref="T:System.IO.Stream"/> which exposes a resource contained by a <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchive"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.#ctor(System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentArchiveStream"/> class.
            </summary>
            <param name="source">The source <see cref="T:System.IO.Stream"/>.</param>
            <param name="start">The position at which the file data begins within the source stream.</param>
            <param name="length">The file data's length in bytes.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.Flush">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentArchiveStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentBinaryReaderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentBinaryReaderExtensions.ReadAssetID(System.IO.BinaryReader)">
            <summary>
            Reads an asset identifier from the stream using the content manifest registry
            belonging to the current Ultraviolet context.
            </summary>
            <param name="reader">The binary reader from which to read the asset identifier.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure representing the 
            asset identifier that was read from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentBinaryReaderExtensions.ReadNullableAssetID(System.IO.BinaryReader)">
            <summary>
            Reads a nullable asset identifier from the stream using the content manifest registry
            belonging to the current Ultraviolet context.
            </summary>
            <param name="reader">The binary reader from which to read the asset identifier.</param>
            <returns>An instance of the <see cref="T:System.Nullable`1"/> structure representing the 
            asset identifier that was read from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentBinaryReaderExtensions.ReadAssetID(System.IO.BinaryReader,TwistedLogik.Ultraviolet.Content.ContentManifestRegistry)">
            <summary>
            Reads an asset identifier from the stream.
            </summary>
            <param name="reader">The binary reader from which to read the asset identifier.</param>
            <param name="manifests">The registry that contains the application's loaded manifests.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure representing the
            asset identifier that was read from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentBinaryReaderExtensions.ReadNullableAssetID(System.IO.BinaryReader,TwistedLogik.Ultraviolet.Content.ContentManifestRegistry)">
            <summary>
            Reads a nullable asset identifier from the stream.
            </summary>
            <param name="reader">The binary reader from which to read the asset identifier.</param>
            <param name="manifests">The registry that contains the application's loaded manifests.</param>
            <returns>An instance of the <see cref="T:System.Nullable`1"/> structure representing the
            asset identifier that was read from the stream.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentBinaryWriterExtensions">
            <summary>
            Contains extensoin methods for the <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentBinaryWriterExtensions.Write(System.IO.BinaryWriter,TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Writes an asset identifier to the stream.
            </summary>
            <param name="writer">The binary writer with which to write the asset identifier.</param>
            <param name="id">The <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentBinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{TwistedLogik.Ultraviolet.Content.AssetID})">
            <summary>
            Writes an asset identifier to the stream.
            </summary>
            <param name="writer">The binary writer with which to write the asset identifier.</param>
            <param name="id">The <see cref="T:System.Nullable`1"/> structure to write to the stream.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentImporter`1">
            <summary>
            <para>Represents a content importer.</para>
            <para>Content importers take raw file data and transform them into intermediate data structures,
            which are then used by content processors to produce game assets.</para>
            </summary>
            <typeparam name="T">The intermediate asset type which is produced by the content importer.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporter`1.TwistedLogik#Ultraviolet#Content#IContentImporter#Import(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,System.IO.Stream)">
            <summary>
            Imports the data from the specified file.
            </summary>
            <param name="metadata">The asset metadata for the asset to import.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data to import.</param>
            <returns>The data structure that was imported from the file.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporter`1.Import(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,System.IO.Stream)">
            <summary>
            Imports the data from the specified file.
            </summary>
            <param name="metadata">The asset metadata for the asset to import.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data to import.</param>
            <returns>The data structure that was imported from the file.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporter`1.ResolveDependencyAssetPath(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,System.String)">
            <summary>
            Resolves the asset path of the specified dependency.
            </summary>
            <param name="metadata">The content processor metadata.</param>
            <param name="dependency">The relative path of the dependency to resolve.</param>
            <returns>The asset path of the specified dependency.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentImporterAttribute">
            <summary>
            Represents an attribute which marks a class as a content importer.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentImporterAttribute"/> class.
            </summary>
            <param name="extension">The file extension for which the importer is used.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentImporterAttribute.Extension">
            <summary>
            Gets the file extension which is handled by the importer.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry">
            <summary>
            Represents an Ultraviolet context's registry of content importers.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers the importers in the specified assembly.
            </summary>
            <param name="asm">The assembly that contains the importers to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.FindImporter(System.String)">
            <summary>
            Finds the appropriate importer for the specified file extension.
            </summary>
            <param name="extension">The file extension for which to find a content importer.</param>
            <returns>The content importer for the specified file extension, or <c>null</c> if no appropriate importer could be found.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.FindImporter(System.String,System.Type@)">
            <summary>
            Finds the appropriate importer for the specified file extension.
            </summary>
            <param name="extension">The file extension for which to find a content importer.</param>
            <param name="outputType">The importer's output type.</param>
            <returns>The content importer for the specified file extension, or <c>null</c> if no appropriate importer could be found.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.RegisterImporter``1(System.String)">
            <summary>
            Registers a content importer for the specified file extension.
            </summary>
            <typeparam name="T">The type of content importer to register.</typeparam>
            <param name="extension">The file extension for which to register the importer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.UnregisterImporter``1(System.String)">
            <summary>
            Unregisters a content importer from the specified file extension.
            </summary>
            <typeparam name="T">The type of content importer to unregister.</typeparam>
            <param name="extension">The file extension from which to unregister the importer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.GetBaseContentImporterType(System.Type)">
            <summary>
            Gets the ContentImporter type from which the specified type is derived.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The ContentImporter type from which the specified type is derived.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.CreateImporterInstance(System.Type)">
            <summary>
            Creates an instance of the specified importer type.
            </summary>
            <param name="type">The type of importer to instantiate.</param>
            <returns>The importer instance that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.RegistryEntry">
            <summary>
            Represents an entry in a content importer registry.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.RegistryEntry.#ctor(TwistedLogik.Ultraviolet.Content.IContentImporter)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.RegistryEntry"/> structure.
            </summary>
            <param name="importer">The registered importer instance.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.RegistryEntry.Importer">
            <summary>
            Get the registered importer instance.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentImporterRegistry.RegistryEntry.OutputType">
            <summary>
            Gets the registered importer's output type.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentLoadException">
            <summary>
            Represents the exception that is thrown when content fails to load correctly.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentLoadException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentLoadException"/> class
            with the specified exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentLoadException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentLoadException"/> class 
            with the specified exception message and inner exception..
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception's inner exception.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentManager">
            <summary>
            Represents a collection of related content assets.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags">
            <summary>
            Controls how a <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> resolves an asset path to a filename.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags.None">
            <summary>
            No options.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags.IncludePreprocessed">
            <summary>
            Include preprocessed (UVC) files as candidate matches.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags.PerformSubstitution">
            <summary>
            Perform asset substitutions during resolution.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags.Default">
            <summary>
            The default options for asset resolution.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> class with the specified root directory.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="rootDirectory">The content manager's root directory.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Create(System.String)">
            <summary>
            Creates a new <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with the specified root directory.
            </summary>
            <param name="rootDirectory">The content manager's root directory.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Create(System.String[])">
            <summary>
            Creates a new <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with the specified root directory.
            </summary>
            <param name="rootDirectoryPaths">An array containing the parts of the path to the content manager's root directory.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.NormalizeAssetPath(System.String)">
            <summary>
            Converts the specified asset path to a normalized asset path.
            </summary>
            <param name="path">The asset path to normalize.</param>
            <returns>The normalized asset path.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Load(TwistedLogik.Ultraviolet.Content.ContentManifest)">
            <summary>
            Loads all of the assets in the specified <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> into the content manager's asset cache.
            </summary>
            <param name="manifest">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> to load.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Load``1(System.String,System.Boolean)">
            <summary>
            Loads the specified asset file.
            </summary>
            <typeparam name="TOutput">The type of object being loaded.</typeparam>
            <remarks>Content managers maintain a cache of references to all loaded assets, so calling Load() multiple
            times on a content manager with the same parameter will return the same object rather than reloading the source file.</remarks>
            <param name="asset">The path to the asset to load.</param>
            <param name="cache">A value indicating whether to add the asset to the manager's cache.</param>
            <returns>The asset that was loaded from the specified file.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Load``1(TwistedLogik.Ultraviolet.Content.AssetID,System.Boolean)">
            <summary>
            Loads the specified asset file.
            </summary>
            <typeparam name="TOutput">The type of object being loaded.</typeparam>
            <remarks>Content managers maintain a cache of references to all loaded assets, so calling Load() multiple
            times on a content manager with the same parameter will return the same object rather than reloading the source file.</remarks>
            <param name="asset">The path to the asset to load.</param>
            <param name="cache">A value indicating whether to add the asset to the manager's cache.</param>
            <returns>The asset that was loaded from the specified file.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.LoadFromStream``1(System.IO.Stream,System.String)">
            <summary>
            Loads the specified asset stream.
            </summary>
            <typeparam name="TOutput">The type of object being loaded.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the asset to load.</param>
            <param name="extension">The file extension to use to search for a content importer.</param>
            <returns>The asset that was loaded from the specified stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Import``1(System.String[])">
            <summary>
            Imports the specified asset, but does not process it.
            </summary>
            <typeparam name="TOutput">The type of the intermediate object produced by the content importer.</typeparam>
            <param name="paths">An array of parts of the path to the asset to import.</param>
            <returns>The imported asset in its intermediate form.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Import``1(System.String)">
            <summary>
            Imports the specified asset, but does not process it.
            </summary>
            <typeparam name="TOutput">The type of the intermediate object produced by the content importer.</typeparam>
            <param name="asset">The path to the asset to import.</param>
            <returns>The imported asset in its intermediate form.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Import``1(System.String,System.Type@)">
            <summary>
            Imports the specified asset, but does not process it.
            </summary>
            <typeparam name="TOutput">The type of the intermediate object produced by the content importer.</typeparam>
            <param name="asset">The path to the asset to import.</param>
            <param name="outputType">The output type of the content importer which was used.</param>
            <returns>The imported asset in its intermediate form.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Import``1(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Imports the specified asset, but does not process it.
            </summary>
            <typeparam name="TOutput">The type of the intermediate object produced by the content importer.</typeparam>
            <param name="asset">The path to the asset to import.</param>
            <returns>The imported asset in its intermediate form.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Import``1(TwistedLogik.Ultraviolet.Content.AssetID,System.Type@)">
            <summary>
            Imports the specified asset, but does not process it.
            </summary>
            <typeparam name="TOutput">The type of the intermediate object produced by the content importer.</typeparam>
            <param name="asset">The path to the asset to import.</param>
            <param name="outputType">The output type of the content importer which was used.</param>
            <returns>The imported asset in its intermediate form.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.ImportFromStream``1(System.IO.Stream,System.String)">
            <summary>
            Imports the specified asset from the specified stream, but does not process it.
            </summary>
            <typeparam name="TOutput">The type of the intermediate object produced by the content importer.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the asset data.</param>
            <param name="extension">The file extension to use to search for a content importer.</param>
            <returns>The imported asset in its intermediate form.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Process``1(System.Object,System.Xml.Linq.XElement)">
            <summary>
            Processes an intermediate object into an asset object.
            </summary>
            <typeparam name="TOutput">The type of the asset object produced by the content processor.</typeparam>
            <param name="intermediate">The intermediate object to process.</param>
            <param name="metadata">The processor metadata, if any.</param>
            <returns>The processed asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Process``2(``0,System.Xml.Linq.XElement)">
            <summary>
            Processes an intermediate object into an asset object.
            </summary>
            <typeparam name="TInput">The type of the intermediate object being processed.</typeparam>
            <typeparam name="TOutput">The type of the asset object produced by the content processor.</typeparam>
            <param name="intermediate">The intermediate object to process.</param>
            <param name="metadata">The processor metadata, if any.</param>
            <returns>The processed asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Preprocess(TwistedLogik.Ultraviolet.Content.ContentManifest,System.Boolean)">
            <summary>
            Preprocesses the assets in the specified content manifest.
            </summary>
            <param name="manifest">The content manifest to preprocess.</param>
            <param name="delete">A value indicating whether to delete the original files after preprocessing them.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Preprocess(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Content.ContentManifest},System.Boolean)">
            <summary>
            Preprocesses the assets in the specified content manifests.
            </summary>
            <param name="manifests">A collection containing the content manifests to preprocess.</param>
            <param name="delete">A value indicating whether to delete the original files after preprocessing them.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Preprocess``1(System.String,System.Boolean)">
            <summary>
            Preprocesses the specified asset by saving it in a binary format designed for fast deserialization.
            If the asset's content importer does not support a binary data format, this method has no effect.
            </summary>
            <typeparam name="TOutput">The type of asset to preprocess.</typeparam>
            <param name="asset">The asset to preprocess.</param>
            <param name="delete">A value indicating whether to delete the original file after preprocessing it.</param>
            <returns><c>true</c> if the asset was preprocessed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Preprocess``1(TwistedLogik.Ultraviolet.Content.AssetID,System.Boolean)">
            <summary>
            Preprocesses the specified asset by saving it in a binary format designed for fast deserialization.
            If the asset's content importer does not support a binary data format, this method has no effect.
            </summary>
            <typeparam name="TOutput">The type of asset to preprocess.</typeparam>
            <param name="asset">The asset to preprocess.</param>
            <param name="delete">A value indicating whether to delete the original file after preprocessing it.</param>
            <returns><c>true</c> if the asset was preprocessed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.FlushDeletedFiles">
            <summary>
            Flushes the file deletion buffer.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.ResolveAssetFilePath(System.String)">
            <summary>
            Resolves the full path to the file that represents the specified asset.
            </summary>
            <param name="asset">The asset path for which to resolve a file path.</param>
            <returns>The full path to the file that represents the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.ResolveAssetFilePath(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Resolves the full path to the file that represents the specified asset.
            </summary>
            <param name="asset">The asset identifier for which to resolve a file path.</param>
            <returns>The full path to the file that represents the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetAssetsInDirectory(System.String,System.String)">
            <summary>
            Gets a list of assets in the specified asset directory.
            </summary>
            <param name="path">The directory to evaluate.</param>
            <param name="searchPattern">The search string to match against the names of files in the path.</param>
            <returns>The list of assets in the specified asset directory.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetAssetFilePathsInDirectory(System.String,System.String)">
            <summary>
            Gets a list of resolved asset file paths in the specified asset directory.
            </summary>
            <param name="path">The directory to evaluate.</param>
            <param name="searchPattern">The search string to match against the names of files in the path.</param>
            <returns>The list of resolved asset file paths in the specified asset directory.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetSubdirectories(System.String,System.String)">
            <summary>
            Gets a list of subdirectories in the specified asset directory.
            </summary>
            <param name="path">The directory to evaluate.</param>
            <param name="searchPattern">The search string to match against the names of directories in the path.</param>
            <returns>The list of subdirectories in the specified asset directory.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManager.RootDirectory">
            <summary>
            Gets the content manager's root directory.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManager.OverrideDirectories">
            <summary>
            Gets the content manager's collection of override directories.
            </summary>
            <remarks>Override directories are alternative paths where the content manager will search for asset files.
            If multiple override directories contain an asset with the same path, directories which have higher indices 
            within this collection will take priority over directories with lower indices, "overriding" the other values
            of the asset in question. All override directories take precedence over the content manager's root directory.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManager.BatchDeletedFiles">
            <summary>
            Gets or sets a value indicating whether the content manager should batch file deletions.
            </summary>
            <remarks>When this property is set to <c>true</c>, <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> will not delete files
            immediately. Instead, it will buffer deletions until the batch is ended. This is useful when, for example,
            preprocessing a large number of files which depend on the same raw resources; batching deletes ensures that
            those raw resources remain on disk until all of the assets are preprocessed.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetRelativePath(System.String,System.String)">
            <summary>
            Converts the specified path to a path which is relative to the specified root directory.
            </summary>
            <param name="root">The root directory.</param>
            <param name="path">The path to convert.</param>
            <returns>The converted path.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.ListPossibleSubstitutions(System.String,TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket)">
            <summary>
            Lists the assets which can serve as substitutions for the specified asset.
            </summary>
            <param name="path">The file path of the asset for which to list substitutions.</param>
            <param name="maxDensityBucket">The maximum density bucket to consider.</param>
            <returns>A collection containing the specified asset's possible substitution assets.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.FindContentImporter(System.String,System.Type@)">
            <summary>
            Finds the importer for the specified asset.
            </summary>
            <param name="asset">The asset for which to find an importer.</param>
            <param name="outputType">The importer's output type.</param>
            <returns>The importer for the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.FindContentProcessor(System.String,System.Type,System.Type)">
            <summary>
            Finds the processor for the specified type.
            </summary>
            <param name="asset">The asset for which to find a processor.</param>
            <param name="inputType">The processor's input type.</param>
            <param name="outputType">The processor's output type.</param>
            <returns>The processor for the specified type.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.LoadInternal(System.String,System.Type,System.Boolean,System.Boolean,System.Boolean,System.Object@)">
            <summary>
            Loads or preprocesses the specified content file.
            </summary>
            <param name="asset">The asset to load.</param>
            <param name="type">The type of asset to load.</param>
            <param name="cache">A value indicating whether to add the loaded asset to the asset cache.</param>
            <param name="preprocess">A value indicating whether to preprocess the loaded asset.</param>
            <param name="delete">A value indicating whether to delete the original file after preprocessing it.</param>
            <param name="result">The asset that was loaded.</param>
            <returns><c>true</c> if the asset was loaded or preprocessed successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.LoadInternalFromStream(System.Type,System.IO.Stream,System.String)">
            <summary>
            Loads a raw asset from a stream.
            </summary>
            <param name="type">The type of asset to load.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the asset to load.</param>
            <param name="extension">The file extension to use to search for a content importer.</param>
            <returns>The asset that was loaded.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.LoadInternalRaw(System.Type,System.String,TwistedLogik.Ultraviolet.Content.AssetMetadata,TwistedLogik.Ultraviolet.Content.IContentImporter@,TwistedLogik.Ultraviolet.Content.IContentProcessor@)">
            <summary>
            Loads a raw asset.
            </summary>
            <param name="type">The type of asset to load.</param>
            <param name="asset">The name of the asset being loaded.</param>
            <param name="metadata">The asset metadata.</param>
            <param name="importer">The content importer for this asset.</param>
            <param name="processor">The content processor for this asset.</param>
            <returns>The asset that was loaded.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.LoadInternalPreprocessed(System.String,System.String,TwistedLogik.Ultraviolet.Content.IContentImporter@,TwistedLogik.Ultraviolet.Content.IContentProcessor@)">
            <summary>
            Loads a preprocessed asset.
            </summary>
            <param name="asset">The name of the asset being loaded.</param>
            <param name="path">The path to the asset file.</param>
            <param name="importer">The content importer for the asset.</param>
            <param name="processor">The content processor for the asset.</param>
            <returns>The asset that was loaded.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.PreprocessInternal(System.String,TwistedLogik.Ultraviolet.Content.AssetMetadata,TwistedLogik.Ultraviolet.Content.IContentProcessor,System.Object,System.Boolean)">
            <summary>
            Preprocesses an asset.
            </summary>
            <param name="asset">The name of the asset to preprocess.</param>
            <param name="metadata">The asset metadata.</param>
            <param name="processor">The content processor for the asset.</param>
            <param name="intermediate">The intermediate form of the asset to preprocess.</param>
            <param name="delete">A value indicating whether the original file will be deleted after preprocessing is complete.</param>
            <returns><c>true</c> if the asset was preprocessed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.IsPreprocessedFile(System.String)">
            <summary>
            Gets a value indicating whether the specified file is preprocessed.
            </summary>
            <param name="filename">The filename to evaluate.</param>
            <returns><c>true</c> if the specified file is preprocessed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.IsMetadataFile(System.String)">
            <summary>
            Gets a value indicating whether the specified file contains asset metadata.
            </summary>
            <param name="filename">The filename to evaluate.</param>
            <returns><c>true</c> if the specified file contains asset metadata; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetAssetPathFromDirectory(System.String,System.String,System.String@,TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags)">
            <summary>
            Gets the path of the specified asset relative to the specified root directory.
            </summary>
            <param name="root">The root directory.</param>
            <param name="asset">The asset name.</param>
            <param name="extension">The required file extension, if any; otherwise, <c>null</c>.</param>
            <param name="flags">A collection of <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags"/> values indicating how to resolve the asset path.</param>
            <returns>The path of the specified asset relative to the specified root directory.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetAssetPath(System.String,System.String,System.String@,TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags)">
            <summary>
            Gets the path to the specified asset.
            </summary>
            <param name="asset">The asset name.</param>
            <param name="extension">The extension for which to search, or <c>null</c> to search for any extension.</param>
            <param name="directory">The directory in which the asset was found.</param>
            <param name="flags">A collection of <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager.AssetResolutionFlags"/> values indicating how to resolve the asset path.</param>
            <returns>The path of the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetAssetMetadata(System.String,System.Boolean)">
            <summary>
            Gets the metadata for the specified asset.
            </summary>
            <param name="asset">The asset for which to find metadata.</param>
            <param name="includePreprocessedFiles">A value indicating whether to include preprocessed files in the search.</param>
            <returns>The metadata for the specified asset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.CreateMetadataFromFile(System.String,System.String,System.String)">
            <summary>
            Creates an asset metadata object from the specified asset file.
            </summary>
            <param name="asset">The normalized asset path.</param>
            <param name="filename">The filename of the file from which to create asset metadata.</param>
            <param name="rootdir">The root directory from which the file is being loaded.</param>
            <returns>The asset metadata for the specified asset file.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetAssetsInDirectoryInternal(System.String,System.String)">
            <summary>
            Gets a list of assets in the specified asset directory.
            </summary>
            <param name="path">The directory to evaluate.</param>
            <param name="searchPattern">The search string to match against the names of files in the path.</param>
            <returns>The list of assets in the specified asset directory.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetAssetsInDirectory(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the specified result set with the list of assets at the specified path.
            </summary>
            <param name="directory">The root directory being examined.</param>
            <param name="path">The path relative to the root directory being examined.</param>
            <param name="searchPattern">The search string to match against the names of files in the path.</param>
            <param name="results">The result set to update.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.GetSubdirectories(System.String,System.String,System.String,System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Updates the specified result set with the list of directories at the specified path.
            </summary>
            <param name="directory">The root directory being examined.</param>
            <param name="path">The path relative to the root directory being examined.</param>
            <param name="searchPattern">The search string to match against the names of directories in the path.</param>
            <param name="results">The result set to update.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.PreprocessInternal(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Content.ContentManifest},System.Boolean)">
            <summary>
            Preprocesses the assets in the specified content manifests.
            </summary>
            <param name="manifests">A collection containing the content manifests to preprocess.</param>
            <param name="delete">A value indicating whether to delete the original files after preprocessing them.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManager.PreprocessInternal(System.Type,System.String,System.Boolean)">
            <summary>
            Preprocesses the specified asset by saving it in a binary format designed for fast deserialization.
            If the asset's content importer does not support a binary data format, this method has no effect.
            </summary>
            <param name="type">The type of asset to preprocess.</param>
            <param name="asset">The asset to preprocess.</param>
            <param name="delete">A value indicating whether to delete the original file after preprocessing it.</param>
            <returns><c>true</c> if the asset was preprocessed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentManifest">
            <summary>
            Represents a manifest containing a list of related content assets.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifest.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Xml.Linq.XElement})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> class.
            </summary>
            <param name="name">The content manifest's name.</param>
            <param name="groups">The content manifest's group definitions.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifest.Load(System.String)">
            <summary>
            Loads a content manifest from the file at the specified path.
            </summary>
            <param name="path">The path to the file to load.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> that was loaded from the specified file.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifest.Load(System.IO.Stream)">
            <summary>
            Loads a content manifst from the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the content manifest to load.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> that was loaded from the specified stream.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifest.Name">
            <summary>
            Gets the content manifest's name.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifest.GetName(TwistedLogik.Ultraviolet.Content.ContentManifestGroup)">
            <summary>
            Gets the specified item's name.
            </summary>
            <param name="item">The item for which to retrieve a name.</param>
            <returns>The specified item's name.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentManifestAsset">
            <summary>
            Represents an individual asset within a content manifest.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestAsset.#ctor(TwistedLogik.Ultraviolet.Content.ContentManifestGroup,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifestAsset"/> class.
            </summary>
            <param name="group">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifestGroup"/> that owns the asset.</param>
            <param name="element">The XML element that defines the asset.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestAsset.CreateAssetID">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure that represents this asset.
            </summary>
            <returns>The instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> structure that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestAsset.ManifestGroup">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifestGroup"/> that owns the asset.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestAsset.Name">
            <summary>
            Gets the asset's name within the content manifest.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestAsset.RelativePath">
            <summary>
            Gets the asset's path relative to its group's root directory.
            </summary>
            <remarks>This is the same path that is passed to <see cref="M:TwistedLogik.Ultraviolet.Content.ContentManager.Load``1(System.String,System.Boolean)"/>.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestAsset.AbsolutePath">
            <summary>
            Gets the asset's path including its group's root directory.
            </summary>
            <remarks>This is the same path that is passed to <see cref="M:TwistedLogik.Ultraviolet.Content.ContentManager.Load``1(System.String,System.Boolean)"/>.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestAsset.Type">
            <summary>
            Gets the asset's type.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentManifestGroup">
            <summary>
            Represents a group of related assets within a content manifest.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.#ctor(TwistedLogik.Ultraviolet.Content.ContentManifest,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifestGroup"/> class.
            </summary>
            <param name="manifest">The content manifest that owns the group.</param>
            <param name="element">The XML element that defines the content manifest group.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.PopulateAssetLibrary(System.Type)">
            <summary>
            Populates the specified asset library type with the manifest group's asset identifiers.
            </summary>
            <param name="type">The type to populate with asset identifiers.</param>
            <remarks>This method will populate the values of any publicly-accessible static fields
            and properties of type <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> which match the names of assets within this manifest group.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.IndexOf(TwistedLogik.Ultraviolet.Content.ContentManifestAsset)">
            <summary>
            Gets the index of the specified asset within the manifest group.
            </summary>
            <param name="asset">The asset for which to retrieve an index.</param>
            <returns>The index of the specified asset within the manifest group, or -1 if 
            the asset does not exist in the manifest group.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.Manifest">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> that owns this group.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.Name">
            <summary>
            Gets the content group's name.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.Directory">
            <summary>
            Gets the root directory of assets within the content group.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.Type">
            <summary>
            Gets the type of assets within the content group.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestGroup.GetName(TwistedLogik.Ultraviolet.Content.ContentManifestAsset)">
            <summary>
            Gets the specified item's name.
            </summary>
            <param name="item">The item for which to retrieve a name.</param>
            <returns>The specified item's name.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry">
            <summary>
            Represents an Ultraviolet context's registry of loaded content manifests.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Load(System.String)">
            <summary>
            Loads a content manifest from the file at the specified path and adds it to the registry.
            </summary>
            <param name="path">The path to the file to load.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Load(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Loads the content manifests from the files at the specified collection of paths and adds them to the registry.
            </summary>
            <param name="paths">A collection of paths representing the files to load.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Load(System.IO.Stream)">
            <summary>
            Loads a content manifest from the specified stream and adds it to the registry.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the content manifest to load.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Clear">
            <summary>
            Clears the content manifest registry.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Add(TwistedLogik.Ultraviolet.Content.ContentManifest)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> to the registry.
            </summary>
            <param name="manifest">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifest"/> to add to the registry.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Remove(System.String)">
            <summary>
            Removes the specified content manifest from the registry.
            </summary>
            <param name="name">The name of the content manifest to remove from the registry.</param>
            <returns><c>true</c> if the content manifest was removed from the registry; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Contains(System.String)">
            <summary>
            Gets a value indicating whether the content manifest registry contains a manifest with the specified name.
            </summary>
            <param name="name">The manifest name to evaluate.</param>
            <returns><c>true</c> if the content manifest registry contains a manifest with the specified name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.Contains(TwistedLogik.Ultraviolet.Content.ContentManifest)">
            <summary>
            Gets a value indicating whether the content manifest registry contains the specified manifest.
            </summary>
            <param name="manifest">The manifest to evaluate.</param>
            <returns><c>true</c> if the content manifest registry contains the specified manifest; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry.GetName(TwistedLogik.Ultraviolet.Content.ContentManifest)">
            <summary>
            Gets the specified item's name.
            </summary>
            <param name="item">The item for which to retrieve a name.</param>
            <returns>The specified item's name.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentOverrideDirectoryCollection">
            <summary>
            Represents a collection of content override directories.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentOverrideDirectoryCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentOverrideDirectoryCollection.Add(System.String)">
            <summary>
            Adds a directory to the collection.
            </summary>
            <param name="directory">The directory to add to the collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentOverrideDirectoryCollection.Remove(System.String)">
            <summary>
            Removes a directory from the collection.
            </summary>
            <param name="directory">The directory to remove from the collection.</param>
            <returns><c>true</c> if the directory was removed from the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentOverrideDirectoryCollection.Contains(System.String)">
            <summary>
            Gets a value indicating whether the collection contains the specified directory.
            </summary>
            <param name="directory">The directory to evaluate.</param>
            <returns><c>true</c> if the collection contains the specified directory; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentProcessor`2">
            <summary>
            <para>Represents a content processor.</para>
            <para>Content processors take the data structures created by content importers and transform them into game assets.</para>
            </summary>
            <typeparam name="Input">The type of the intermediate object which serves as the content processor's input.</typeparam>
            <typeparam name="Output">The type of content asset which is produced by the content processor.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.TwistedLogik#Ultraviolet#Content#IContentProcessor#ExportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryWriter,System.Object,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.TwistedLogik#Ultraviolet#Content#IContentProcessor#ImportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.TwistedLogik#Ultraviolet#Content#IContentProcessor#Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.ExportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryWriter,`0,System.Boolean)">
            <summary>
            Exports an asset to a preprocessed binary stream.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="writer">A writer on the stream to which to export the asset.</param>
            <param name="input">The asset to export to the stream.</param>
            <param name="delete">A value indicating whether the original file will be deleted after preprocessing is complete.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.ImportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryReader)">
            <summary>
            Imports an asset from the specified preprocessed binary stream.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="reader">A reader on the stream that contains the asset to import.</param>
            <returns>The asset that was imported from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,`0)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.SupportsPreprocessing">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessor`2.ResolveDependencyAssetPath(TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.String)">
            <summary>
            Resolves the asset path of the specified dependency.
            </summary>
            <param name="metadata">The content processor metadata.</param>
            <param name="dependency">The relative path of the dependency to resolve.</param>
            <returns>The asset path of the specified dependency.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentProcessorAttribute">
            <summary>
            Represents an attribute which marks a class as a content processor.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry">
            <summary>
            Represents an Ultraviolet context's registry of content processors.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegisterAssembly(System.Reflection.Assembly)">
            <summary>
            Registers any content processors which are defined in the specified assembly.
            </summary>
            <param name="asm">The assembly that contains the content processors to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.FindProcessor(System.Type,System.Type)">
            <summary>
            Finds the content processor that takes the specified input type and produces the specified output type.
            </summary>
            <param name="input">The processor's input type.</param>
            <param name="output">The processor's output type.</param>
            <returns>The content processor that takes the specified types, or <c>null</c> if no such processor exists.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.FindProcessor``2">
            <summary>
            Finds the content processor that takes the specified input type and produces the specified output type.
            </summary>
            <typeparam name="TInput">The processor's input type.</typeparam>
            <typeparam name="TOutput">The processor's output type.</typeparam>
            <returns>The content processor that takes the specified types, or <c>null</c> if no such processor exists.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegisterProcessor``1">
            <summary>
            Registers a content processor.
            </summary>
            <typeparam name="T">The type of content processor to register.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.UnregisterProcessor``1">
            <summary>
            Unregisters a content processor.
            </summary>
            <typeparam name="T">The type of content processor to unregister.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.GetBaseContentProcessorType(System.Type)">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Content.IContentProcessor"/> type from which the specified type is derived.
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Content.IContentProcessor"/> type from which the specified type is derived.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.CreateProcessorInstance(System.Type)">
            <summary>
            Creates an instance of the specified processor type.
            </summary>
            <param name="type">The type of importer to instantiate.</param>
            <returns>The importer instance that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegistryKey">
            <summary>
            Represents a content processor's key within a content processor registry.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegistryKey.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegistryKey"/> structure.
            </summary>
            <param name="input">The input type.</param>
            <param name="output">The output type.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegistryKey.Equals(TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegistryKey)">
            <summary>
            Checks two objects for equality.
            </summary>
            <param name="other">The object to compare against this object for equality.</param>
            <returns><c>true</c> if this object is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegistryKey.Input">
            <summary>
            The input type.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Content.ContentProcessorRegistry.RegistryKey.Output">
            <summary>
            The output type.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.IContentImporter">
            <summary>
            Represents a content importer.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.IContentImporter.Import(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,System.IO.Stream)">
            <summary>
            Imports the data from the specified file.
            </summary>
            <param name="metadata">The asset metadata for the asset to import.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data to import.</param>
            <returns>The data structure that was imported from the file.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.IContentImporterMetadata">
            <summary>
            Represents a content importer's asset metadata.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.IContentImporterMetadata.As``1">
            <summary>
            Creates an instance of the specified metadata type based on the metadata in this object.
            </summary>
            <typeparam name="T">The metadata type to create.</typeparam>
            <returns>A new instance of the specified metadata type.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentImporterMetadata.AssetPath">
            <summary>
            Gets the asset path of the asset being loaded.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentImporterMetadata.AssetFilePath">
            <summary>
            Gets the path to the file that contains the asset data.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentImporterMetadata.AssetFileName">
            <summary>
            Gets the name of the file that contains the asset data.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.IContentProcessor">
            <summary>
            Represents a content processor.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.IContentProcessor.ExportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryWriter,System.Object,System.Boolean)">
            <summary>
            Exports an asset to a preprocessed binary stream.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="writer">A writer on the stream to which to export the asset.</param>
            <param name="input">The asset to export to the stream.</param>
            <param name="delete">A value indicating whether the original file will be deleted after preprocessing is complete.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.IContentProcessor.ImportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryReader)">
            <summary>
            Imports an asset from the specified preprocessed binary stream.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="reader">A reader on the stream that contains the asset to import.</param>
            <returns>The asset that was imported from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.IContentProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Object)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The content manager with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentProcessor.SupportsPreprocessing">
            <summary>
            Gets a value indicating whether the processor supports preprocessing assets.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata">
            <summary>
            Represents a content processor's asset metadata.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata.As``1">
            <summary>
            Creates an instance of the specified metadata type based on the metadata in this object.
            </summary>
            <typeparam name="T">The metadata type to create.</typeparam>
            <returns>A new instance of the specified metadata type.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata.AssetPath">
            <summary>
            Gets the asset path of the asset being loaded.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata.AssetFilePath">
            <summary>
            Gets the path to the file that contains the asset data.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata.AssetFileName">
            <summary>
            Gets the name of the file that contains the asset data.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata.Extension">
            <summary>
            Gets the asset's extension.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata.IsFile">
            <summary>
            Gets a value indicating whether the asset is being loaded from a file.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata.IsStream">
            <summary>
            Gets a value indicating whether the asset is being loaded from a stream.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.UI"/> namespace contains types relating to Ultraviolet's content management subsystem.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.TextContentImporter">
            <summary>
            Represents a content importer which loads text files.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.TextContentImporter.Import(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,System.IO.Stream)">
            <summary>
            Imports the data from the specified file.
            </summary>
            <param name="metadata">The asset metadata for the asset to import.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data to import.</param>
            <returns>The data structure that was imported from the file.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.TextContentProcessor">
            <summary>
            Represents a content processor which loads text assets.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.TextContentProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.String[])">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.UltravioletContent">
            <summary>
            Represents the core implementation of the Ultraviolet content subsystem.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletContent.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.UltravioletContent"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletContent.RegisterImportersAndProcessors(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletContent.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.UltravioletContent.Manifests">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.UltravioletContent.Importers">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Content.UltravioletContent.Processors">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Content.UltravioletContent.Updating">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletContent.OnUpdating(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Content.UltravioletContent.Updating"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.UltravioletDataObject">
            <summary>
            Represents an instance of <see cref="T:TwistedLogik.Nucleus.Data.DataObject"/> which is designed for use with the Ultraviolet Framework.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletDataObject.#ctor(System.String,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Content.UltravioletDataObject"/> class.
            </summary>
            <param name="key">The object's uniquely identifying key.</param>
            <param name="globalID">The object's globally-unique identifier.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.UltravioletDataObjectRegistry`1">
            <summary>
            Represents an instance of <see cref="T:TwistedLogik.Nucleus.Data.DataObjectRegistry`1"/> which is designed for use with the Ultraviolet Framework.
            </summary>
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletDataObjectRegistry`1.OnRegistered">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletDataObjectRegistry`1.OnUnregistered">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletDataObjectRegistry`1.LoadDataElementFromFile(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletDataObjectRegistry`1.LoadDefinitionsFromXml(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletDataObjectRegistry`1.LoadDefinitionsFromJson(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.UltravioletDataObjectRegistry`1.UltravioletContext_ContextInvalidated(System.Object,System.EventArgs)">
            <summary>
            Handles Ultraviolet context invalidation.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.XmlContentImporter">
            <summary>
            Represents a content importer which loads XML documents.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.XmlContentImporter.Import(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,System.IO.Stream)">
            <summary>
            Imports the data from the specified file.
            </summary>
            <param name="metadata">The asset metadata for the asset to import.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data to import.</param>
            <returns>The data structure that was imported from the file.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.XmlContentProcessor">
            <summary>
            Represents a content processor which loads XML documents.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.XmlContentProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Xml.Linq.XDocument)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Content.XmlUtil">
            <summary>
            Contains utility methods for handling XML files.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.XmlUtil.Load(System.IO.Stream)">
            <summary>
            Loads the XML document from the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to load the XML document.</param>
            <returns>An <see cref="T:System.Xml.Linq.XDocument"/> representing the XML document that was loaded.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Content.XmlUtil.StripUtf8Preamble(System.IO.Stream)">
            <summary>
            Strips the UTF-8 preamble from the specified stream, if it exists.
            </summary>
            <param name="stream">The stream from which to strip the UTF-8 preamble.</param>
            <returns>true if the preamble was stripped; otherwise, false.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CursorFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="surface">The surface that contains the cursor image.</param>
            <param name="hx">The x-coordinate of the cursor's hotspot.</param>
            <param name="hy">The y-coordinate of the cursor's hotspot.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Cursor">
            <summary>
            Represents a mouse cursor.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Cursor.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Cursor.Create(TwistedLogik.Ultraviolet.Graphics.Surface2D)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> class.
            </summary>
            <param name="surface">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> that contains the cursor image.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Cursor.Create(TwistedLogik.Ultraviolet.Graphics.Surface2D,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> class.
            </summary>
            <param name="surface">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> that contains the cursor image.</param>
            <param name="hx">The x-coordinate of the cursor's hotspot.</param>
            <param name="hy">The y-coordinate of the cursor's hotspot.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Cursor.Width">
            <summary>
            Gets the width of the cursor in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Cursor.Height">
            <summary>
            Gets the height of the cursor in pixels.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CursorCollection">
            <summary>
            Represents a collection of named <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> objects.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CursorCollection.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.CursorCollection"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CursorCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> with the specified name.
            </summary>
            <param name="name">The name of the <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> to retrieve.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> with the specified name, or <c>null</c> if no such <see cref="T:TwistedLogik.Ultraviolet.Cursor"/> exists.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CursorCollection.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.SDL2.CursorCollectionProcessor">
            <summary>
            Represents a content processor that loads cursor collections.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.SDL2.CursorCollectionProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Xml.Linq.XDocument)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Curve">
            <summary>
            Represents a mathematical curve.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.#ctor(TwistedLogik.Ultraviolet.CurveLoopType,TwistedLogik.Ultraviolet.CurveLoopType,System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.CurveKey})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Curve"/> class.
            </summary>
            <param name="preLoop">A <see cref="T:TwistedLogik.Ultraviolet.CurveLoopType"/> value indicating how the curve's values are determined 
            for points before the beginning of the curve.</param>
            <param name="postLoop">A <see cref="T:TwistedLogik.Ultraviolet.CurveLoopType"/> value indicating how the curve's values are determined
            for points after the end of the curve.</param>
            <param name="keys">A collection of <see cref="T:TwistedLogik.Ultraviolet.CurveKey"/> objects from which to construct the curve.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.op_Implicit(TwistedLogik.Ultraviolet.Curve)~TwistedLogik.Ultraviolet.EasingFunction">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Curve"/> to an <see cref="T:TwistedLogik.Ultraviolet.EasingFunction"/>.
            </summary>
            <param name="curve">The <see cref="T:TwistedLogik.Ultraviolet.Curve"/> to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.EasingFunction"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.Evaluate(System.Single)">
            <summary>
            Calculates the value of the curve at the specified position.
            </summary>
            <param name="position">The position at which to calculate a value.</param>
            <returns>The value of the curve at the specified position.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Curve.PreLoop">
            <summary>
            Gets a value indicating how the curve's values are determined 
            for points before the beginning of the curve.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Curve.PostLoop">
            <summary>
            Gets a value indicating how the curve's values are determined
            for points after the end of the curve.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Curve.IsConstant">
            <summary>
            Gets a value indicating whether the curve's value is constant.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Curve.Keys">
            <summary>
            Gets the curve's collection of keys.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.GetCycleIndex(System.Single)">
            <summary>
            Gets the index of the cycle that contains the specified position.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.EvaluateInside(System.Single)">
            <summary>
            Evaluates a position inside of the curve.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.EvaluateOutside(TwistedLogik.Ultraviolet.CurveLoopType,TwistedLogik.Ultraviolet.CurveKey,System.Single,System.Single)">
            <summary>
            Evaluates a position outside of the curve.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.InterpolateValue(TwistedLogik.Ultraviolet.CurveKey,TwistedLogik.Ultraviolet.CurveKey,System.Single)">
            <summary>
            Calculates a value between the specified curve keys based on the specified interpolation factor.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Curve.FindKeysAtCurvePosition(System.Single,TwistedLogik.Ultraviolet.CurveKey@,TwistedLogik.Ultraviolet.CurveKey@)">
            <summary>
            Finds the pair of keys which surrounds the specified position on the curve.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CurveContinuity">
            <summary>
            Represents the supported types of continuity between a curve's keys.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.CurveContinuity.Smooth">
            <summary>
            The curve transitions smoothly from one key to the next.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.CurveContinuity.Step">
            <summary>
            The curve transitions in steps.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CurveKey">
            <summary>
            Represents a key point in a curve.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.#ctor(System.Single,System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.CurveContinuity)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Curve"/> class.
            </summary>
            <param name="position">The key's position on the curve.</param>
            <param name="value">The key's value.</param>
            <param name="tangentIn">The value of the tangent when approaching this key from the previous key.</param>
            <param name="tangentOut">The value of the tangent when approaching this key from the next key.</param>
            <param name="continuity">A value describing the continuity between this key and the next.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.op_Equality(TwistedLogik.Ultraviolet.CurveKey,TwistedLogik.Ultraviolet.CurveKey)">
            <summary>
            Compares two curve keys for equality.
            </summary>
            <param name="key1">The first <see cref="T:TwistedLogik.Ultraviolet.CurveKey"/> to compare.</param>
            <param name="key2">The second <see cref="T:TwistedLogik.Ultraviolet.CurveKey"/> to compare.</param>
            <returns><c>true</c> if the specified curve keys are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.op_Inequality(TwistedLogik.Ultraviolet.CurveKey,TwistedLogik.Ultraviolet.CurveKey)">
            <summary>
            Compares two curve keys for inequality.
            </summary>
            <param name="key1">The first <see cref="T:TwistedLogik.Ultraviolet.CurveKey"/> to compare.</param>
            <param name="key2">The second <see cref="T:TwistedLogik.Ultraviolet.CurveKey"/> to compare.</param>
            <returns><c>true</c> if the specified curve keys are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.Equals(TwistedLogik.Ultraviolet.CurveKey)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKey.CompareTo(TwistedLogik.Ultraviolet.CurveKey)">
            <summary>
            Compares this instance to the specified <see cref="T:TwistedLogik.Ultraviolet.CurveKey"/> and returns an integer that indicates whether the position
            of this instance is less than, equal to, or greater than the value of the specified key.
            </summary>
            <param name="other">The key to compare to this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
            <remarks>If the keys have the same position, this method returns zero.  If this key comes before <paramref name="other"/>,
            then this method returns -1.  Otherwise, this method returns 1.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CurveKey.Position">
            <summary>
            Gets the key's position on the curve.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CurveKey.Value">
            <summary>
            Gets the key's value.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CurveKey.TangentIn">
            <summary>
            Gets the value of the tangent when approaching this key from the previous key.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CurveKey.TangentOut">
            <summary>
            Gets the value of the tangent when approaching this key from the next key.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CurveKey.Continuity">
            <summary>
            Gets a value describing the continuity between this key and the next.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CurveKeyCollection">
            <summary>
            Represents a collection of curve keys.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveKeyCollection.#ctor(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.CurveKey})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.CurveKeyCollection"/> class from the specified collection of keys.
            </summary>
            <param name="keys">A collection of <see cref="T:TwistedLogik.Ultraviolet.CurveKey"/> objects with which to populate the collection.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CurveLoopType">
            <summary>
            Represents the ways that a curve's values can loop after passing its beginning or end.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.CurveLoopType.Constant">
            <summary>
            The curve's value is constant.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.CurveLoopType.Cycle">
            <summary>
            The curve's values cycle around to the other end of the curve.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.CurveLoopType.CycleOffset">
            <summary>
            The curve's values cycle around to the other end of the curve, and are
            offset by the difference between the first and last values.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.CurveLoopType.Linear">
            <summary>
            The curve's values are determined by linear interpolation.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.CurveLoopType.Oscillate">
            <summary>
            The curve's values oscillate from one end of the curve to the other.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.CurveProcessor">
            <summary>
            Represents a content processor which processes XNA-formatted 
            curve definition XML files into instances of the Curve class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveProcessor.ExportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryWriter,System.Xml.Linq.XDocument,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveProcessor.ImportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.CurveProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Xml.Linq.XDocument)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.CurveProcessor.SupportsPreprocessing">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.DebugColors">
            <summary>
            Contains a sequence of visually distinct colors useful for rendering debug graphics.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DebugColors.Get(System.Int32)">
            <summary>
            Gets a color from the debug sequence.
            </summary>
            <param name="ix">The index of the color to retrieve.</param>
            <returns>The specified debug color.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.DebugLevels">
            <summary>
            Represents the levels of debug information provided by the Ultraviolet Framework.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.DebugLevels.None">
            <summary>
            No debug level.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.DebugLevels.Info">
            <summary>
            Informational messages.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.DebugLevels.Warning">
            <summary>
            Non-critical warning messages.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.DebugLevels.Error">
            <summary>
            Critical error messages.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.DebugLevels.All">
            <summary>
            All debug levels.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.DummyUltravioletAudio">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.IUltravioletAudio"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletAudio.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.DummyUltravioletAudio"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletAudio.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletAudio.Suspend">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletAudio.Resume">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletAudio.AudioMasterVolume">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletAudio.SongsMasterVolume">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletAudio.SoundEffectsMasterVolume">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletAudio.AudioMuted">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletAudio.SongsMuted">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletAudio.SoundEffectsMuted">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.DummyUltravioletAudio.Updating">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.DummyUltravioletGraphics">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.IUltravioletGraphics"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.DummyUltravioletGraphics"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.Clear(TwistedLogik.Ultraviolet.Color)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.Clear(TwistedLogik.Ultraviolet.Color,System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.Clear(TwistedLogik.Ultraviolet.ClearOptions,TwistedLogik.Ultraviolet.Color,System.Double,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetRenderTarget(TwistedLogik.Ultraviolet.Graphics.RenderTarget2D)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetRenderTargetToBackBuffer">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetRenderTarget">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetViewport(TwistedLogik.Ultraviolet.Graphics.Viewport)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetViewport">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetTexture(System.Int32,TwistedLogik.Ultraviolet.Graphics.Texture2D)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetTexture(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetGeometryStream(TwistedLogik.Ultraviolet.Graphics.GeometryStream)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetGeometryStream">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetBlendState(TwistedLogik.Ultraviolet.Graphics.BlendState)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetBlendState">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetDepthStencilState(TwistedLogik.Ultraviolet.Graphics.DepthStencilState)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetDepthStencilState">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetRasterizerState(TwistedLogik.Ultraviolet.Graphics.RasterizerState)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetRasterizerState">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetSamplerState(System.Int32,TwistedLogik.Ultraviolet.Graphics.SamplerState)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetSamplerState(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetScissorRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.SetScissorRectangle(System.Nullable{TwistedLogik.Ultraviolet.Rectangle})">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.GetScissorRectangle">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.DrawPrimitives(TwistedLogik.Ultraviolet.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.DrawIndexedPrimitives(TwistedLogik.Ultraviolet.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.DrawInstancedPrimitives(TwistedLogik.Ultraviolet.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.FrameRate">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.Capabilities">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.DummyUltravioletGraphics.Updating">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.DummyUltravioletInput">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.IUltravioletInput"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.DummyUltravioletInput"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.ShowSoftwareKeyboard">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.ShowSoftwareKeyboard(TwistedLogik.Ultraviolet.Input.KeyboardMode)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.HideSoftwareKeyboard">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.IsKeyboardSupported">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.GetKeyboard">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.IsMouseSupported">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.GetMouse">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.GetGamePadCount">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.IsGamePadSupported">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.IsGamePadConnected(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.GetGamePadForPlayer(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.GetFirstConnectedGamePad">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.IsTouchSupported">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.IsTouchDeviceConnected(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.GetTouchDevice">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletInput.GetTouchDeviceByIndex(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletInput.EmulateMouseWithTouchInput">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.DummyUltravioletInput.Updating">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.DummyUltravioletInput.GamePadConnected">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.DummyUltravioletInput.GamePadDisconnected">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.DummyUltravioletPlatform">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.IUltravioletPlatform"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletPlatform.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.DummyUltravioletPlatform"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.DummyUltravioletPlatform.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletPlatform.Cursor">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletPlatform.Clipboard">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletPlatform.Windows">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.DummyUltravioletPlatform.Displays">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.DummyUltravioletPlatform.Updating">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.EasingFunction">
            <summary>
            Represents an easing function.
            </summary>
            <param name="t">A value from 0.0 to 1.0 indicating the current position within the easing function.</param>
            <returns>A value from 0.0 to 1.0 indicating the interpolation factor at the specified point in the easing function.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Easings">
            <summary>
            Contains standard easing functions.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInLinear">
            <summary>
            A linear easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutLinear">
            <summary>
            A linear easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInCubic">
            <summary>
            A cubic easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutCubic">
            <summary>
            A cubic easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutCubic">
            <summary>
            A cubic easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInQuadratic">
            <summary>
            A quadratic easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutQuadratic">
            <summary>
            A quadratic easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutQuadratic">
            <summary>
            A quadratic easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInQuartic">
            <summary>
            A quartic easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutQuartic">
            <summary>
            A quartic easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutQuartic">
            <summary>
            A quartic easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInQuintic">
            <summary>
            A quintic easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutQuintic">
            <summary>
            A quintic easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutQuintic">
            <summary>
            A quintic easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInSin">
            <summary>
            A sinusoidal easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutSin">
            <summary>
            A sinusoidal easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutSin">
            <summary>
            A sinusoidal easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInExponential">
            <summary>
            An exponential easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutExponential">
            <summary>
            An exponential easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutExponential">
            <summary>
            An exponential easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInCircular">
            <summary>
            A circular easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutCircular">
            <summary>
            A circular easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutCircular">
            <summary>
            A circular easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInBack">
            <summary>
            A backtracking easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutBack">
            <summary>
            A backtracking easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutBack">
            <summary>
            A backtracking easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInElastic">
            <summary>
            An elastic easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutElastic">
            <summary>
            An elastic easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutElastic">
            <summary>
            An elastic easing in/out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInBounce">
            <summary>
            A bouncing easing in function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseOutBounce">
            <summary>
            A bouncing easing out function.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Easings.EaseInOutBounce">
            <summary>
            A bouncing easing in/out function.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BasicEffectFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BasicEffect"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.BasicEffect"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BasicEffect">
            <summary>
            Represents a basic rendering effect.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BasicEffect.#ctor(TwistedLogik.Ultraviolet.Graphics.EffectImplementation)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BasicEffect"/> class.
            </summary>
            <param name="impl">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation"/> that implements this effect.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BasicEffect.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BasicEffect"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.BasicEffect"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.World">
            <summary>
            Gets or sets the effect's world matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.View">
            <summary>
            Gets or sets the effect's view matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.Projection">
            <summary>
            Gets or sets the effect's projection matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.VertexColorEnabled">
            <summary>
            Gets or sets a value indicating whether vertex colors are enabled for this effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.DiffuseColor">
            <summary>
            Gets or sets the material's diffuse color.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.TextureEnabled">
            <summary>
            Gets or sets a value indicating whether textures are enabled for this effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.Texture">
            <summary>
            Gets or sets the texture that is applied to geometry rendered by this effect.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BasicEffect.OnVertexColorEnabledChanged">
            <summary>
            Occurs when the value of the <see cref="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.VertexColorEnabled"/> property changes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BasicEffect.OnTextureEnabledChanged">
            <summary>
            Occurs when the value of the <see cref="P:TwistedLogik.Ultraviolet.Graphics.BasicEffect.TextureEnabled"/> property changes.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Blend">
            <summary>
            Represents the available color blending factors.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.Zero">
            <summary>
            The components of the blended color are multiplied by zero.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.One">
            <summary>
            The components of the blended color are multiplied by one.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.SourceColor">
            <summary>
            The components of the blended color are multiplied by the source color.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.InverseSourceColor">
            <summary>
            The components of the blended color are multiplied by the inverse of the source color.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.SourceAlpha">
            <summary>
            The components of the blended color are multiplied by the source alpha.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.InverseSourceAlpha">
            <summary>
            The components of the blended color are multiplied by the inverse of the source alpha.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.DestinationAlpha">
            <summary>
            The components of the blended color are multiplied by the destination alpha.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.InverseDestinationAlpha">
            <summary>
            The components of the blended color are multiplied by the inverse of the destination alpha.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.DestinationColor">
            <summary>
            The components of the blended color are multiplied by the destination color.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.InverseDestinationColor">
            <summary>
            The components of the blended color are multiplied by the inverse of the destination color.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.SourceAlphaSaturation">
            <summary>
            The components of the blended color are multiplied by the larger of 
            the alpha of the source color or the inverse of the alpha of the source color.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.BlendFactor">
            <summary>
            The components of the blended color are multiplied by a constant value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Blend.InverseBlendFactor">
            <summary>
            The components of the blended color are multiplied by the inverse of a constant value.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BlendFunction">
            <summary>
            Represents the arithmetic functions that may be used when blending alpha values.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.BlendFunction.Add">
            <summary>
            The source value is added to the destination value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.BlendFunction.Max">
            <summary>
            The maximum of the source and destination values.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.BlendFunction.Min">
            <summary>
            The minimum of the source and destination values is used.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.BlendFunction.ReverseSubtract">
            <summary>
            The source value is subtracted from the destination value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.BlendFunction.Subtract">
            <summary>
            The destination value is subtracted from the source value.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BlendStateFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BlendState">
            <summary>
            Represents a graphics device's blend state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlendState.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlendState.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlendState.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.Opaque">
            <summary>
            Retrieves a built-in state object with settings for opaque blending.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.AlphaBlend">
            <summary>
            Retrieves a built-in state object with settings for alpha blending.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.Additive">
            <summary>
            Retrieves a built-in state object with settings for additive blending.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.NonPremultiplied">
            <summary>
            Retrieves a built-in state object with settings for non-premultiplied blending.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.AlphaBlendFunction">
            <summary>
            Gets or sets the alpha blending function.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.AlphaSourceBlend">
            <summary>
            Gets or sets the source factor for alpha blending.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.AlphaDestinationBlend">
            <summary>
            Gets or sets the destination factor for alpha blending.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.ColorBlendFunction">
            <summary>
            Gets or sets the color blending function.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.ColorSourceBlend">
            <summary>
            Gets or sets the source factor for color blending.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.ColorDestinationBlend">
            <summary>
            Gets or sets the destination factor for color blending.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.BlendFactor">
            <summary>
            Gets or sets the blend factor used for alpha blending.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlendState.ColorWriteChannels">
            <summary>
            Gets a value specifying which color channels are written when this blend state is in effect.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlendState.MakeImmutable">
            <summary>
            Makes the state object immutable.  Further attempts to modify
            the object will throw an exception.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlendState.InvalidateCache">
            <summary>
            Invalidates the cached state objects.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BlurDirection">
            <summary>
            Represents the direction of the blur applied by <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlurEffect"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.BlurDirection.Horizontal">
            <summary>
            The blur is applied horizontally.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.BlurDirection.Vertical">
            <summary>
            The blur is applied vertically.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BlurEffectFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlurEffect"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlurEffect"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.BlurEffect">
            <summary>
            Represents an <see cref="T:TwistedLogik.Ultraviolet.Graphics.Effect"/> which draws 2D drop shadows using a two-pass Gaussian blur.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlurEffect.#ctor(TwistedLogik.Ultraviolet.Graphics.EffectImplementation)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlurEffect"/> class.
            </summary>
            <param name="impl">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation"/> that implements this effect.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlurEffect.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlurEffect"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlurEffect"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.World">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.View">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.Projection">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.TextureSize">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.Mix">
            <summary>
            Gets or sets the blur mixing value. A value of 0f specifies that the output of the blur should consist entirely
            of the texture color; a value of 1f specifies that the output of the blur should consist entirely of the vertex color.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.Radius">
            <summary>
            Gets or sets the blur radius of the drop shadow.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.Direction">
            <summary>
            Gets or sets the direction in which the blur is applied.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlurEffect.OnTextureSizeChanged">
            <summary>
            Occurs when the value of the <see cref="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.TextureSize"/> property changes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlurEffect.OnRadiusChanged">
            <summary>
            Occurs when the value of the <see cref="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.Radius"/> property changes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.BlurEffect.OnDirectionChanged">
            <summary>
            Occurs when the value of the <see cref="P:TwistedLogik.Ultraviolet.Graphics.BlurEffect.Direction"/> property changes.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.ColorWriteChannels">
            <summary>
            Represents the color channels which are used during rendering. Color writes can be enabled or
            disabled per-channel using the appropriate <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.ColorWriteChannels.None">
            <summary>
            No color channels.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.ColorWriteChannels.Red">
            <summary>
            The red color channel.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.ColorWriteChannels.Green">
            <summary>
            The green color channel.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.ColorWriteChannels.Blue">
            <summary>
            The blue color channel.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.ColorWriteChannels.Alpha">
            <summary>
            The alpha channel.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.ColorWriteChannels.All">
            <summary>
            All color channels, plus alpha.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.CompareFunction">
            <summary>
            Represents the comparison functions used by alpha, stencil, and depth buffer tests.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.Always">
            <summary>
            Always pass the test.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.Never">
            <summary>
            Never pass the test.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.Equal">
            <summary>
            Pass the test if the new value is equal to the current value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.NotEqual">
            <summary>
            Pass the test if the new value is not equal to the current value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.Greater">
            <summary>
            Pass the test if the new value is greater than the current value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.GreaterEqual">
            <summary>
            Pass the test if the new value is greater than or equal to the current value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.Less">
            <summary>
            Pass the test if the new value is less than the current value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompareFunction.LessEqual">
            <summary>
            Pass the test if the new value is less than or equal to the current value.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.CompositionContext">
            <summary>
            Represents the various composition contexts exposed by Ultraviolet which can be used by
            an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Compositor"/> class to break a frame down into individual components.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompositionContext.Scene">
            <summary>
            The context containing the basic 2D/3D scene.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompositionContext.Interface">
            <summary>
            The context containing the user interface elements.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CompositionContext.Overlay">
            <summary>
            The context containing graphics which are drawn on top of the interface.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Compositor">
            <summary>
            Represents a window compositor, which is responsible for assembling the various components of a
            rendered scene into a final image for presentation to the user.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Compositor"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="window">The window with which this compositor is associated.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.GetRenderTarget">
            <summary>
            Gets the current target to which the application should render.
            </summary>
            <returns>The target to which the application should render, or <see langword="null"/> if
            the application should render directly to the back buffer.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.PointToWindow(TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Converts a point in compositor space to an equivalent point in window space.
            </summary>
            <param name="pt">The point in screen space to convert.</param>
            <returns>The converted point in window space.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.PointToWindow(System.Int32,System.Int32)">
            <summary>
            Converts a point in compositor space to an equivalent point in window space.
            </summary>
            <param name="x">The x-coordinate of the point in screen space to convert.</param>
            <param name="y">The y-coordinate of the point in screen space to convert.</param>
            <returns>The converted point in window space.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.WindowToPoint(TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Converts a point in window space to an equivalent point in compositor space.
            </summary>
            <param name="pt">The point in window space to convert.</param>
            <returns>The converted point in compositor space.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.WindowToPoint(System.Int32,System.Int32)">
            <summary>
            Converts a point in window space to an equivalent point in compositor space.
            </summary>
            <param name="x">The x-coordinate of the point in window space to convert.</param>
            <param name="y">The y-coordinate of the point in window space to convert.</param>
            <returns>The converted point in compositor space.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.BeginFrame">
            <summary>
            Prepares the compositor to begin rendering a frame.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.BeginContext(TwistedLogik.Ultraviolet.Graphics.CompositionContext,System.Boolean)">
            <summary>
            Prepares the compositor for the specified composition context.
            </summary>
            <param name="context">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.CompositionContext"/> to which the compositor should transition.</param>
            <param name="force">A value indicating whether to force the compositor to prepare the device for
            the specified context, even if the compositor thinks the device is already prepared for the context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.Compose">
            <summary>
            Composes the scene prior to presenting it to the graphics device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Compositor.Present">
            <summary>
            Presents the composited scene to the graphics device.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Compositor.Window">
            <summary>
            Gets the window with which this compositor is associated.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Compositor.CurrentContext">
            <summary>
            Gets the current composition context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Compositor.Size">
            <summary>
            Gets the current size of the composition buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Compositor.Width">
            <summary>
            Gets the current width of the composition buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Compositor.Height">
            <summary>
            Gets the current height of the composition buffer.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.CullMode">
            <summary>
            Represents the cull mode, which instructs the graphics device as to which 
            winding orders may be used for back face culling.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CullMode.None">
            <summary>
            Do not cull back faces.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CullMode.CullClockwiseFace">
            <summary>
            Cull back faces with clockwise vertices.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.CullMode.CullCounterClockwiseFace">
            <summary>
            Cull back faces with counter-clockwise vertices.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor">
            <summary>
            Represents Ultraviolet's default compositor, which renders
            directly to the back buffer.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="window">The window with which this compositor is associated.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor.Create(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor"/> class.
            </summary>
            <param name="window">The window with which the created compositor is associated.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor.GetRenderTarget">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor.BeginFrame">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DefaultCompositor.Size">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilStateFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState">
            <summary>
            Represents a graphics device's depth/stencil state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.Default">
            <summary>
            Retrieves a built-in state object with settings for using a default depth/stencil test.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.DepthRead">
            <summary>
            Retrieves a built-in state object with settings for using a read-only depth/stencil test.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.None">
            <summary>
            Retrieves a built-in state object with settings for not using a depth/stencil test.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.DepthBufferEnable">
            <summary>
            Gets or sets a value indicating whether depth buffering is enabled.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.DepthBufferWriteEnable">
            <summary>
            Gets or sets a value indicating whether writing to the depth buffer is enabled.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.DepthBufferFunction">
            <summary>
            Gets or sets the comparison function used by the depth buffer test.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.StencilEnable">
            <summary>
            Gets or sets a value indicating whether stencil buffering is enabled.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.StencilFunction">
            <summary>
            Gets or sets the comparison function used by the stencil buffer test.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.StencilPass">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.StencilFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test fails.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.StencilDepthBufferFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes and the depth buffer test fails.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.CounterClockwiseStencilFunction">
            <summary>
            Gets or sets the comparison function used by the stencil buffer test when
            testing counter-clockwise triangles.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.CounterClockwiseStencilPass">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes
            when testing counter-clockwise triangles.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.CounterClockwiseStencilFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test fails
            when testing counter-clockwise triangles.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.CounterClockwiseStencilDepthBufferFail">
            <summary>
            Gets or sets the stencil operation to perform if the stencil test passes and the depth buffer test fails
            when testing counter-clockwise triangles.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.StencilMask">
            <summary>
            Gets or sets the mask applied to determine the significant bits of values read from the stencil buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.StencilWriteMask">
            <summary>
            Gets or sets the mask applied to determine the significant bits of values written to the stencil buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.ReferenceStencil">
            <summary>
            Gets or sets the reference value used by the stencil test.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.TwoSidedStencilMode">
            <summary>
            Gets or sets a value indicating whether two-sided stenciling is enabled.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.MakeImmutable">
            <summary>
            Makes the state object immutable.  Further attempts to modify
            the object will throw an exception.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DepthStencilState.InvalidateCache">
            <summary>
            Invalidates the cached state objects.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities"/>.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities.SupportsDepthStencilTextures">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities.SupportsInstancedRendering">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities.SupportsNonZeroBaseInstance">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities.SupportsPreservingRenderTargetContentInHardware">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities.MaximumTextureSize">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities.MaximumViewportHeight">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DummyGraphicsCapabilities.MaximumViewportWidth">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBufferFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="itype">The index element type.</param>
            <param name="icount">The index element count.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer">
            <summary>
            Represents a index buffer that is optimized for dynamic updates.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.IndexBufferElementType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="itype">The index element type.</param>
            <param name="icount">The index element count.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer.Create(TwistedLogik.Ultraviolet.Graphics.IndexBufferElementType,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer"/> class.
            </summary>
            <param name="itype">The index element type.</param>
            <param name="icount">The index element count.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer.IsContentLost">
            <summary>
            Gets a value indicating whether the buffer's content has been lost.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer.ContentLost">
            <summary>
            Occurs when the buffer's content is lost.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer.OnContentLost(System.EventArgs)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Graphics.DynamicIndexBuffer.ContentLost"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBufferFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="vdecl">The vertex declaration for the buffer.</param>
            <param name="vcount">The number of vertices in the buffer.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer">
            <summary>
            Represents a vertex buffer that is optimized for dynamic updates.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.VertexDeclaration,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="vdecl">The vertex declaration for the buffer.</param>
            <param name="vcount">The number of vertices in the buffer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer.Create(TwistedLogik.Ultraviolet.Graphics.VertexDeclaration,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer"/> class.
            </summary>
            <param name="vdecl">The vertex declaration for the buffer.</param>
            <param name="vcount">The number of vertices in the buffer.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer.Create``1(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer"/> class.
            </summary>
            <typeparam name="T">The buffer's vertex type.</typeparam>
            <param name="vcount">The number of vertices in the buffer.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer.IsContentLost">
            <summary>
            Gets a value indicating whether the buffer's content has been lost.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer.ContentLost">
            <summary>
            Occurs when the buffer's content is lost.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer.OnContentLost(System.EventArgs)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Graphics.DynamicVertexBuffer.ContentLost"/> event.
            </summary>
            <param name="e">An <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Effect">
            <summary>
            Represents a shader effect.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Effect.#ctor(TwistedLogik.Ultraviolet.Graphics.EffectImplementation)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Effect"/> class.
            </summary>
            <param name="impl">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation"/> that implements this effect.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Effect.Create(TwistedLogik.Ultraviolet.Graphics.EffectImplementation)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Effect"/> class.
            </summary>
            <param name="impl">The effect implementation that the effect encapsulates.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Effect"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Effect.Parameters">
            <summary>
            Gets the effect's collection of parameters.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Effect.Techniques">
            <summary>
            Gets the effect's collection of techniques.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Effect.CurrentTechnique">
            <summary>
            Gets or sets the effect's current technique.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Effect.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementationFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation">
            <summary>
            Represents a shader effect's underlying implementation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectImplementation.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.EffectImplementation.Parameters">
            <summary>
            Gets the effect's collection of parameters.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.EffectImplementation.Techniques">
            <summary>
            Gets the effect's collection of techniques.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.EffectImplementation.CurrentTechnique">
            <summary>
            Gets or sets the effect's current technique.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectParameter">
            <summary>
            Represents an effect parameter.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectParameter"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueBoolean">
            <summary>
            Gets the parameter's value as a <see cref="T:System.Boolean"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.Boolean)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueInt32">
            <summary>
            Gets the parameter's value as an <see cref="T:System.Int32"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.Int32)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueInt32Array">
            <summary>
            Gets the parameter's value as an array of <see cref="T:System.Int32"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.Int32[])">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueUInt32">
            <summary>
            Gets the parameter's value as a <see cref="T:System.UInt32"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.UInt32)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueUInt32Array">
            <summary>
            Gets the parameter's value as an array of <see cref="T:System.UInt32"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.UInt32[])">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueSingle">
            <summary>
            Gets the parameter's value as a <see cref="T:System.Single"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.Single)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueSingleArray">
            <summary>
            Gets the parameter's value as an array of <see cref="T:System.Single"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.Single[])">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueDouble">
            <summary>
            Gets the parameter's value as a <see cref="T:System.Double"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.Double)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueDoubleArray">
            <summary>
            Gets the parameter's value as an array of <see cref="T:System.Double"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(System.Double[])">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueVector2">
            <summary>
            Gets the parameter's value as a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueVector2Array">
            <summary>
            Gets the parameter's value as an array of <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Vector2[])">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueVector3">
            <summary>
            Gets the parameter's value as a <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueVector3Array">
            <summary>
            Gets the parameter's value as an array of <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Vector3[])">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueVector4">
            <summary>
            Gets the parameter's value as a <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueVector4Array">
            <summary>
            Gets the parameter's value as an array of <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Vector4[])">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueColor">
            <summary>
            Gets the parameter's value as a <see cref="T:TwistedLogik.Ultraviolet.Color"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Color)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueMatrix">
            <summary>
            Gets the parameter's value as a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.GetValueTexture2D">
            <summary>
            Gets the parameter's value as a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/>.
            </summary>
            <returns>The parameter's value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameter.SetValue(TwistedLogik.Ultraviolet.Graphics.Texture2D)">
            <summary>
            Sets the parameter's value.
            </summary>
            <param name="value">The value to set.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.EffectParameter.Name">
            <summary>
            Gets the effect parameter's name.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection">
            <summary>
            Represents a collection of <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectParameter"/> instances.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.#ctor(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.EffectParameter})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection"/> class.
            </summary>
            <param name="parameters">The set of parameters to add to the collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Graphics#EffectParameter}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.GetName(TwistedLogik.Ultraviolet.Graphics.EffectParameter)">
            <summary>
            Gets the specified item's name.
            </summary>
            <param name="item">The item for which to retrieve a name.</param>
            <returns>The specified item's name.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.ClearInternal">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.AddInternal(TwistedLogik.Ultraviolet.Graphics.EffectParameter)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.RemoveInternal(TwistedLogik.Ultraviolet.Graphics.EffectParameter)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><c>true</c> if the item was removed from the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectParameterCollection.ContainsInternal(TwistedLogik.Ultraviolet.Graphics.EffectParameter)">
            <summary>
            Gets a value indicating whether the collection contains the specified item.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns><c>true</c> if the collection contains the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectPass">
            <summary>
            Represents one render pass in an effect technique.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectPass.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectPass"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectPass.Apply">
            <summary>
            Applies the effect pass state to the device.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.EffectPass.Name">
            <summary>
            Gets the effect pass's name.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectPassCollection">
            <summary>
            Represents an effect technique's collection of passes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectPassCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectPassCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectPassCollection.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Graphics#EffectPass}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectPassCollection.GetName(TwistedLogik.Ultraviolet.Graphics.EffectPass)">
            <summary>
            Gets the specified item's name.
            </summary>
            <param name="item">The item for which to retrieve a name.</param>
            <returns>The specified item's name.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectTechnique">
            <summary>
            Represents one of an effect's techniques, which contains all of the state necessary
            to render a particular material.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectTechnique.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectTechnique"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.EffectTechnique.Name">
            <summary>
            Gets the effect technique's name.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.EffectTechnique.Passes">
            <summary>
            Gets the effect technique's collection of passes.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.EffectTechniqueCollection">
            <summary>
            Represents an effect's collection of techniques.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectTechniqueCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectTechniqueCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectTechniqueCollection.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Graphics#EffectTechnique}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.EffectTechniqueCollection.GetName(TwistedLogik.Ultraviolet.Graphics.EffectTechnique)">
            <summary>
            Gets the specified item's name.
            </summary>
            <param name="item">The item for which to retrieve a name.</param>
            <returns>The specified item's name.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.FillMode">
            <summary>
            Represents the fill mode, which instructs the device how to fill primitive geometry.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.FillMode.Solid">
            <summary>
            Draw solid faces for each primitive.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.FillMode.Wireframe">
            <summary>
            Draw primitive wireframes.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.GeometryStreamFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.GeometryStream"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.GeometryStream"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.GeometryStream">
            <summary>
            Represents a buffer containing references to vertex and index data and which
            can stream geometry to the graphics device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.GeometryStream.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.GeometryStream"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.GeometryStream.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.GeometryStream"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.GeometryStream"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.GeometryStream.Attach(TwistedLogik.Ultraviolet.Graphics.VertexBuffer)">
            <summary>
            Attaches a vertex buffer to the geometry stream.
            </summary>
            <param name="vbuffer">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> to attach to the geometry stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.GeometryStream.Attach(TwistedLogik.Ultraviolet.Graphics.VertexBuffer,System.Int32)">
            <summary>
            Attaches a vertex buffer to the geometry stream with the specified instance frequency.
            </summary>
            <param name="vbuffer">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> to attach to the geometry stream.</param>
            <param name="instanceFrequency">The number of instances which are drawn with each set of
            vertex data in the buffer, or 0 to disable instancing.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.GeometryStream.Attach(TwistedLogik.Ultraviolet.Graphics.IndexBuffer)">
            <summary>
            Attaches an index buffer to the geometry stream.
            </summary>
            <param name="ibuffer">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.IndexBuffer"/> to attach to the geometry buffer.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GeometryStream.IsValid">
            <summary>
            Gets a value indicating whether the geometry stream is in a valid state for rendering.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GeometryStream.HasMultipleSources">
            <summary>
            Gets a value indicating whether the geometry stream reads data from multiple vertex buffers.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GeometryStream.HasVertices">
            <summary>
            Gets a value indicating whether the geometry stream has any vertex buffers attached to it.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GeometryStream.HasIndices">
            <summary>
            Gets a value indicating whether the geometry stream has any index buffers attached to it.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GeometryStream.IndexBufferElementType">
            <summary>
            Gets the type of the elements in the stream's index buffer, if it has an index buffer.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion">
            <summary>
            Represents a run of characters which is included in a font face.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion.#ctor(System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion"/> structure.
            </summary>
            <param name="start">The first character in the region.</param>
            <param name="end">The last character in the region.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion.CreateFromSourceText(System.String)">
            <summary>
            Creates a collection of character regions which represent all of the characters
            in the specified source text.
            </summary>
            <param name="text">The source text from which to create character regions.</param>
            <returns>The collection of character regions that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion.Contains(System.Char)">
            <summary>
            Gets a value indicating whether the region contains the specified character.
            </summary>
            <param name="c">The character to evaluate.</param>
            <returns><c>true</c> if the region contains the specified character; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion.Default">
            <summary>
            Gets the default character region for English text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion.Start">
            <summary>
            Gets the first character in the region.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion.End">
            <summary>
            Gets the last character in the region.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion.Count">
            <summary>
            Gets the number of characters in the region.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.ContentManagerExtensions">
            <summary>
            Contains extension methods for the <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.ContentManagerExtensions.Load(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID,System.Boolean)">
            <summary>
            Loads the specified sprite animation.
            </summary>
            <remarks>Content managers maintain a cache of references to all loaded assets, so calling <see cref="M:TwistedLogik.Ultraviolet.Content.ContentManager.Load``1(System.String,System.Boolean)"/> multiple
            times on a content manager with the same parameter will return the same object rather than reloading the source file.</remarks>
            <param name="contentManager">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with which to load the animation's associated sprite asset.</param>
            <param name="id">The identifier that represents the sprite animation to load.</param>
            <param name="cache">A value indicating whether to add the sprite asset to the manager's cache.</param>
            <returns>The sprite animation that was loaded.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData">
            <summary>
            Represents the data which is used to draw an individual glyph.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Glyph">
            <summary>
            Gets or sets the glyph which is being drawn.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Pass">
            <summary>
            Gets the number of times that this glyph has been passed through the shader.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.X">
            <summary>
            Gets or sets the x-coordinate at which the glyph is being drawn.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Y">
            <summary>
            Gets or sets the y-coordinate at which the glyph is being drawn.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.ScaleX">
            <summary>
            Gets or sets the glyph's scaling factor along the x-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.ScaleY">
            <summary>
            Gets or sets the glyph's scaling factor along the y-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Color">
            <summary>
            Gets or sets the color with which the glyph is rendered.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Dirty">
            <summary>
            Gets a value indicating whether any of the data's properties have been changed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.DirtyGlyph">
            <summary>
            Gets a value indicating whether the data's <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Glyph"/> property has been changed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.DirtyPosition">
            <summary>
            Gets a value indicating whether the data's <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.X"/> or <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Y"/> properties have been changed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.DirtyScale">
            <summary>
            Gets a value indicating whether the data's <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.ScaleX"/> or <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.ScaleY"/> properties have been changed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.DirtyColor">
            <summary>
            Gets a value indicating whether the data's <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.Color"/> property has been changed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData.ClearDirtyFlags">
            <summary>
            Clears the flags which specify whether any of the glyph data's properties are dirty.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader">
            <summary>
            Represents a shader effect which can be applied to glyphs during text rendering.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader.Execute(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData@,System.Int32)">
            <summary>
            Executes the glyph shader
            </summary>
            <param name="context">The current glyph shader context.</param>
            <param name="data">The data for the glyph being drawn.</param>
            <param name="index">The index of the glyph within its source string.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext">
            <summary>
            Represents the context in which a glyph shader executes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> structure.
            </summary>
            <param name="glyphShader">The glyph shader that executes within this context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> structure.
            </summary>
            <param name="glyphShader">The glyph shader that executes within this context.</param>
            <param name="sourceOffset">The offset of the text being rendered within the overall source text.</param>
            <param name="sourceLength">The overall length of the source text.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.op_Implicit(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader)~TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> instance to a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> structure.
            </summary>
            <param name="glyphShader">The glyph shader to convert.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> instance that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.op_Implicit(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader})~TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext">
            <summary>
            Implicitly converts a stack of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> instances to a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> structure.
            </summary>
            <param name="glyphShaderStack">The glyph shader stack to convert.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> instance that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.op_Implicit(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped{TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader}})~TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext">
            <summary>
            Implicitly converts a scoped stack of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> instances to a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> structure.
            </summary>
            <param name="glyphShaderScopedStack">The glyph shader stack to convert.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext"/> instance that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.Execute(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData@,System.Int32)">
            <summary>
            Executes the glyph shader.
            </summary>
            <param name="data">The data for the glyph which is being drawn.</param>
            <param name="index">The index of the glyph within its source string.</param>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.Invalid">
            <summary>
            Represents an invalid shader context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.SourceOffset">
            <summary>
            Gets the offset of the text being rendered within the overall source text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.SourceLength">
            <summary>
            Gets the overall length of the source text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext.IsValid">
            <summary>
            Gets a value indicating whether this is a valid glyph shader context.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy">
            <summary>
            Represents a proxy for a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> instance or a stack of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> instances.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> structure.
            </summary>
            <param name="glyphShader">The glyph shader which is represented by this proxy.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.#ctor(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> structure.
            </summary>
            <param name="glyphShaderStack">The glyph shader stack which is represented by this proxy.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.#ctor(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped{TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader}})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> structure.
            </summary>
            <param name="glyphShaderScopedStack">The glyph shader stack which is represented by this proxy.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.op_Implicit(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader)~TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy">
            <summary>
            Implicitly converts a glyph shader to a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> structure.
            </summary>
            <param name="glyphShader">The glyph shader to convert.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> instance that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.op_Implicit(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader})~TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy">
            <summary>
            Implicitly converts a stack of glyph shaders to a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> structure.
            </summary>
            <param name="glyphShaderStack">The glyph shader stack to convert.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> instance that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.op_Implicit(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped{TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader}})~TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy">
            <summary>
            Implicitly converts a scoped stack of glyph shaders to a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> structure.
            </summary>
            <param name="glyphShaderScopedStack">The scoped glyph shader stack to convert.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy"/> instance that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.Execute(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphData@,System.Int32)">
            <summary>
            Executes the glyph shader.
            </summary>
            <param name="context">The glyph shader contxt in which to execute the shader.</param>
            <param name="data">The data for the glyph which is being drawn.</param>
            <param name="index">The index of the glyph within its source string.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.ForEach(System.Object,System.Action{System.Object,TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader})">
            <summary>
            Performs an action on each distinct instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> which is represented by this proxy.
            </summary>
            <param name="state">A state value which is passed to <paramref name="action"/>.</param>
            <param name="action">A delegate to invoke for each <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> instance in the proxy.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.IsValid">
            <summary>
            Gets a value indicating whether this is a valid glyph shader proxy.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderProxy.Invalid">
            <summary>
            Represents an invalid shader proxy.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryReaderExtensions">
            <summary>
            Contains extension methods for the <see cref="T:System.IO.BinaryReader"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryReaderExtensions.ReadSpriteAnimationID(System.IO.BinaryReader)">
            <summary>
            Reads a sprite animation identifier from the stream using the content manifest registry
            belonging to the current Ultraviolet context.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> which to read the sprite animation identifier.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID"/> that was read from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryReaderExtensions.ReadNullableSpriteAnimationID(System.IO.BinaryReader)">
            <summary>
            Reads a nullable asset identifier from the stream using the content manifest registry
            belonging to the current Ultraviolet context.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the sprite animation identifier.</param>
            <returns>The <see cref="T:System.Nullable`1"/> identifier that was read from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryReaderExtensions.ReadSpriteAnimationID(System.IO.BinaryReader,TwistedLogik.Ultraviolet.Content.ContentManifestRegistry)">
            <summary>
            Reads a sprite animation identifier from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the sprite animation identifier.</param>
            <param name="manifests">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry"/> that contains the application's loaded manifests.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID"/> that was read from the stream.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryReaderExtensions.ReadNullableSpriteAnimationID(System.IO.BinaryReader,TwistedLogik.Ultraviolet.Content.ContentManifestRegistry)">
            <summary>
            Reads a nullable asset identifier from the stream.
            </summary>
            <param name="reader">The <see cref="T:System.IO.BinaryReader"/> from which to read the sprite animation identifier.</param>
            <param name="manifests">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManifestRegistry"/> that contains the application's loaded manifests.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID"/> that was read from the stream.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryWriterExtensions">
            <summary>
            Contains extensoin methods for the <see cref="T:System.IO.BinaryWriter"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryWriterExtensions.Write(System.IO.BinaryWriter,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID)">
            <summary>
            Writes a sprite animation identifier to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryWriter"/> with which to write the sprite animation identifier.</param>
            <param name="id">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID"/> to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Graphics2DBinaryWriterExtensions.Write(System.IO.BinaryWriter,System.Nullable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID})">
            <summary>
            Writes a sprite animation identifier to the stream.
            </summary>
            <param name="writer">The <see cref="T:System.IO.BinaryReader"/> with which to write the sprite animation identifier.</param>
            <param name="id">The <see cref="T:System.Nullable`1"/> to write to the stream.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.ISpriteBatchEffect">
            <summary>
            Represents an <see cref="T:TwistedLogik.Ultraviolet.Graphics.Effect"/> used to render sprites.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.ISpriteBatchEffect.MatrixTransform">
            <summary>
            Gets or sets the effect's transformation matrix.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.Graphics.Graphics2D"/> namespace contains types used for rendering 2D graphics.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite">
            <summary>
            Represents an animated two-dimensional image.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite.#ctor(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite"/> class.
            </summary>
            <param name="animations">A collection containing the sprite's animations, or <c>null</c> if the sprite has no animations.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the sprite's default animation controllers.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite.Item(System.Int32)">
            <summary>
            Retrieves the animation with the specified index.
            </summary>
            <param name="i">The index of the animation to retrieve.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> with the specified index.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite.Item(System.String)">
            <summary>
            Retrieves the animation with the specified name.
            </summary>
            <param name="name">The name of the animation to retrieve.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> with the specified name, or <c>null</c> if no such animation exists.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite.AnimationCount">
            <summary>
            Gets the number of animations in the sprite.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite.RefreshNameCache">
            <summary>
            Refreshes the sprite's animation name cache.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation">
            <summary>
            Represents a sequence of sprite frames.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation.#ctor(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationRepeat)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> class.
            </summary>
            <param name="name">The animation's name.</param>
            <param name="repeat">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationRepeat"/> value indicating how the animation should act
            when it reaches the end of its list of frames.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation.Name">
            <summary>
            Gets or sets the animation's name.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation.Repeat">
            <summary>
            Gets or sets a value indicating how the animation acts when it reaches the end of its list of frames.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation.Frames">
            <summary>
            Gets the animation's sequence of frames.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation.Controller">
            <summary>
            Gets the default animation controller for this animation.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController">
            <summary>
            Represents an object which encapsulates the playback state of a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the controller.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.FireAndForget(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation,System.Nullable{System.Double})">
            <summary>
            Plays a fire-and-forget animation.  The animation will play once (regardless of its repeat mode),
            then the controller will return to the currently playing animation.
            </summary>
            <param name="animation">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> to play.</param>
            <param name="playbackTime">The desired playback time in milliseconds, or <c>null</c> to use the standard playback time.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.FireAndForget(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation,System.Nullable{System.Double})">
            <summary>
            Plays a fire-and-forget animation.  The animation will play once (regardless of its repeat mode),
            then the controller will return to the specified default animation.
            </summary>
            <param name="animation">The animation to play.</param>
            <param name="defaultAnimation">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> to play once the fire-and-forget animation has completed.</param>
            <param name="playbackTime">The desired playback time in milliseconds, or <c>null</c> to use the standard playback time.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.PlayAnimation(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation)">
            <summary>
            Plays the specified animation.
            </summary>
            <param name="animation">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> to play.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.StopAnimation">
            <summary>
            Stops the controller's current animation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.ResetAnimation">
            <summary>
            Resets the controller's current animation to its default state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.GetFrame">
            <summary>
            Gets the playing animation's current frame.
            </summary>
            <returns>The playing animation's current frame, or <c>null</c> if no animation is playing.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.IsPlayingFireAndForget">
            <summary>
            Gets a value indicating whether the controller is currently playing a fire-and-forget animation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.IsPlaying">
            <summary>
            Gets a value indicating whether the controller is currently playing an animation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.IsStatic">
            <summary>
            Gets a value indicating whether the controller is currently playing a static (i.e. single-frame) animation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.Width">
            <summary>
            Gets the width of the controller's currently displayed frame.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController.Height">
            <summary>
            Gets the height of the controller's currently displayed frame.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationDescription">
            <summary>
            Describes a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> object during deserialization.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationDescription.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationDescription"/> class.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationDescription.Name">
            <summary>
            Retrieves the animation's name.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationDescription.Repeat">
            <summary>
            Retrieves the animation's repeat value.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationDescription.Frames">
            <summary>
            Gets an array containing the animation's frames.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationDescription.FrameGroups">
            <summary>
            Gets an array of frame groups describing the animation's frames.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationFrameCollection">
            <summary>
            Represents the list of frames that constitutes a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationFrameCollection.Duration">
            <summary>
            Gets the total duration of the animation's frames in milliseconds.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationFrameCollection.OnCollectionReset">
            <inheritdoc />
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationFrameCollection.OnCollectionItemAdded(System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame)">
            <inheritdoc />
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationFrameCollection.OnCollectionItemRemoved(System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame)">
            <inheritdoc />
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID">
            <summary>
            Represents a value which identifies a particular sprite animation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.#ctor(TwistedLogik.Ultraviolet.Content.AssetID,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID"/> structure from the specified animation name.
            </summary>
            <param name="spriteAssetID">The <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> that represents the sprite that contains the animation.</param>
            <param name="animationName">The name of the referenced animation.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.#ctor(TwistedLogik.Ultraviolet.Content.AssetID,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID"/> structure from the specified animation name.
            </summary>
            <param name="spriteAssetID">The <see cref="T:TwistedLogik.Ultraviolet.Content.AssetID"/> that represents the sprite that contains the animation.</param>
            <param name="animationIndex">The index of the referenced animation.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.op_Equality(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID)">
            <summary>
            Compares two identifiers for equality.
            </summary>
            <param name="id1">The first identifier to compare.</param>
            <param name="id2">The second identifier to compare.</param>
            <returns><c>true</c> if the specified identifiers are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.op_Inequality(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID)">
            <summary>
            Compares two identifiers for inequality.
            </summary>
            <param name="id1">The first identifier to compare.</param>
            <param name="id2">The second identifier to compare.</param>
            <returns><c>true</c> if the specified identifiers are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.Parse(System.String)">
            <summary>
            Converts the string representation of a sprite animation identifier to an instance of the SpriteAnimationID structure
            using the content manifest registry provided by the current Ultraviolet context.
            </summary>
            <param name="s">A string containing the sprite animation identifier to convert.</param>
            <returns>An instance of the SpriteAnimationID structure that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.TryParse(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID@)">
            <summary>
            Converts the string representation of a sprite animation identifier to an instance of the SpriteAnimationID structure
            using the content manifest registry provided by the current Ultraviolet context.
            </summary>
            <param name="s">A string containing the sprite animation identifier to convert.</param>
            <param name="value">An instance of the SpriteAnimationID structure that is equivalent to the specified string.</param>
            <returns><c>true</c> if the string was successfully parsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.Parse(TwistedLogik.Ultraviolet.Content.ContentManifestRegistry,System.String)">
            <summary>
            Converts the string representation of a sprite animation identifier to an instance of the SpriteAnimationID structure.
            </summary>
            <param name="manifests">The content manifest registry that contains the currently-loaded content manifests.</param>
            <param name="s">A string containing the sprite animation identifier to convert.</param>
            <returns>An instance of the SpriteAnimationID structure that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.TryParse(TwistedLogik.Ultraviolet.Content.ContentManifestRegistry,System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID@)">
            <summary>
            Converts the string representation of a sprite animation identifier to an instance of the SpriteAnimationID structure.
            </summary>
            <param name="manifests">The content manifest registry that contains the currently-loaded content manifests.</param>
            <param name="s">A string containing the sprite animation identifier to convert.</param>
            <param name="value">An instance of the SpriteAnimationID structure that is equivalent to the specified string.</param>
            <returns><c>true</c> if the string was successfully parsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.GetSpriteAssetID(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID)">
            <summary>
            Gets the asset identifier of the sprite that contains the specified animation.
            </summary>
            <param name="id">The identifier of the animation to evaluate.</param>
            <returns>The asset identifier of the sprite that contains the specified animation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.GetSpriteAssetIDRef(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID@)">
            <summary>
            Gets the asset identifier of the sprite that contains the specified animation.
            </summary>
            <param name="id">The identifier of the animation to evaluate.</param>
            <returns>The asset identifier of the sprite that contains the specified animation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.GetAnimationName(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID)">
            <summary>
            Gets the name of the specified animation.
            </summary>
            <param name="id">The identifier of the animation to evaluate.</param>
            <returns>The name of the specified animation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.GetAnimationNameRef(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID@)">
            <summary>
            Gets the name of the specified animation.
            </summary>
            <param name="id">The identifier of the animation to evaluate.</param>
            <returns>The name of the specified animation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.GetAnimationIndex(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID)">
            <summary>
            Gets the name of the specified animation within its sprite's animation list.
            </summary>
            <param name="id">The identifier of the animation to evaluate.</param>
            <returns>The name of the specified animation within its sprite's animation list.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.GetAnimationIndexRef(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID@)">
            <summary>
            Gets the name of the specified animation within its sprite's animation list.
            </summary>
            <param name="id">The identifier of the animation to evaluate.</param>
            <returns>The name of the specified animation within its sprite's animation list.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.GetHashCode">
            <summary>
            Retrieves the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.Equals(System.Object)">
            <summary>
            Determines whether this object is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns><c>true</c> if this object is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.Equals(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID)">
            <summary>
            Determines whether this object is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this object.</param>
            <returns><c>true</c> if this object is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.Invalid">
            <summary>
            Gets an invalid animation identifier.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.IsValid">
            <summary>
            Gets a value indicating whether this is a valid sprite animation identifier.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID.TryParseInternal(TwistedLogik.Ultraviolet.Content.ContentManifestRegistry,System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationID@)">
            <summary>
            Converts the string representation of an asset identifier to an instance of the SpriteAnimationID structure.
            </summary>
            <param name="manifests">The content manifest registry that contains the currently-loaded content manifests.</param>
            <param name="s">A string containing the asset identifier to convert.</param>
            <param name="value">An instance of the SpriteAnimationID structure that is equivalent to the specified string.</param>
            <returns><c>true</c> if the string was successfully parsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationRepeat">
            <summary>
            Determines how a sprite animation acts when it reaches the end of its list of frames.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationRepeat.None">
            <summary>
            The animation does not repeat.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationRepeat.Loop">
            <summary>
            The animation loops continuously.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch">
            <summary>
            Represents a standard implementation of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2"/> using vertices which
            specify position, color, and texture data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="batchSize">The maximum number of sprites that can be drawn in a single batch.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch.GenerateVertices(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader[],TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture[],TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchData[],System.Int32,System.Int32)">
            <summary>
            Generates vertices for a group of sprites.
            </summary>
            <param name="texture">The batch's texture.</param>
            <param name="sprites">The batch's sprite metadata array.</param>
            <param name="vertices">The batch's vertex data array.</param>
            <param name="data">The batch's custom data array.</param>
            <param name="offset">The offset of the first sprite being drawn.</param>
            <param name="count">The number of sprites being drawn.</param>
            <returns>The vertex stride.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2">
            <summary>
            Contains methods for drawing batches of 2D sprites.
            </summary>
            <typeparam name="VertexType">The type of vertex used to render the batch's sprites.</typeparam>
            <typeparam name="SpriteData">The type of data object associated with each of the batch's sprite instances.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="batchSize">The maximum number of sprites that can be drawn in a single batch.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Flush">
            <summary>
            Flushes the current batch.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Begin">
            <summary>
            Begins a sprite batch operation using deferred sort and default state objects.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Begin(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode,TwistedLogik.Ultraviolet.Graphics.BlendState)">
            <summary>
            Begins a sprite batch operation using the specified sort and blend state objects.
            </summary>
            <param name="sortMode">The batch's sprite drawing order.</param>
            <param name="blendState">The batch's blend state.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Begin(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode,TwistedLogik.Ultraviolet.Graphics.BlendState,TwistedLogik.Ultraviolet.Graphics.SamplerState,TwistedLogik.Ultraviolet.Graphics.DepthStencilState,TwistedLogik.Ultraviolet.Graphics.RasterizerState)">
            <summary>
            Begins a sprite batch operation using the specified sort and blend state objects.
            </summary>
            <param name="sortMode">The batch's sprite drawing order.</param>
            <param name="blendState">The batch's blend state.</param>
            <param name="samplerState">The batch's sampler state.</param>
            <param name="depthStencilState">The batch's depth/stencil state.</param>
            <param name="rasterizerState">The batch's rasterizer state.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Begin(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode,TwistedLogik.Ultraviolet.Graphics.BlendState,TwistedLogik.Ultraviolet.Graphics.SamplerState,TwistedLogik.Ultraviolet.Graphics.DepthStencilState,TwistedLogik.Ultraviolet.Graphics.RasterizerState,TwistedLogik.Ultraviolet.Graphics.Effect)">
            <summary>
            Begins a sprite batch operation using the specified sort and blend state objects, as well as a custom effect.
            </summary>
            <param name="sortMode">The batch's sprite drawing order.</param>
            <param name="blendState">The batch's blend state.</param>
            <param name="samplerState">The batch's sampler state.</param>
            <param name="depthStencilState">The batch's depth/stencil state.</param>
            <param name="rasterizerState">The batch's rasterizer state.</param>
            <param name="effect">The batch's custom effect.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Begin(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode,TwistedLogik.Ultraviolet.Graphics.BlendState,TwistedLogik.Ultraviolet.Graphics.SamplerState,TwistedLogik.Ultraviolet.Graphics.DepthStencilState,TwistedLogik.Ultraviolet.Graphics.RasterizerState,TwistedLogik.Ultraviolet.Graphics.Effect,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Begins a sprite batch operation using the specified sort and blend state objects, as well as a custom effect and transformation matrix.
            </summary>
            <param name="sortMode">The batch's sprite drawing order.</param>
            <param name="blendState">The batch's blend state.</param>
            <param name="samplerState">The batch's sampler state.</param>
            <param name="depthStencilState">The batch's depth/stencil state.</param>
            <param name="rasterizerState">The batch's rasterizer state.</param>
            <param name="effect">The batch's custom effect.</param>
            <param name="transformMatrix">The batch's transformation matrix.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Begin(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState)">
            <summary>
            Begins a sprite batch operation using the specified state values.
            </summary>
            <param name="state">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState"/> value representing the batch's state.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.End">
            <summary>
            Finishes a sprite batch operation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="color">The sprite's tint color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.RectangleF,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.RectangleF,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="color">The sprite's tint color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.RectangleF,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.RectangleF,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Draw(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="width">The width in pixels of the destination rectangle, or <c>null</c> to use the width of the sprite.</param>
            <param name="height">The height in pixels of the destination rectangle, or <c>null</c> to use the height of the sprite.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,System.Nullable{System.Single},System.Nullable{System.Single},TwistedLogik.Ultraviolet.Color,System.Single)">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="width">The width in pixels of the destination rectangle, or <c>null</c> to use the width of the sprite.</param>
            <param name="height">The height in pixels of the destination rectangle, or <c>null</c> to use the height of the sprite.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,System.Nullable{System.Single},System.Nullable{System.Single},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="width">The width in pixels of the destination rectangle, or <c>null</c> to use the width of the sprite.</param>
            <param name="height">The height in pixels of the destination rectangle, or <c>null</c> to use the height of the sprite.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,`1)">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,System.Nullable{System.Single},System.Nullable{System.Single},`1)">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="width">The width in pixels of the destination rectangle, or <c>null</c> to use the width of the sprite.</param>
            <param name="height">The height in pixels of the destination rectangle, or <c>null</c> to use the height of the sprite.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,System.Nullable{System.Single},System.Nullable{System.Single},TwistedLogik.Ultraviolet.Color,System.Single,`1)">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="width">The width in pixels of the destination rectangle, or <c>null</c> to use the width of the sprite.</param>
            <param name="height">The height in pixels of the destination rectangle, or <c>null</c> to use the height of the sprite.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,System.Nullable{System.Single},System.Nullable{System.Single},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a sprite animation.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="width">The width in pixels of the destination rectangle, or <c>null</c> to use the width of the sprite.</param>
            <param name="height">The height in pixels of the destination rectangle, or <c>null</c> to use the height of the sprite.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawScaledSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Draws a sprite animation with the specified scaling factor.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="scale">The sprite's scale factor.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawScaledSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single)">
            <summary>
            Draws a sprite animation with the specified scaling factor.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawScaledSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a sprite animation with the specified scaling factor.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="color">The sprite's color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawScaledSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,`1)">
            <summary>
            Draws a sprite animation with the specified scaling factor.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawScaledSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,`1)">
            <summary>
            Draws a sprite animation with the specified scaling factor.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawScaledSprite(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a sprite animation with the specified scaling factor.
            </summary>
            <param name="animation">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimationController"/> representing the sprite animation to draw.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawFrame(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame,TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Color,System.Single)">
            <summary>
            Draws a single animation frame.
            </summary>
            <param name="frame">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame"/> to draw.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawFrame(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame,TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a single animation frame.
            </summary>
            <param name="frame">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame"/> to draw.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawFrame(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame,TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Color,System.Single,`1)">
            <summary>
            Draws a single animation frame.
            </summary>
            <param name="frame">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame"/> to draw.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawFrame(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame,TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a single animation frame.
            </summary>
            <param name="frame">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame"/> to draw.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,System.Single,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShader">The glyph shader to apply to the rendered string.</param>
            <param name="fontFace">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawImage(TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage,TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage"/> that represents the image to draw.</param>
            <param name="position">The position at which to draw the image.</param>
            <param name="width">The width of the image in pixels.</param>
            <param name="height">The height of the image in pixels.</param>
            <param name="color">The image's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawImage(TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage,TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage"/> that represents the image to draw.</param>
            <param name="position">The position at which to draw the image.</param>
            <param name="width">The width of the image in pixels.</param>
            <param name="height">The height of the image in pixels.</param>
            <param name="color">The image's color.</param>
            <param name="rotation">The image's rotation in radians.</param>
            <param name="origin">The image's point of origin.</param>
            <param name="effects">The image's rendering effects.</param>
            <param name="layerDepth">The image's layer depth.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawImage(TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage,TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,`1)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage"/> that represents the image to draw.</param>
            <param name="position">The position at which to draw the image.</param>
            <param name="width">The width of the image in pixels.</param>
            <param name="height">The height of the image in pixels.</param>
            <param name="color">The image's color.</param>
            <param name="data">The image's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawImage(TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage,TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws an image.
            </summary>
            <param name="image">An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage"/> that represents the image to draw.</param>
            <param name="position">The position at which to draw the image.</param>
            <param name="width">The width of the image in pixels.</param>
            <param name="height">The height of the image in pixels.</param>
            <param name="color">The image's color.</param>
            <param name="rotation">The image's rotation in radians.</param>
            <param name="origin">The image's point of origin.</param>
            <param name="effects">The image's rendering effects.</param>
            <param name="layerDepth">The image's layer depth.</param>
            <param name="data">The image's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.GetCurrentState">
            <summary>
            Gets a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState"/> value that represents the current batch's state.
            </summary>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState"/> value that represents the current batch's state.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.BatchSize">
            <summary>
            Gets the maximum number of sprites that can drawn in a single batch by this <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2"/>.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CurrentSortMode">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode"/> which is in effect for the current batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CurrentBlendState">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.BlendState"/> which is in effect for the current batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CurrentSamplerState">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> which is in effect for the current batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CurrentRasterizerState">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> which is in effect for the current batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CurrentDepthStencilState">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.DepthStencilState"/> which is in effect for the current batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CurrentEffect">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Effect"/> which is in effect for the current batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CurrentTransformMatrix">
            <summary>
            Gets the transformation matrix which is in effect for the current batch.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculateUV(TwistedLogik.Ultraviolet.Graphics.Texture2D)">
            <summary>
            Calculates and caches the UV factors for the specified texture.
            </summary>
            <param name="texture">The texture for which to calculate UV factors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculateSinAndCos(System.Single)">
            <summary>
            Calculates and caches the sine and cosine of the specified rotation.
            </summary>
            <param name="rotation">The rotation for which to calculate sine and cosine values.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculateRelativeOrigin(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader*)">
            <summary>
            Calculates the relative origin of the specified sprite.
            </summary>
            <param name="metadata">A pointer to the sprite metadata.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculateRelativeOrigin(System.IntPtr)">
            <summary>
            Calculates the relative origin of the specified sprite.
            </summary>
            <param name="metadata">A pointer to the sprite metadata.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculatePosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader*,System.Int32,TwistedLogik.Ultraviolet.MutableVector3*)">
            <summary>
            Calculates the position of a sprite vertex.
            </summary>
            <param name="metadata">A pointer to the sprite metadata.</param>
            <param name="ix">The index of the current vertex.</param>
            <param name="position">The position of the current vertex represented as a <see cref="T:TwistedLogik.Ultraviolet.MutableVector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculatePosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader*,System.Int32,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Calculates the position of a sprite vertex.
            </summary>
            <param name="metadata">A pointer to the sprite metadata.</param>
            <param name="ix">The index of the current vertex.</param>
            <param name="position">The position of the current vertex.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculatePosition(System.IntPtr,System.Int32,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Calculates the position of a sprite vertex.
            </summary>
            <param name="metadata">A pointer to the sprite metadata.</param>
            <param name="ix">The index of the current vertex.</param>
            <param name="position">The position of the current vertex.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculateTextureCoordinates(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader*,System.Int32,TwistedLogik.Ultraviolet.MutableVector2*)">
            <summary>
            Calculates the texture coordinates of a sprite vertex.
            </summary>
            <param name="metadata">The sprite metadata.</param>
            <param name="ix">The index of the current vertex.</param>
            <param name="textureCoordinates">The texture coordinates of the current vertex.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculateTextureCoordinates(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader*,System.Int32,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Calculates the texture coordinates of a sprite vertex.
            </summary>
            <param name="metadata">The sprite metadata.</param>
            <param name="ix">The index of the current vertex.</param>
            <param name="textureCoordinates">The texture coordinates of the current vertex.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculateTextureCoordinates(System.IntPtr,System.Int32,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Calculates the texture coordinates of a sprite vertex.
            </summary>
            <param name="metadata">A pointer to the sprite metadata.</param>
            <param name="ix">The index of the current vertex.</param>
            <param name="textureCoordinates">The texture coordinates of the current vertex.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CalculatePositionAndTextureCoordinates(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader*,System.Int32,TwistedLogik.Ultraviolet.MutableVector3*,TwistedLogik.Ultraviolet.MutableVector2*)">
            <summary>
            Calculates the position and texture coordinates of a sprite vertex.
            </summary>
            <param name="metadata">A pointer to the sprite metadata.</param>
            <param name="ix">The index of the current vertex.</param>
            <param name="position">The position of the current vertex represented as a <see cref="T:TwistedLogik.Ultraviolet.MutableVector3"/>.</param>
            <param name="textureCoordinates">The texture coordinates of the current vertex.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.GenerateVertices(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader[],`0[],`1[],System.Int32,System.Int32)">
            <summary>
            Generates vertices for a group of sprites.
            </summary>
            <param name="texture">The batch's texture.</param>
            <param name="sprites">The batch's sprite metadata array.</param>
            <param name="vertices">The batch's vertex data array.</param>
            <param name="data">The batch's custom data array.</param>
            <param name="offset">The offset of the first sprite being drawn.</param>
            <param name="count">The number of sprites being drawn.</param>
            <returns>The vertex stride.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.BeginInternal(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode,TwistedLogik.Ultraviolet.Graphics.BlendState,TwistedLogik.Ultraviolet.Graphics.SamplerState,TwistedLogik.Ultraviolet.Graphics.DepthStencilState,TwistedLogik.Ultraviolet.Graphics.RasterizerState,TwistedLogik.Ultraviolet.Graphics.Effect,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Begins a sprite batch operation using the specified sort and blend state objects, as well as a custom effect and transformation matrix.
            </summary>
            <param name="sortMode">The batch's sprite drawing order.</param>
            <param name="blendState">The batch's blend state.</param>
            <param name="samplerState">The batch's sampler state.</param>
            <param name="depthStencilState">The batch's depth/stencil state.</param>
            <param name="rasterizerState">The batch's rasterizer state.</param>
            <param name="effect">The batch's custom effect.</param>
            <param name="transformMatrix">The batch's transformation matrix.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.EndInternal">
            <summary>
            Finishes a sprite batch operation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawInternal(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.RectangleF,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the sprite will be drawn.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawInternal(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Adds a sprite to the batch.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="position">The sprite's position in screen coordinates.</param>
            <param name="sourceRectangle">The sprite's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The sprite's tint color.</param>
            <param name="rotation">The sprite's rotation in radians.</param>
            <param name="origin">The sprite's origin point.</param>
            <param name="scale">The sprite's scale factor.</param>
            <param name="effects">The sprite's rendering effects.</param>
            <param name="layerDepth">The sprite's layer depth.</param>
            <param name="data">The sprite's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DrawStringInternal(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShaderContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,`1)">
            <summary>
            Draws a string of text.
            </summary>
            <param name="glyphShaderContext">The glyph shader context to apply to the rendered string.</param>
            <param name="fontFace">The font face with which to draw the text.</param>
            <param name="text">The text to draw.</param>
            <param name="position">The text's position.</param>
            <param name="color">The text's color.</param>
            <param name="rotation">The text's rotation in radians.</param>
            <param name="origin">The text's point of origin relative to its top-left corner.</param>
            <param name="scale">The text's scale factor.</param>
            <param name="effects">The text's rendering effects.</param>
            <param name="layerDepth">The text's layer depth.</param>
            <param name="data">The text's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.CreateVertexAndIndexBuffers">
            <summary>
            Creates the batch's vertex and index buffers.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.DestroyVertexAndIndexBuffers">
            <summary>
            Destroys the batch's vertex and index buffers.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.PopulateIndexBuffer">
            <summary>
            Populates the batch's index buffer.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.ApplyState">
            <summary>
            Applies the batch's state to the graphics device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.FlushBatch">
            <summary>
            Flushes a batch of sprites to the graphics device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2.FlushSprites(TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Int32,System.Int32)">
            <summary>
            Flushes a set of sprites within the batch to the device.
            </summary>
            <param name="texture">The texture with which to render the sprites.</param>
            <param name="offset">The offset of the first sprite in the set to flush.</param>
            <param name="count">The number of sprites in the set to flush.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchCoordinator">
            <summary>
            Contains methods for coordinating the operations of multiple sprite batches.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchCoordinator.DemandImmediate">
            <summary>
            Demands the right to operate in immediate mode.  If the right is denied, an InvalidOperationException is thrown.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchCoordinator.DemandDeferred">
            <summary>
            Demands the right to operate in deferred mode.  If the right is denied, an InvalidOperationException is thrown.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchCoordinator.RelinquishImmediate">
            <summary>
            Relinquishes the right to operate in immediate mode.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchCoordinator.RelinquishDeferred">
            <summary>
            Relinquishes the right to operate in deferred mode.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchData">
            <summary>
            Represents the instance data for a standard <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> sprite.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchData.Empty">
            <summary>
            Gets an empty set of sprite data.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffectFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect">
            <summary>
            Represents the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Effect"/> used by <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2"/> to render sprites.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect.#ctor(TwistedLogik.Ultraviolet.Graphics.EffectImplementation)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect"/> class.
            </summary>
            <param name="impl">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.EffectImplementation"/> that implements the effect.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchEffect.MatrixTransform">
            <summary>
            Gets or sets the effect's transformation matrix.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1">
            <summary>
            Represents the metadata for a batch of sprites.
            </summary>
            <typeparam name="SpriteData">The type of data object associated with each of the batch's sprite instances.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1"/> class.
            </summary>
            <param name="batchSize">The sprite batch size.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.Reserve(TwistedLogik.Ultraviolet.Graphics.Texture2D,`0@)">
            <summary>
            Reserves space in the batch's buffers for a sprite.
            </summary>
            <param name="texture">The sprite's texture.</param>
            <param name="customData">The sprite's custom data.</param>
            <returns>The index of the sprite that was reserved.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.Clear">
            <summary>
            Clears the batch's data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.Sort(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode)">
            <summary>
            Sorts the batch's sprites.
            </summary>
            <param name="spriteSortMode">The sprite sort mode.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.GetHeaders">
            <summary>
            Gets the batch's sprite header array.
            </summary>
            <returns>The batch's sprite header array.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.GetData">
            <summary>
            Gets the batch's sprite data array.
            </summary>
            <returns>The batch's sprite data array.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.GetTexture(System.Int32)">
            <summary>
            Gets the texture for the specified sprite.
            </summary>
            <param name="ix">The index of the sprite for which to retrieve a texture.</param>
            <returns>The texture for the specified sprite.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.Count">
            <summary>
            Gets the number of sprites in the batch.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.ExpandBuffers">
            <summary>
            Expands the batch's buffers.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.EnsureSortedBuffers">
            <summary>
            Ensures that the sorted buffers exist and are of the appropriate size.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchInfo`1.PopulateSortedBuffers">
            <summary>
            Populates the batch's sorted buffers based on the current render order.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState">
            <summary>
            Represents the state values for a particular sprite batch.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode,TwistedLogik.Ultraviolet.Graphics.BlendState,TwistedLogik.Ultraviolet.Graphics.SamplerState,TwistedLogik.Ultraviolet.Graphics.RasterizerState,TwistedLogik.Ultraviolet.Graphics.DepthStencilState,TwistedLogik.Ultraviolet.Graphics.Effect,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState"/> structure.
            </summary>
            <param name="sortMode">The sprite batch's sort mode.</param>
            <param name="blendState">The sprite batch's blend state.</param>
            <param name="samplerState">The sprite batch's sampler state.</param>
            <param name="rasterizerState">The sprite batch's rasterizer state.</param>
            <param name="depthStencilState">The sprite batch's depth/stencil state.</param>
            <param name="effect">The sprite batch's custom effect.</param>
            <param name="transformMatrix">The sprite batch's transformation matrix.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.SortMode">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode"/> which is in effect for the batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.BlendState">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.BlendState"/> which is in effect for the batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.SamplerState">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.SamplerState"/> which is in effect for the batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.RasterizerState">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.RasterizerState"/> which is in effect for the batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.DepthStencilState">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.DepthStencilState"/> which is in effect for the batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.Effect">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.Effect"/> which is in effect for the batch.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchState.TransformMatrix">
            <summary>
            Gets the transformation matrix which is in effect for the batch.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteDescription">
            <summary>
            Describes a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite"/> object during deserialization.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteDescription.Animations">
            <summary>
            Retrieves an array containing the sprite's list of animations.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects">
            <summary>
            Represents the effects that can be applied to a sprite.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects.None">
            <summary>
            No effects.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects.FlipHorizontally">
            <summary>
            Flips the sprite horizontally across the y-axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects.FlipVertically">
            <summary>
            Flips the sprite vertically across the x-axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects.OriginRelativeToDestination">
            <summary>
            Indicates that the sprite's point of origin should be considered relative to
            its destination rectangle, rather than its source rectangle.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont">
            <summary>
            Represents a bitmap font used for rendering text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="face">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> that constitutes the font.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="faceRegular">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> that represents the font's regular style.</param>
            <param name="faceBold">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> that represents the font's bold style.</param>
            <param name="faceItalic">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> that represents the font's italic style.</param>
            <param name="faceBoldItalic">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> that represents the font's bold/italic style.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.op_Implicit(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)~TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont"/> into a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> by returning the font's regular face.
            </summary>
            <param name="font">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont"/> to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.GetFace(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle)">
            <summary>
            Gets the font face that corresponds to the specified style.
            </summary>
            <remarks>If the requested font face does not exist, the closest matching font face will be returned instead.</remarks>
            <param name="style">The style for which to retrieve a font face.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> that corresponds to the specified style.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.GetFace(System.Boolean,System.Boolean)">
            <summary>
            Gets the font face that corresponds to the specified style.
            </summary>
            <remarks>If the requested font face does not exist, the closest matching font face will be returned instead.</remarks>
            <param name="bold">A value indicating whether to retrieve a bold font face.</param>
            <param name="italic">A value indicating whether to retrieve an italic font face.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> that corresponds to the specified style.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.Regular">
            <summary>
            Gets the font's regular face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.Bold">
            <summary>
            Gets the font's bold face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.Italic">
            <summary>
            Gets the font's italic face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.BoldItalic">
            <summary>
            Gets the font's bold/italic face.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont.ExtendedAsciiCount">
            <summary>
            Gets the number of characters in the Extended ASCII table, which is used to optimize sprite fonts
            when using common glyphs from the Roman alphabet.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace">
            <summary>
            Represents one of a sprite font's font faces.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion},System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Rectangle},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="texture">The texture that contains the glyph images.</param>
            <param name="regions">A collection containing the font face's character regions.</param>
            <param name="glyphs">A collection containing the positions of the font's glyphs.</param>
            <param name="ownsTexture">A value indicating whether this font face is responsible for disposing of its texture.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion},System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Rectangle},System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="texture">The texture that contains the font face's glyphs.</param>
            <param name="regions">A collection containing the font face's character regions.</param>
            <param name="glyphs">A collection containing the positions of the font face's glyphs on its texture.</param>
            <param name="firstCharacter">The character that corresponds to font face's first glyph.</param>
            <param name="substitutionCharacter">The character that corresponds to the font face's substitution glyph.</param>
            <param name="ownsTexture">A value indicating whether this font face is responsible for disposing of its texture.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureString(System.String)">
            <summary>
            Measures the size of the specified string of text when rendered using this font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size of the specified string of text when rendered using this font.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureString(System.String,System.Int32,System.Int32)">
            <summary>
            Measures the size of the specified substring of text when rendered using this font.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="start">The index of the first character of the substring to measure.</param>
            <param name="count">The number of characters in the substring to measure.</param>
            <returns>The size of the specified substring of text when rendered using this font.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureString(System.Text.StringBuilder)">
            <summary>
            Measures the size of the specified string of text when rendered using this font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size of the specified string of text when rendered using this font.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Measures the size of the specified substring of text when rendered using this font.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="start">The index of the first character of the substring to measure.</param>
            <param name="count">The number of characters in the substring to measure.</param>
            <returns>The size of the specified substring of text when rendered using this font.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureString(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Measures the size of the specified string of text when rendered using this font.
            </summary>
            <param name="text">The text to measure.</param>
            <returns>The size of the specified string of text when rendered using this font.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureString(TwistedLogik.Nucleus.Text.StringSegment,System.Int32,System.Int32)">
            <summary>
            Measures the size of the specified substring of text when rendered using this font.
            </summary>
            <param name="text">The text to measure.</param>
            <param name="start">The index of the first character of the substring to measure.</param>
            <param name="count">The number of characters in the substring to measure.</param>
            <returns>The size of the specified substring of text when rendered using this font.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureGlyph(System.String,System.Int32)">
            <summary>
            Measures the specified glyph in a string, taking kerning into account.
            </summary>
            <param name="text">The text that contains the glyph to measure.</param>
            <param name="ix">The index of the glyph to measure.</param>
            <returns>The size of the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureGlyph(System.Text.StringBuilder,System.Int32)">
            <summary>
            Measures the specified glyph in a string, taking kerning into account.
            </summary>
            <param name="text">The text that contains the glyph to measure.</param>
            <param name="ix">The index of the glyph to measure.</param>
            <returns>The size of the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureGlyph(TwistedLogik.Nucleus.Text.StringSegment,System.Int32)">
            <summary>
            Measures the specified glyph in a string, taking kerning into account.
            </summary>
            <param name="text">The text that contains the glyph to measure.</param>
            <param name="ix">The index of the glyph to measure.</param>
            <returns>The size of the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureGlyph(System.Char,System.Nullable{System.Char})">
            <summary>
            Measures the specified glyph, taking kerning into account.
            </summary>
            <param name="c1">The glyph to measure.</param>
            <param name="c2">The glyph that comes immediately after the glyph being measured.</param>
            <returns>The size of the specified glyph.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.Kerning">
            <summary>
            Gets the font face's kerning information.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.Texture">
            <summary>
            Gets the texture that contains the font face's glyphs.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.FirstCharacter">
            <summary>
            Gets the character that corresponds to the font face's first glyph.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.SubstitutionCharacter">
            <summary>
            Gets the character that corresponds to the font face's substitution glyph.
            </summary>
            <remarks>The substitution glyph is used as a replacement for characters which do not exist in the collection.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.Characters">
            <summary>
            Gets the number of characters in the font face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.SpaceWidth">
            <summary>
            Gets the width of a space in this font face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.TabWidth">
            <summary>
            Gets the width of a tab in this font face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.LineSpacing">
            <summary>
            Gets the height of a line written with this font face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.Item(System.Char)">
            <summary>
            Gets the position of the specified glyph on the font face's texture.
            </summary>
            <param name="character">The character for which to retrieve glyph position information.</param>
            <returns>The position of the specified glyph on the font face's texture.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource@,System.Int32,System.Int32)">
            <summary>
            Measures the size of the specified substring of text when rendered using this font.
            </summary>
            <param name="source">The text to measure.</param>
            <param name="start">The index of the first character of the substring to measure.</param>
            <param name="count">The number of characters in the substring to measure.</param>
            <returns>The size of the specified substring of text when rendered using this font.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.MeasureGlyph(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource@,System.Int32)">
            <summary>
            Measures the specified glyph in a string, taking kerning into account.
            </summary>
            <param name="source">The text that contains the glyph to measure.</param>
            <param name="ix">The index of the glyph to measure.</param>
            <returns>The size of the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex">
            <summary>
            Represents a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont"/> instance's internal index of glyph source rectangles.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex.#ctor(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.CharacterRegion},System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Rectangle},System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex"/> class.
            </summary>
            <param name="regions">A collection containing the font face's character regions.</param>
            <param name="glyphs">A collection containing the positions of the font face's glyphs on its texture.</param>
            <param name="firstCharacter">The character that corresponds to font face's first glyph.</param>
            <param name="substitutionCharacter">The character that corresponds to the font face's substitution glyph.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex.Item(System.Char)">
            <summary>
            Gets the position of the specified glyph on the font face's texture.
            </summary>
            <param name="character">The character for which to retrieve glyph position information.</param>
            <returns>The position of the specified glyph on the font face's texture.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex.FirstCharacter">
            <summary>
            Gets the first character in the index.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex.SubstitutionCharacter">
            <summary>
            Gets the character which is substituted for missing characters.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex.LineSpacing">
            <summary>
            Gets the height of a line of text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontGlyphIndex.Count">
            <summary>
            Gets the number of glyphs in the index.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning">
            <summary>
            Represents the kerning information for a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Get(System.Char,System.Char)">
            <summary>
            Gets the kerning offset for the specified pair of characters.
            </summary>
            <param name="c1">The first character in the pair.</param>
            <param name="c2">The second character in the pair.</param>
            <returns>The kerning offset for the specified pair of characters.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Get(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair)">
            <summary>
            Gets the kerning offset for the specified pair of characters.
            </summary>
            <param name="pair">The character pair.</param>
            <returns>The kerning offset for the specified pair of characters.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Set(System.Char,System.Char,System.Int32)">
            <summary>
            Sets the kerning offset for the specified pair of characters.
            </summary>
            <param name="c1">The first character in the pair.</param>
            <param name="c2">The second character in the pair.</param>
            <param name="value">The kerning offset to set for the specified pair of characters.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Set(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair,System.Int32)">
            <summary>
            Sets the kerning offset for the specified pair of characters.
            </summary>
            <param name="pair">The character pair.</param>
            <param name="value">The kerning offset to set for the specified pair of characters.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Remove(System.Char,System.Char)">
            <summary>
            Removes the specified character pair from the kerning data.
            </summary>
            <param name="c1">The first character in the pair.</param>
            <param name="c2">The second character in the pair.</param>
            <returns><c>true</c> if the character pair was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Remove(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair)">
            <summary>
            Removes the specified character pair from the kerning data.
            </summary>
            <param name="pair">The character pair.</param>
            <returns><c>true</c> if the character pair was removed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Contains(System.Char,System.Char)">
            <summary>
            Gets a value indicating whether the kerning data contains the specified character pair.
            </summary>
            <param name="c1">The first character in the pair.</param>
            <param name="c2">The second character in the pair.</param>
            <returns><c>true</c> if the kerning data contains the specified character pair; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.Contains(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair)">
            <summary>
            Gets a value indicating whether the kerning data contains the specified character pair.
            </summary>
            <param name="pair">The character pair.</param>
            <returns><c>true</c> if the kerning data contains the specified character pair; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerning.DefaultAdjustment">
            <summary>
            Gets or sets the default adjustment applied to all character pairs in this font.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair">
            <summary>
            Represents a pair of glyphs and their associated kerning information.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.#ctor(System.Char,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair"/> structure.
            </summary>
            <param name="firstCharacter">The first character in the pair.</param>
            <param name="secondCharacter">The second character in the pair.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.op_Equality(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair)">
            <summary>
            Tests two kerning pairs for equality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair"/>.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair"/>.</param>
            <returns><c>true</c> if the kerning pairs are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.op_Inequality(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair)">
            <summary>
            Tests two kerning pairs for inequality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair"/>.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair"/>.</param>
            <returns><c>true</c> if the kerning pairs are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.GetHashCode">
            <summary>
            Gets the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this object is equal to another object.
            </summary>
            <param name="obj">The object to compare to this object.</param>
            <returns><c>true</c> if the objects are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.Equals(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair)">
            <summary>
            Gets a value indicating whether this kerning pair is equal to another kerning pair.
            </summary>
            <param name="obj">The kerning pair to compare to this kerning pair.</param>
            <returns><c>true</c> if the kerning pairs are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.FirstCharacter">
            <summary>
            Gets the first character in the pair.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontKerningPair.SecondCharacter">
            <summary>
            Gets the second character in the pair.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle">
            <summary>
            Represents the supported font styles.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.Regular">
            <summary>
            Regular.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.Bold">
            <summary>
            Bold.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.Italic">
            <summary>
            Italic.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.BoldItalic">
            <summary>
            Bold and italic.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame">
            <summary>
            Represents one of the images that constitutes a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame"/> class.
            </summary>
            <param name="description">The frame description.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Atlas">
            <summary>
            Retrieves the content resource path to the frame's texture atlas.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.AtlasCell">
            <summary>
            Retrieves the name of the frame's texture atlas cell.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Texture">
            <summary>
            Retrieves the content resource path to the frame's texture.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.TextureResource">
            <summary>
            Retrieves the frame's texture resource.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Area">
            <summary>
            Gets a rectangle containing the frame's area on its texture.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.X">
            <summary>
            Retrieves the distance, in pixels, between the left edge of the frame's texture
            and the left edge of the frame.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Y">
            <summary>
            Retrieves the distance, in pixels, between the top edge of the frame's texture
            and the top edge of the frame.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Width">
            <summary>
            Retrieves the width of the frame in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Height">
            <summary>
            Retrieves the height of the frame in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Origin">
            <summary>
            Gets the frame's origin point.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.OriginX">
            <summary>
            Retrieves the distance, in pixels, between the top left corner of the frame
            and its origin point.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.OriginY">
            <summary>
            Retrieves the distance, in pixels, between the top left corner of the frame
            and its origin point.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame.Duration">
            <summary>
            Retrieves the frame's duration in milliseconds.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription">
            <summary>
            Describes a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame"/> object during deserialization.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.Atlas">
            <summary>
            Retrieves the content resource path to the frame's texture atlas.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.AtlasCell">
            <summary>
            Retreives the name of the frame's texture atlas cell.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.Texture">
            <summary>
            Retrieves the content resource path to the frame's texture.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.TextureResource">
            <summary>
            Retrieves the frame's texture resource.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.X">
            <summary>
            Retrieves the distance, in pixels, between the left edge of the frame's texture
            and the left edge of the frame.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.Y">
            <summary>
            Retrieves the distance, in pixels, between the top edge of the frame's texture
            and the top edge of the frame.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.Width">
            <summary>
            Retrieves the width of the frame in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.Height">
            <summary>
            Retrieves the height of the frame in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.OriginX">
            <summary>
            Retrieves the distance, in pixels, between the top left corner of the frame
            and its origin point.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.OriginY">
            <summary>
            Retrieves the distance, in pixels, between the top left corner of the frame
            and its origin point.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameDescription.Duration">
            <summary>
            Retrieves the frame's duration in milliseconds.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription">
            <summary>
            Describes a collectively-defined group of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrame"/> objects during deserialization.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.Texture">
            <summary>
            Gets or sets the name of the texture on which the group's frames are defined.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.AreaX">
            <summary>
            Gets or sets the x-coordinate of the area in which the group's frames are defined.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.AreaY">
            <summary>
            Gets or sets the y-coordinate of the area in which the group's frames are defined.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.AreaWidth">
            <summary>
            Gets or sets the width of the area in which the group's frames are defined.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.AreaHeight">
            <summary>
            Gets or sets the height of the area in which the group's frames are defined.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.FrameCount">
            <summary>
            Gets or sets the number of frames in this group.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.FrameWidth">
            <summary>
            Gets or sets the width of frames in this group.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.FrameHeight">
            <summary>
            Gets or sets the height of frames in this group.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.OriginX">
            <summary>
            Gets or sets the distance, in pixels, between the left edge of the frames
            in this group and their center points.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.OriginY">
            <summary>
            Gets or sets the distance, in pixels, between the top edge of the frames
            in this group and their center points.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFrameGroupDescription.Duration">
            <summary>
            Gets or sets duration of frames in this group.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader">
            <summary>
            Represents the header data for a batched <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Sprite"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.SourceX">
            <summary>
            The x-coordinate of the top-left corner of the sprite's source rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.SourceY">
            <summary>
            The y-coordinate of the top-left corner of the sprite's source rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.SourceWidth">
            <summary>
            The width of the sprite's source rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.SourceHeight">
            <summary>
            The height of the sprite's source rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.DestinationX">
            <summary>
            The x-coordinate of the top-left corner of the sprite's destination rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.DestinationY">
            <summary>
            The y-coordinate of the top-left corner of the sprite's destination rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.DestinationWidth">
            <summary>
            The width of the sprite's destination rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.DestinationHeight">
            <summary>
            The height of the sprite's destination rectangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.OriginX">
            <summary>
            The x-coordinate of the sprite's origin point.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.OriginY">
            <summary>
            The y-coordinate of the sprite's origin point.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.Rotation">
            <summary>
            The sprite's rotation in radians.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.Depth">
            <summary>
            The sprite's layer depth.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.Color">
            <summary>
            The sprite's tint color.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteHeader.Effects">
            <summary>
            The sprite's rendering effect.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteImporter">
            <summary>
            Represents a content importer which loads sprite definition files.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteImporter.Import(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,System.IO.Stream)">
            <summary>
            Imports the data from the specified file.
            </summary>
            <param name="metadata">The asset metadata for the asset to import.</param>
            <param name="stream">The <see cref="T:System.IO.Stream"/> that contains the data to import.</param>
            <returns>The data structure that was imported from the file.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteImporter.GetFrameAttribute``1(TwistedLogik.Nucleus.Data.DataElement,System.String)">
            <summary>
            Retrieves a frame attribute from the specified element and its ancestors.
            </summary>
            <param name="element">The element that defines the frame.</param>
            <param name="name">The name of the attribute to retrieve.</param>
            <returns>The attribute value that was retrieved.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteImporter.Import(TwistedLogik.Ultraviolet.Content.IContentImporterMetadata,TwistedLogik.Nucleus.Data.DataElement)">
            <summary>
            Imports a sprite.
            </summary>
            <param name="metadata">The content importer metadata.</param>
            <param name="data">The data element that defines the sprite.</param>
            <returns>The sprite that was imported.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteProcessor">
            <summary>
            Represents a content processor which loads sprites.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteProcessor.ExportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryWriter,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteDescription,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteProcessor.ImportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteDescription)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteProcessor.SupportsPreprocessing">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode">
            <summary>
            Represents the ways in which a sprite batch can sort its sprites.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode.Deferred">
            <summary>
            Sprites are not drawn until the batch ends, and then are drawn in the order that they were added to the batch.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode.Immediate">
            <summary>
            Sprites are rendered immediately, without any batching.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode.Texture">
            <summary>
            Sprites are sorted according to their texture.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode.BackToFront">
            <summary>
            Sprites are sorted according to their layer depth, from back to front.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteSortMode.FrontToBack">
            <summary>
            Sprites are sorted according to the layer depth, from front to back.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage">
            <summary>
            Represents a static 2D image.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Create(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Create(TwistedLogik.Ultraviolet.Content.AssetID,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="x">The x-coordinate of the region on the image's texture that contains the image.</param>
            <param name="y">The y-coordinate of the region on the image's texture that contains the image.</param>
            <param name="width">The width of the region on the image's texture that contains the image.</param>
            <param name="height">The height of the region on the image's texture that contains the image.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Create(TwistedLogik.Ultraviolet.Content.AssetID,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="textureRegion">The region of the image's texture which contains the image.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="x">The x-coordinate of the region on the image's texture that contains the image.</param>
            <param name="y">The y-coordinate of the region on the image's texture that contains the image.</param>
            <param name="width">The width of the region on the image's texture that contains the image.</param>
            <param name="height">The height of the region on the image's texture that contains the image.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="textureRegion">The region of the image's texture which contains the image.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.TryParse(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage@)">
            <summary>
            Converts the string representation of a static image into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="image">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Parse(System.String)">
            <summary>
            Converts the string representation of a static image to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage@)">
            <summary>
            Converts the string representation of a static image into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="image">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a static image to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage"/> class that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StaticImage.Draw``2(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase{``0,``1},TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,``1)">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage">
            <summary>
            Represents an image made of segments and designed to be stretched over an arbitrary area.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TilingMode">
            <summary>
            Represents the axes along which an image can be tiled.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TilingMode.Horizontal">
            <summary>
            Specifies that the image should be tiled along the horizontal axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TilingMode.Vertical">
            <summary>
            Specifies that the image should be tiled along the vertical axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TilingMode.Both">
            <summary>
            Specifies that the image should be tiled along both axes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage"/> class.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TileEdges">
            <summary>
            Gets or sets a value indicating whether the image should be drawn with tiled edges.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TileCenter">
            <summary>
            Gets or sets a value indicating whether the image should be drawn with a tiled center piece.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.ParseTilingParameter(System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Parses a tiling parameter included in a string which represents a stretchable image.
            </summary>
            <param name="parameter">The parameter string to parse.</param>
            <param name="tileCenter">A value indicating whether the image is set to tile its center piece.</param>
            <param name="tileEdges">A value indicating whether the image is set to tile its edges.</param>
            <returns><c>true</c> if the parameter was parsed successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TileImageSegment``2(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TilingMode,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase{``0,``1},TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,``1)">
            <summary>
            Draws a tiled image segment.
            </summary>
            <typeparam name="VertexType">The type of vertex used to render the batch's sprites.</typeparam>
            <typeparam name="SpriteData">The type of data object associated with each of the batch's sprite instances.</typeparam>
            <param name="mode">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage.TilingMode"/> value which specifies how to tile the image.</param>
            <param name="spriteBatch">The sprite batch with which to draw the segment.</param>
            <param name="texture">The segment's texture.</param>
            <param name="position">The segment's position in screen coordinates.</param>
            <param name="destinationRectangle">A rectangle which indicates where on the screen the segment will be drawn.</param>
            <param name="sourceRectangle">The segment's position on its texture, or <c>null</c> to draw the entire texture.</param>
            <param name="color">The segment's tint color.</param>
            <param name="rotation">The segment's rotation in radians.</param>
            <param name="origin">The segment's origin point.</param>
            <param name="effects">The segment's rendering effects.</param>
            <param name="layerDepth">The segment's layer depth.</param>
            <param name="data">The segment's custom data.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3">
            <summary>
            Represents a stretchable 2D image with three segments.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Create(TwistedLogik.Ultraviolet.Content.AssetID,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Create(TwistedLogik.Ultraviolet.Content.AssetID,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="x">The x-coordinate of the region on the image's texture that contains the image.</param>
            <param name="y">The y-coordinate of the region on the image's texture that contains the image.</param>
            <param name="width">The width of the region on the image's texture that contains the image.</param>
            <param name="height">The height of the region on the image's texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Create(TwistedLogik.Ultraviolet.Content.AssetID,TwistedLogik.Ultraviolet.Rectangle,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="textureRegion">The region of the image's texture which contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="x">The x-coordinate of the region on the image's texture that contains the image.</param>
            <param name="y">The y-coordinate of the region on the image's texture that contains the image.</param>
            <param name="width">The width of the region on the image's texture that contains the image.</param>
            <param name="height">The height of the region on the image's texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Rectangle,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="textureRegion">The region of the image's texture which contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.TryParse(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3@)">
            <summary>
            Converts the string representation of a stretchable image into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="image">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Parse(System.String)">
            <summary>
            Converts the string representation of a stretchable image to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3@)">
            <summary>
            Converts the string representation of a stretchable image into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="image">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a stretchable image to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3"/> class that is equivalent to the specified string.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Left">
            <summary>
            Gets the distance in pixels between the left edge of the image and the left edge of the image's center segment.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Right">
            <summary>
            Gets the distance in pixels between the right edge of the image and the right edge of the image's center segment.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Vertical">
            <summary>
            Gets or sets a value indicating whether this image is rendered vertically.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.Draw``2(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase{``0,``1},TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,``1)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.DrawVertical``2(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase{``0,``1},TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,``1)">
            <summary>
            Draws vertical images.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.DrawHorizontal``2(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase{``0,``1},TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,``1)">
            <summary>
            Draws horizontal images.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.ParseTilingParameter3(System.String,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Parses a tiling parameter included in a string which represents a stretchable image.
            </summary>
            <param name="parameter">The parameter string to parse.</param>
            <param name="tileCenter">A value indicating whether the image is set to tile its center piece.</param>
            <param name="tileEdges">A value indicating whether the image is set to tile its edges.</param>
            <param name="vertical">A value indicating whether the image is rendered veritcally.</param>
            <returns><c>true</c> if the parameter was parsed successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage3.UpdateMinimumRecommendedSize">
            <summary>
            Updates the value of the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.MinimumRecommendedSize"/> property.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9">
            <summary>
            Represents a stretchable 2D image with nine segments.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Create(TwistedLogik.Ultraviolet.Content.AssetID,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="top">The distance in pixels between the top edge of the image and the top edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <param name="bottom">The distance in pixels between the bottom edge of the image and the bottom edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Create(TwistedLogik.Ultraviolet.Content.AssetID,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="x">The x-coordinate of the region on the image's texture that contains the image.</param>
            <param name="y">The y-coordinate of the region on the image's texture that contains the image.</param>
            <param name="width">The width of the region on the image's texture that contains the image.</param>
            <param name="height">The height of the region on the image's texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="top">The distance in pixels between the top edge of the image and the top edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <param name="bottom">The distance in pixels between the bottom edge of the image and the bottom edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Create(TwistedLogik.Ultraviolet.Content.AssetID,TwistedLogik.Ultraviolet.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="texture">The asset identifier of the texture that contains the image.</param>
            <param name="textureRegion">The region of the image's texture which contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="top">The distance in pixels between the top edge of the image and the top edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <param name="bottom">The distance in pixels between the bottom edge of the image and the bottom edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="top">The distance in pixels between the top edge of the image and the top edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <param name="bottom">The distance in pixels between the bottom edge of the image and the bottom edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="x">The x-coordinate of the region on the image's texture that contains the image.</param>
            <param name="y">The y-coordinate of the region on the image's texture that contains the image.</param>
            <param name="width">The width of the region on the image's texture that contains the image.</param>
            <param name="height">The height of the region on the image's texture that contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="top">The distance in pixels between the top edge of the image and the top edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <param name="bottom">The distance in pixels between the bottom edge of the image and the bottom edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Create(TwistedLogik.Ultraviolet.Graphics.Texture2D,TwistedLogik.Ultraviolet.Rectangle,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="texture">The texture that contains the image.</param>
            <param name="textureRegion">The region of the image's texture which contains the image.</param>
            <param name="left">The distance in pixels between the left edge of the image and the left edge of the image's center segment.</param>
            <param name="top">The distance in pixels between the top edge of the image and the top edge of the image's center segment.</param>
            <param name="right">The distance in pixels between the right edge of the image and the right edge of the image's center segment.</param>
            <param name="bottom">The distance in pixels between the bottom edge of the image and the bottom edge of the image's center segment.</param>
            <returns>The new instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.TryParse(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9@)">
            <summary>
            Converts the string representation of a stretchable image into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="image">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Parse(System.String)">
            <summary>
            Converts the string representation of a stretchable image to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9@)">
            <summary>
            Converts the string representation of a stretchable image into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="image">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a stretchable image to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class.
            </summary>
            <param name="s">A string containing the image to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9"/> class that is equivalent to the specified string.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Left">
            <summary>
            Gets the distance in pixels between the left edge of the image and the left edge of the image's center segment.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Top">
            <summary>
            Gets the distance in pixels between the top edge of the image and the top edge of the image's center segment.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Right">
            <summary>
            Gets the distance in pixels between the right edge of the image and the right edge of the image's center segment.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Bottom">
            <summary>
            Gets the distance in pixels between the bottom edge of the image and the bottom edge of the image's center segment.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.Draw``2(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase{``0,``1},TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,``1)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StretchableImage9.UpdateMinimumRecommendedSize">
            <summary>
            Updates the value of the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.MinimumRecommendedSize"/> property.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource">
            <summary>
            Represents a source of string data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource"/> structure.
            </summary>
            <param name="s">The <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.String"/> that contains the string data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.#ctor(System.Text.StringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource"/> structure.
            </summary>
            <param name="sb">The <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.StringBuilder"/> that contains the string data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.#ctor(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource"/> structure.
            </summary>
            <param name="segment">The <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> that contains the string data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.CreateStringSegment">
            <summary>
            Creates a <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> structure that represents this string source.
            </summary>
            <returns>The <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.CreateStringSegmentFromSubstring(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> structure that represents a substring of this string source.
            </summary>
            <param name="start">The index of the first character in the substring that will be represented by the string segment.</param>
            <param name="length">The length of the substring that will be represented by the string segment.</param>
            <returns>The <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.CreateStringSegmentFromSameSource(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> structure with the same string source as this <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> but a different character range.
            </summary>
            <param name="start">The index of the first character in the created segment.</param>
            <param name="length">The number of characters in the created segment.</param>
            <returns>The <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> structure that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.Item(System.Int32)">
            <summary>
            Gets the character at the specified index within the string source.
            </summary>
            <param name="ix">The index of the character to retrieve.</param>
            <returns>The character at the specified index within the string source.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.String">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.String"/> that this source represents.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.StringBuilder">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.StringBuilder"/> that this source represents.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.Start">
            <summary>
            The starting index of the source substring.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource.Length">
            <summary>
            The length of the source substring.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage">
            <summary>
            Represents a region on a texture which corresponds to a particular image.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.Load(TwistedLogik.Ultraviolet.Content.ContentManager)">
            <summary>
            Loads the image's texture resource from the specified content manager.
            </summary>
            <param name="content">The content manager with which to load the image's texture resource.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.Texture">
            <summary>
            Gets the image's texture resource.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.TextureID">
            <summary>
            Gets or sets the asset identifier of the texture which contains the stretchable image data.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.MinimumRecommendedSize">
            <summary>
            Gets the image's minimum recommended size. Texture images may be drawn at sizes smaller than that specified
            by this property, but doing so will degrade their graphical quality.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.TextureRegionSize">
            <summary>
            Gets the size of the image's texture region.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.TextureRegion">
            <summary>
            Gets or sets the region of the image's texture which contains the image.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.IsValid">
            <summary>
            Gets a value indicating whether this object represents a valid image.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.IsLoaded">
            <summary>
            Gets a value indicating whether the image's texture resource has been loaded.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.Draw``2(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase{``0,``1},TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single,TwistedLogik.Ultraviolet.Color,System.Single,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteEffects,System.Single,``1)">
            <summary>
            Draws the image using the specified sprite batch.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatchBase`2"/> with which to draw the image.</param>
            <param name="position">The position at which to draw the image.</param>
            <param name="width">The width of the image in pixels.</param>
            <param name="height">The height of the image in pixels.</param>
            <param name="color">The image's color.</param>
            <param name="rotation">The image's rotation in radians.</param>
            <param name="origin">The image's point of origin.</param>
            <param name="effects">The image's rendering effects.</param>
            <param name="layerDepth">The image's layer depth.</param>
            <param name="data">The image's custom data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.ImageResolver(System.String,System.IFormatProvider)">
            <summary>
            Resolves a string into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage"/> class.
            </summary>
            <param name="value">The string value to resolve.</param>
            <param name="provider">An object that supplies culture-specific formatting information.</param>
            <returns>The resolved object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.TextureImage.CountNumericComponents(System.String)">
            <summary>
            Counts the number of numeric components in the specified image string.
            </summary>
            <param name="value">The string containing the image being parsed.</param>
            <returns>The number of numeric components in the specified image string.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.GlyphSearchMode">
            <summary>
            Represents the supported options for searching within a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream"/> for a particular glyph or insertion point.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.GlyphSearchMode.SearchGlyphs">
            <summary>
            Search for a glyph index.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.GlyphSearchMode.SearchGlyphsSnapToLine">
            <summary>
            Search for a glyph index, snapping the search point to the nearest line of text.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.GlyphSearchMode.SearchInsertionPoints">
            <summary>
            Search for an insertion point.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult">
            <summary>
            Represents the result of an incremental lexing or parsing operation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult"/> structure.
            </summary>
            <param name="affectedOffset">The index of the first output token that was affected by the operation.</param>
            <param name="affectedCount">The number of output tokens that were affected by the operation.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult.AffectedOffset">
            <summary>
            Gets the index of the first output token that was affected by the operation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult.AffectedCount">
            <summary>
            Gets the number of output tokens that were affected by the operation.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo">
            <summary>
            Represents the metadata for a line of formatted text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure.
            </summary>
            <param name="source">The command stream from which this line was retrieved.</param>
            <param name="lineIndex">The index of the line within its layout.</param>
            <param name="offsetInCommands">The index of the command that contains the line's metadata.</param>
            <param name="offsetInGlyphs">The index of the first glyph in the line.</param>
            <param name="x">The x-coordinate of the line's top-left corner relative to its layout area.</param>
            <param name="y">The y-coordinate of the line's top-left corner relative to its layout area.</param>
            <param name="width">The line's width in pixels.</param>
            <param name="height">The line's height in pixels.</param>
            <param name="lengthInCommands">The line's length in commands.</param>
            <param name="lengthInGlyphs">The line's length in glyphs.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.Source">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream"/> from which this line originated.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.LineIndex">
            <summary>
            Gets the index of the line within its layout.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.OffsetInCommands">
            <summary>
            Gets the index of the <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineInfo"/> command that contains this line's metadata.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.OffsetInGlyphs">
            <summary>
            Gets the index of the first glyph in the line.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.X">
            <summary>
            Gets the x-coordinate of the line's top-left corner relative to its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.Y">
            <summary>
            Gets the y-coordinate of the line's top-left corner relative to its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.Width">
            <summary>
            Gets the line's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.Height">
            <summary>
            Gets the line's height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.LengthInCommands">
            <summary>
            Gets the line's length in commands.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo.LengthInGlyphs">
            <summary>
            Gets the line's length in glyphs.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text"/> namespace contains types used for rendering formatted strings of text.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags">
            <summary>
            The set of flags used to specify how formatted text is rendered.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags.Standard">
            <summary>
            Standard alignment.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags.AlignLeft">
            <summary>
            Horizontally aligns the text against the left edge of the layout area.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags.AlignCenter">
            <summary>
            Horizontally aligns the text in the center of the layout area.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags.AlignRight">
            <summary>
            Horizontally aligns the text against the right edge of the layout area.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags.AlignTop">
            <summary>
            Vertically aligns the text against the top edge of the layout area.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags.AlignMiddle">
            <summary>
            Vertically aligns the text in the middle of the layout area.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags.AlignBottom">
            <summary>
            Vertically aligns the text against the bottom edge of the layout area.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo">
            <summary>
            Represents the metadata for an icon used by the text layout engine.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo"/> structure.
            </summary>
            <param name="icon">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> that represents the inline icon.</param>
            <param name="width">The width of the icon when rendered, in pixels.</param>
            <param name="height">The height of the icon when rendered, in pixels.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo.Equals(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo.Icon">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation"/> that represents the inline icon.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo.Width">
            <summary>
            Gets the width of the icon when rendered, in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo.Height">
            <summary>
            Gets the height of the icon when rendered, in pixels.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineBreakCommand">
            <summary>
            Represents a layout command to break a line.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineBreakCommand.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineBreakCommand"/> structure.
            </summary>
            <param name="length">The number of characters in the line break.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineBreakCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineBreakCommand.Length">
            <summary>
            Gets the number of characters in the line break.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutOptions">
            <summary>
            Represents a set of options which change how the layout engine lays out text.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutOptions.None">
            <summary>
            No layout options.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutOptions.Hyphenate">
            <summary>
            Indicates that words which are split across multiple lines should be hyphenated.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringBuilderCommand">
            <summary>
            Represents a layout command to change the source string builder.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringBuilderCommand.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringBuilderCommand"/> structure.
            </summary>
            <param name="sourceIndex">The index of the source string builder within the command stream's source registry.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringBuilderCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringBuilderCommand.SourceIndex">
            <summary>
            Gets the index of the source string builder within the command stream's source registry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringCommand">
            <summary>
            Represents a layout command to change the source string.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringCommand.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringCommand"/> structure.
            </summary>
            <param name="sourceIndex">The index of the source string within the command stream's source registry.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringCommand.SourceIndex">
            <summary>
            Gets the index of the source string within the command stream's source registry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutStyleCommand">
            <summary>
            Represents a lyout command to push a font onto the style stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutStyleCommand.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutStyleCommand"/> structure.
            </summary>
            <param name="styleIndex">The index of the style within the command stream's style registry.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutStyleCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutStyleCommand.StyleIndex">
            <summary>
            Gets the index of the style within the command stream's style registry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand">
            <summary>
            Represents a layout command containing information about the subsequent line of text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand"/> structure.
            </summary>
            <param name="offset">The horizontal offset of the line within its layout area.</param>
            <param name="lineWidth">The width of the line in pixels.</param>
            <param name="lineHeight">The height of the line in pixels.</param>
            <param name="lengthInCommands">The length of the line of text in commands.</param>
            <param name="lengthInGlyphs">The length of the line in glyphs.</param>
            <param name="terminatedByLineBreak">A value indicating whether this line is terminated by a line break.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.Offset">
            <summary>
            Gets the horizontal offset of the line of text within its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.LineWidth">
            <summary>
            Gets the width of the line in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.LineHeight">
            <summary>
            Gets the height of the line in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.LengthInCommands">
            <summary>
            Gets the length of the line of text in commands.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.LengthInGlyphs">
            <summary>
            Gets the length of the line of text in glyphs.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineInfoCommand.TerminatedByLineBreak">
            <summary>
            Gets a value indicating whether this line is terminated by a line break.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutBlockInfoCommand">
            <summary>
            Represents a layout command containing information about the subsequent block of text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutBlockInfoCommand.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutBlockInfoCommand"/> structure.
            </summary>
            <param name="offset">The vertical offset of the block of text within its layout area.</param>
            <param name="lengthInLines">The length of the block of text in lines.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutBlockInfoCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutBlockInfoCommand.Offset">
            <summary>
            Gets the vertical offset of the block of text within its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutBlockInfoCommand.LengthInLines">
            <summary>
            Gets the length of the block of text in lines.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutColorCommand">
            <summary>
            Represents a layout command to push a color onto the color stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutColorCommand.#ctor(TwistedLogik.Ultraviolet.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutColorCommand"/> structure.
            </summary>
            <param name="color">The color to push onto the color stack.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutColorCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutColorCommand.Color">
            <summary>
            Gets the color to push onto the color stack.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream">
            <summary>
            Represents a stream of commands produced by the text layout engine.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetLineInfo(System.Int32)">
            <summary>
            Gets a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the specified line of formatted text.
            </summary>
            <param name="index">The index of the line for which to retrieve metadata.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the specified line of formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetNextLineInfo(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo@)">
            <summary>
            Gets a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the line that comes immediately
            after the specified line.
            </summary>
            <param name="previous">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the previous line.</param>
            <param name="next">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the line that comes after <paramref name="previous"/>.</param>
            <returns><c>true</c> if a line was retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetNextLineInfoRef(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo@)">
            <summary>
            Gets a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the line that comes immediately
            after the specified line.
            </summary>
            <param name="previous">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the previous line.</param>
            <param name="next">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which describes the line that comes after <paramref name="previous"/>.</param>
            <returns><c>true</c> if a line was retrieved; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Seek(System.Int32)">
            <summary>
            Moves the stream to the command with the specified index.
            </summary>
            <param name="index">The index of the command to which the stream will seek.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType"/> that represents the type of command at the stream's new position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.SeekLine(System.Int32)">
            <summary>
            Moves the stream to the first command in the specified line of text.
            </summary>
            <param name="index">The index of the line to which to seek.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType"/> that represents the type of command at the stream's new position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.SeekEnd">
            <summary>
            Moves the stream past its last element.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.SeekNextCommand">
            <summary>
            Moves the stream to the next command.
            </summary>
            <returns><c>true</c> if the stream was able to seek to the next command; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.SeekNextLine">
            <summary>
            Moves the stream to the first command in the next line of text, if there is one.
            </summary>
            <returns><c>true</c> if the stream was able to seek to another line of text; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterStyle(TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle)">
            <summary>
            Registers a style with the command stream.
            </summary>
            <param name="name">The name of the style to register.</param>
            <param name="style">The style to register under the specified name.</param>
            <returns>The index of the specified style within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterIcon(TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo)">
            <summary>
            Registers an icon with the command stream.
            </summary>
            <param name="name">The name of the icon to register.</param>
            <param name="icon">The icon to register under the specified name.</param>
            <returns>The index of the specified icon within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterFont(TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)">
            <summary>
            Registers a font with the command stream.
            </summary>
            <param name="name">The name of the font to register.</param>
            <param name="font">The font to register under the specified name.</param>
            <returns>The index of the specified font within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterGlyphShader(TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader)">
            <summary>
            Registers a glyph shader with the command stream.
            </summary>
            <param name="name">The name of the glyph shader to register.</param>
            <param name="glyphShader">The glyph shader to register under the specified name.</param>
            <returns>The index of the specified glyph shader within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterSourceString(System.String)">
            <summary>
            Registers a source string with the command stream.
            </summary>
            <param name="source">The source string to register.</param>
            <returns>The index of the specified source string within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterSourceStringBuilder(System.Text.StringBuilder)">
            <summary>
            Registers a source string builder with the command stream.
            </summary>
            <param name="source">The source string builder to register.</param>
            <returns>The index of the specified source string builder within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetStyle(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Retrieves the registered style with the specified name.
            </summary>
            <param name="name">The name of the style to retrieve.</param>
            <returns>The registered style with the specified name.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetStyle(System.Int16)">
            <summary>
            Retrieves the registered style at the specified index within the command stream's internal registry.
            </summary>
            <param name="index">The index of the registered style to retrieve.</param>
            <returns>The registered style at the specified index within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetIcon(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Retrieves the registered icon with the specified name.
            </summary>
            <param name="name">The name of the icon to retrieve.</param>
            <returns>The registered icon with the specified name.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetIcon(System.Int16)">
            <summary>
            Retrieves the registered icon at the specified index within the command stream's internal registry.
            </summary>
            <param name="index">The index of the registered icon to retrieve.</param>
            <returns>The registered icon at the specified index within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetFont(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Retrieves the registered font with the specified name.
            </summary>
            <param name="name">The name of the font to retrieve.</param>
            <returns>The registered font with the specified name.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetFont(System.Int16)">
            <summary>
            Retrieves the registered font at the specified index within the command stream's internal registry.
            </summary>
            <param name="index">The index of the registered font to retrieve.</param>
            <returns>The registered font at the specified index within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetGlyphShader(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Retrieves the registered glyph shader with the specified name.
            </summary>
            <param name="name">The name of the glyph shader to retrieve.</param>
            <returns>The registered glyph shader with the specified name.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetGlyphShader(System.Int16)">
            <summary>
            Retrieves the registered glyph shader at the specified index within the command stream's internal registry.
            </summary>
            <param name="index">The index of the registered glyph shader to retrieve.</param>
            <returns>The registered glyph shader at the specified index within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetSourceString(System.Int16)">
            <summary>
            Retrieves the registered source string at the specified index within the command stream's internal registry.
            </summary>
            <param name="index">The index of the registered source string to retrieve.</param>
            <returns>The registered source string at the specified index within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.GetSourceStringBuilder(System.Int16)">
            <summary>
            Retrieves the registered source string builder at the specified index within the command stream's internal registry.
            </summary>
            <param name="index">The index of the registered source string builder to retrieve.</param>
            <returns>The registered source string builder at the specified index within the command stream's internal registry.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.AcquirePointers">
            <summary>
            Prepares the stream for reading or writing by acquiring pointers to its underlying buffers.
            While pointers are acquired, these buffers will be pinned in memory.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReleasePointers">
            <summary>
            Releases the pointers which were acquired by <see cref="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.AcquirePointers"/> and unpins
            the stream's underlying buffers.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Clear">
            <summary>
            Removes all commands from the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteBlockInfo">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.BlockInfo"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteLineInfo">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineInfo"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteText(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Text"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteIcon(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Icon"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteToggleBold">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleBold"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteToggleItalic">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleItalic"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePushStyle(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutStyleCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushStyle"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePushFont(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutFontCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushFont"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePushColor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutColorCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushColor"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePushGlyphShader(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutGlyphShaderCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushGlyphShader"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePopStyle">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopStyle"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePopFont">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopFont"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePopColor">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopColor"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WritePopGlyphShader">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopGlyphShader"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteChangeSourceString(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceString"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteChangeSourceStringBuilder(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSourceStringBuilderCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceStringBuilder"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteHyphen">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Hyphen"/> command to the current position in the stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.WriteLineBreak(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutLineBreakCommand)">
            <summary>
            Writes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineBreak"/> command to the current position in the stream.
            </summary>
            <param name="command">The command to write to the stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadBlockInfoCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.BlockInfo"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadLineInfoCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineInfo"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadTextCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Text"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadIconCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Icon"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadToggleBoldCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleBold"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadToggleItalicCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleItalic"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPushStyleCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushStyle"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPushFontCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushFont"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPushColorCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushColor"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPushGlyphShaderCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushGlyphShader"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPopStyleCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopStyle"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPopFontCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopFont"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPopColorCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopColor"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadPopGlyphShaderCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopGlyphShader"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadChangeSourceStringCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceString"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadChangeSourceStringBuilderCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceStringBuilder"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadHyphenCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Hyphen"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ReadLineBreakCommand">
            <summary>
            Reads a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineBreak"/> command from the current position in the command stream.
            </summary>
            <returns>The command that was read.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Settings">
            <summary>
            Gets the layout settings which were used to produce the command stream.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ParserOptions">
            <summary>
            Gets the parser options which were used to produce the command stream.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.SourceText">
            <summary>
            Gets the text that was processed by the layout engine.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Bounds">
            <summary>
            Gets the bounds of the text after layout has been performed, relative to the layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ActualWidth">
            <summary>
            Gets the total width, in pixels, of the text after layout has been performed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.ActualHeight">
            <summary>
            Gets the total height, in pixels, of the text after layout has been performed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.TotalLength">
            <summary>
            Gets the total length of the text which was laid out.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.StreamPositionInObjects">
            <summary>
            Gets the position of the command stream within its object index.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.StreamPositionInBytes">
            <summary>
            Gets the position of the command stream within its data buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Count">
            <summary>
            Gets the number of commands in the stream.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.LineCount">
            <summary>
            Gets the number of lines of text in the stream.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Data">
            <summary>
            Gets a pointer to the stream's current position within its internal data buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Data0">
            <summary>
            Gets a pointer to the beginning of the stream's internal data buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.HasMultipleFontStyles">
            <summary>
            Gets a value indicating whether the stream contains commands which change the style of the rendered font 
            </summary>
            <remarks>This value will be <c>true</c> if the stream contains any 
            <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleBold"/>,
            <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleItalic"/>,
            <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushFont"/>, 
            <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushStyle"/>, 
            <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopFont"/>, or 
            <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopStyle"/> commands.
            </remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.HasAcquiredPointers">
            <summary>
            Gets a value indicating whether the command stream has acquired pointers to its underlying buffers.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.InternalObjectStream">
            <summary>
            Gets the <see cref="T:TwistedLogik.Nucleus.Collections.Specialized.UnsafeObjectStream"/> which provides the command stream's storage.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterResource``1(TwistedLogik.Nucleus.Text.StringSegment,``0,System.Collections.Generic.List{``0},System.Collections.Generic.Dictionary{TwistedLogik.Nucleus.Text.StringSegment,System.Int16})">
            <summary>
            Registers a resource with the command stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.RegisterSource(System.Object)">
            <summary>
            Registers a source string or string builder with the command stream.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType">
            <summary>
            Represents the types of commands produced by the text layout engine.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.None">
            <summary>
            No command type.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.BlockInfo">
            <summary>
            Represents a command containing the metadata for a block of text.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineInfo">
            <summary>
            Represents a command containing the metadata for a line of text.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Text">
            <summary>
            Represents a command to print a string of text.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Icon">
            <summary>
            Represents a command to print an icon.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleBold">
            <summary>
            Represents a command to toggle the bold font style.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ToggleItalic">
            <summary>
            Represents a command to toggle the italic font style.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushStyle">
            <summary>
            Represents a command to push a style onto the style stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushFont">
            <summary>
            Represents a command to push a font onto the font stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushColor">
            <summary>
            Represents a command to push a color onto the color stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PushGlyphShader">
            <summary>
            Represents a command to push a glyph shader onto the glyph shader stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopStyle">
            <summary>
            Represents a command to pop a style off of the style stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopFont">
            <summary>
            Represents a command to pop a font off of the font stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopColor">
            <summary>
            Represents a command to pop a color off of the color stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.PopGlyphShader">
            <summary>
            Represents a command to pop a glyph shader off of the glyph shader stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceString">
            <summary>
            Represents a command to change the source string.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceStringBuilder">
            <summary>
            Represents a command to change the source string builder.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Hyphen">
            <summary>
            Represents a command to draw a hyphen character.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineBreak">
            <summary>
            Represents a command to insert a line break character.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine">
            <summary>
            Represents an engine for laying out formatted text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterStyle(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle)">
            <summary>
            Registers a style with the specified name.
            </summary>
            <param name="name">The name of the style to register.</param>
            <param name="style">The style to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterFont(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)">
            <summary>
            Registers the font with the specified name.
            </summary>
            <param name="name">The name of the font to register.</param>
            <param name="font">The font to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterIcon(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Registers the icon with the specified name.
            </summary>
            <param name="name">The name of the icon to register.</param>
            <param name="icon">The icon to register.</param>
            <param name="height">The width to which to scale the icon, or null to preserve the sprite's original width.</param>
            <param name="width">The height to which to scale the icon, or null to preserve the sprite's original height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterGlyphShader(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader)">
            <summary>
            Registers the glyph shader with the specified name.
            </summary>
            <param name="name">The name of the glyph shader to register.</param>
            <param name="shader">The glyph shader to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.UnregisterStyle(System.String)">
            <summary>
            Unregisters the style with the specified name.
            </summary>
            <param name="name">The name of the style to unregister.</param>
            <returns><c>true</c> if the style was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.UnregisterFont(System.String)">
            <summary>
            Unregisters the font with the specified name.
            </summary>
            <param name="name">The name of the font to unregister.</param>
            <returns><c>true</c> if the font was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.UnregisterIcon(System.String)">
            <summary>
            Unregisters the icon with the specified name.
            </summary>
            <param name="name">The name of the icon to unregister.</param>
            <returns><c>true</c> if the icon was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.UnregisterGlyphShader(System.String)">
            <summary>
            Unregisters the glyph shader with the specified name.
            </summary>
            <param name="name">The name of the glyph shader to unregister.</param>
            <returns><c>true</c> if the glyph shader was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.CalculateLayout(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Calculates a layout for the specified text.
            </summary>
            <param name="input">The parsed text which will be laid out according to the specified settings.</param>
            <param name="output">The layout command stream which will be populated with commands by this operation.</param>
            <param name="settings">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure which contains the settings for this operation.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ParseColor(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Parses a <see cref="T:TwistedLogik.Ultraviolet.Color"/> value from the specified string segment.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.GetHexDigitValue(System.Char)">
            <summary>
            Returns the numeric value associated with the specified hex digit.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.GetHexNumberValue(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Returns the numeric value associated with the specified hex number.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ClearLayoutStacks">
            <summary>
            Clears all of the layout engine's layout parameter stacks.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.PrepareInitialStyle(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Boolean@,System.Boolean@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            If the layout has an initial style defined, this method modifies the layout stacks to reflect it.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessTextToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.Text"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessIconToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.Icon"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessToggleBoldToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Boolean@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.ToggleBold"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessToggleItalicToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Boolean@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.ToggleItalic"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPushFontToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushFont"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPushColorToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushColor"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPushStyleToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Boolean@,System.Boolean@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushStyle"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPushGlyphShaderToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushGlyphShader"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPopFontToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopFont"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPopColorToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopColor"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPopStyleToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Boolean@,System.Boolean@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopStyle"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.ProcessPopGlyphShaderToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Int32@)">
            <summary>
            Processes a parser token with type <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopGlyphShader"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.PushStyle(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle,System.Boolean@,System.Boolean@)">
            <summary>
            Pushes a style onto the style stack.
            </summary>
            <param name="style">The style to push onto the stack.</param>
            <param name="bold">A value indicating whether the current font face is bold.</param>
            <param name="italic">A value indicating whether the current font face is italic.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.PushFont(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)">
            <summary>
            Pushes a font onto the font stack.
            </summary>
            <param name="font">The font to push onto the stack.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.PopStyle(System.Boolean@,System.Boolean@)">
            <summary>
            Pops a style off of the style stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.PopFont">
            <summary>
            Pops a font off of the font stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.PopStyleScope">
            <summary>
            Pops the current style scope off of the stacks.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.CreateStringSegmentFromCurrentSource(System.Int32,System.Int32)">
            <summary>
            Creates a <see cref="T:TwistedLogik.Nucleus.Text.StringSegment"/> from the current source text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.AccumulateText(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Int32@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Accumulates sequential text tokens into a single text command.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.IsSegmentForCurrentSource(TwistedLogik.Nucleus.Text.StringSegment)">
            <summary>
            Gets a value indicating whether the specified string segment uses the layout engine's current source string as its source.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.EmitChangeSourceIfNecessary(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken@)">
            <summary>
            Adds a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceString"/> or <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.ChangeSourceStringBuilder"/> command to the output
            stream if it is necessary to do so for the specified parser token.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.EmitTextIfNecessary(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Rectangle@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@)">
            <summary>
            Adds a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.Text"/> command to the output stream if the specified span of text has a non-zero length.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.GetFittedSubstring(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Int32,TwistedLogik.Nucleus.Text.StringSegment@,TwistedLogik.Ultraviolet.Size2@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState@,System.Boolean)">
            <summary>
            Given a string and an available space, returns the largest substring which will fit within that space.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.MeasureToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType,TwistedLogik.Nucleus.Text.StringSegment,System.Nullable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken})">
            <summary>
            Calculates the size of the specified parser token when rendered according to the current layout state.
            </summary>
            <param name="font">The current font face.</param>
            <param name="tokenType">The type of the current token.</param>
            <param name="tokenText">The text of the current token.</param>
            <param name="tokenNext">The next token after the current token, excluding command tokens.</param>
            <returns>The size of the specified token in pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterStyleWithCommandStream(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle@)">
            <summary>
            Registers the specified style with the command stream and returns its resulting index.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterIconWithCommandStream(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo@)">
            <summary>
            Registers the specified icon with the command stream and returns its resulting index.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterFontWithCommandStream(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont@)">
            <summary>
            Registers the specified font with the command stream and returns its resulting index.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.RegisterGlyphShaderWithCommandStream(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader@)">
            <summary>
            Registers the specified glyph shader with the command stream and returns its resulting index.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.GetNextTextToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,System.Int32)">
            <summary>
            Gets the next text token after the specified index, if one exists and there are no intervening
            visible tokens (excluding commands).
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.GetCurrentFont(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@,System.Boolean,System.Boolean,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace@)">
            <summary>
            Gets the currently active font.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState">
            <summary>
            Represents the state of the layout engine during a text layout operation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.WriteBlockInfo(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Writes the specified metadata to the <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.BlockInfo"/> command for this text.
            </summary>
            <param name="output">The command stream to which commands are being written.</param>
            <param name="blockWidth">The width of the block in pixels.</param>
            <param name="blockHeight">The height of the block in pixels.</param>
            <param name="lengthInLines">The length of the block of text in lines.</param>
            <param name="settings">The layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.WriteLineInfo(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Writes the specified metadata to the <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineInfo"/> command for this text.
            </summary>
            <param name="output">The command stream to which commands are being written.</param>
            <param name="lineWidth">The width of the line in pixels.</param>
            <param name="lineHeight">The height of the line in pixels.</param>
            <param name="lengthInCommands">The length of the line of text in commands.</param>
            <param name="lengthInGlyphs">The length of the line of text in glyphs.</param>
            <param name="terminatedByLineBreak">A value indicating whether the line is terminated by a line break.</param>
            <param name="settings">The layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.AdvanceLineToNextCommand">
            <summary>
            Advances the layout state past the current layout command, assuming that the command is a styling command
            with zero size and zero length in characters.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.AdvanceLineToNextCommand(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Advances the layout state past the current layout command.
            </summary>
            <param name="width">The width in pixels which the command contributes to the current line.</param>
            <param name="height">The height in pixels which the command contributes to the current line.</param>
            <param name="lengthInCommands">The number of layout commands which were ultimately produced in the output stream by this command.</param>
            <param name="lengthInText">The number of characters of text which are represented by this command.</param>
            <param name="isLineBreak">A value indicating whether the command is a line break.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.AdvanceLayoutToNextLine(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Advances the layout state to the next line of text.
            </summary>
            <param name="output">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream"/> which is being populated.</param>
            <param name="settings">The current layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.AdvanceLayoutToNextLineWithBreak(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Advances the layout state to the next line of text after inserting a line break character at the end of the current line.
            </summary>
            <param name="output">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream"/> which is being populated.</param>
            <param name="length">The number of characters in the line break.</param>
            <param name="settings">The current layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.FinalizeLine(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Finalizes the current line by writing the line's metadata to the command stream and resetting
            state values which are associated with the current line.
            </summary>
            <param name="output">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream"/> which is being populated.</param>
            <param name="settings">The current layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.FinalizeLayout(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Finalizes the layout by writing the block's metadata to the command stream.
            </summary>
            <param name="output">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream"/> which is being populated.</param>
            <param name="settings">The current layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.ReplaceLastBreakingSpaceWithLineBreak(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            Replaces the last breaking space on the current line with a line break.
            </summary>
            <param name="output">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream"/> which is being populated.</param>
            <param name="settings">The current layout settings.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.PositionX">
            <summary>
            Gets or sets the x-coordinate at which the next token will be placed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.PositionY">
            <summary>
            Gets or sets the y-coordinate at which the next token will be placed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineInfoCommandIndex">
            <summary>
            Gets or sets the index of the command token that contains the metadata for the current line.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineCount">
            <summary>
            Gets or sets the number of lines in the laid-out text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineWidth">
            <summary>
            Gets or sets the width of the current line in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineHeight">
            <summary>
            Gets or sets the height of the current line in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineHeightTentative">
            <summary>
            Gets or sets the tentative height of the line in pixels. This height will only be used if
            the line has no rendered tokens.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineLengthInText">
            <summary>
            Gets or sets the number of text characters on the current line.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineLengthInCommands">
            <summary>
            Gets or sets the length of the current line in commands.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.ActualWidth">
            <summary>
            Gets or sets the width of the area which is occupied by text after layout is performed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.ActualHeight">
            <summary>
            Gets or sets the height of the area which is occupied by text after layout is performed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.TotalLength">
            <summary>
            Gets or sets the total length of the text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.ParserTokenOffset">
            <summary>
            Gets or sets the offset within the current parser token at which to begin processing.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineBreakCommand">
            <summary>
            Gets or sets the index of the command that contains the point at which the current line will break.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineBreakOffset">
            <summary>
            Gets or sets the offset within <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.LineBreakCommand"/> at which the line will break.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.BrokenTextSizeBeforeBreak">
            <summary>
            Gets or sets the size of the pre-break portion of the text which contains this line's break point.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.BrokenTextSizeAfterBreak">
            <summary>
            Gets or sets the size of the post-break portion of the text which contains this line's break point.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.Bounds">
            <summary>
            Gets the bounds of the text after layout has been performed, relative to the layout area.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine.LayoutState.FixHorizontalAlignmentForUnconstrainedLayout(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@)">
            <summary>
            This method corrects the offsets of lines in a layout which is right- or center-aligned but which
            did not have a constrained horizontal layout space.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutGlyphShaderCommand">
            <summary>
            Represents a lyout command to push a glyph shader onto the glyph shader stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutGlyphShaderCommand.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutGlyphShaderCommand"/> structure.
            </summary>
            <param name="glyphShaderIndex">The index of the glyph shader within the command stream's glyph shader registry.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutGlyphShaderCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutGlyphShaderCommand.GlyphShaderIndex">
            <summary>
            Gets the index of the glyph shader within the command stream's glyph shader registry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutFontCommand">
            <summary>
            Represents a lyout command to push a font onto the font stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutFontCommand.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutFontCommand"/> structure.
            </summary>
            <param name="fontIndex">The index of the font within the command stream's font registry.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutFontCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutFontCommand.FontIndex">
            <summary>
            Gets the index of the font within the command stream's font registry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand">
            <summary>
            Represents a layout command to print an icon.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.#ctor(System.Int16,System.Int32,System.Int32,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand"/> structure.
            </summary>
            <param name="iconIndex">The index of the icon within the command stream's icon registry.</param>
            <param name="iconX">The x-coordinate of the icon's origin relative to its layout area.</param>
            <param name="iconY">The y-coordinate of the icon's origin relative to its layout area.</param>
            <param name="iconWidth">The icon's width in pixels.</param>
            <param name="iconHeight">The icon's height in pixels.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.GetAbsolutePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the absolute position of the icon when rendered.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="y">The y-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="lineHeight">The height of the line of text that is being rendered.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2"/> that describes the absolute position of the icon.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.GetAbsolutePositionVector(System.Single,System.Single,System.Int32)">
            <summary>
            Gets the absolute position of the icon when rendered.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="y">The y-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="lineHeight">The height of the line of text that is being rendered.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> that describes the absolute position of the icon.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.GetAbsoluteBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the absolute bounds of the icon when rendered.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="y">The y-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="lineHeight">The height of the line of text that is being rendered.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that describes the absolute bounds of the icon.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.IconIndex">
            <summary>
            Gets the index of the icon within the command stream's icon registry.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.IconX">
            <summary>
            Gets the x-coordinate of the icon's origin relative to its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.IconY">
            <summary>
            Gets the y-coordinate of the icon's origin relative to its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.IconWidth">
            <summary>
            Gets the icon's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.IconHeight">
            <summary>
            Gets the icon's height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutIconCommand.Bounds">
            <summary>
            Gets the bounds of the icon drawn by this command relative to the layout area.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings">
            <summary>
            Represents the settings used to specify the behavior of a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutEngine"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
            <param name="fontStyle">The initial font style.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
            <param name="initialLayoutStyle">The name of the initial layout style, or <c>null</c> to use no initial layout style.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
            <param name="fontStyle">The initial font style.</param>
            <param name="initialLayoutStyle">The name of the initial layout style, or <c>null</c> to use no initial layout style.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutOptions)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
            <param name="options">A set of options which can be used to modify the behavior of the layout engine.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutOptions,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
            <param name="options">A set of options which can be used to modify the behavior of the layout engine.</param>
            <param name="fontStyle">The initial font style.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutOptions,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
            <param name="options">A set of options which can be used to modify the behavior of the layout engine.</param>
            <param name="initialLayoutStyle">The name of the initial layout style, or <c>null</c> to use no initial layout style.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Int32},System.Nullable{System.Int32},TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutOptions,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings"/> structure.
            </summary>
            <param name="font">The default font.</param>
            <param name="width">The width of the layout area.</param>
            <param name="height">The height of the layout area.</param>
            <param name="flags">A set of flags that specify how to render and align the text.</param>
            <param name="options">A set of options which can be used to modify the behavior of the layout engine.</param>
            <param name="fontStyle">The initial font style.</param>
            <param name="initialLayoutStyle">The name of the initial layout style, or <c>null</c> to use no initial layout style.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.Font">
            <summary>
            Gets the default font.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.Width">
            <summary>
            Gets the width of the layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.Height">
            <summary>
            Gets the height of the layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.Flags">
            <summary>
            Gets the set of flags used to specify how to render and align the text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.Style">
            <summary>
            Gets the initial font style.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.Options">
            <summary>
            Gets the layout options.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings.InitialLayoutStyle">
            <summary>
            Gets the name of the text's initial layout style.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand">
            <summary>
            Represents a layout command to print a string of text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int16,System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand"/> structure.
            </summary>
            <param name="textOffset">The offset from the beginning of the source string to the beginning of the
            substring which will be rendered by this command.</param>
            <param name="textLength">The number of characters that will be rendered by this command.</param>
            <param name="textX">The x-coordinate of the top-left corner of the text relative to its layout area.</param>
            <param name="textY">The y-coordinate of the top-left corner of the text relative to its layout area.</param>
            <param name="textWidth">The width of the text in pixels.</param>
            <param name="textHeight">The height of the text in pixels.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.GetAbsolutePosition(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the absolute position of the text when rendered.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="y">The y-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="lineHeight">The height of the line of text that is being rendered.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2"/> that describes the absolute position of the text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.GetAbsolutePositionVector(System.Single,System.Single,System.Int32)">
            <summary>
            Gets the absolute position of the text when rendered.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="y">The y-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="lineHeight">The height of the line of text that is being rendered.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> that describes the absolute position of the text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.GetAbsoluteBounds(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the absolute bounds of the text when rendered.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="y">The y-coordinate of the top-left corner of the line of text that is being rendered.</param>
            <param name="lineHeight">The height of the line of text that is being rendered.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that describes the absolute bounds of the text.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.CommandType">
            <summary>
            Gets the command type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.TextOffset">
            <summary>
            Gets the offset from the beginning of the source string to the beginning of the substring
            which will be rendered by this command.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.TextLength">
            <summary>
            Gets the number of characters that will be rendered by this command.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.TextX">
            <summary>
            Gets the x-coordinate of the top-left corner of the text relative to its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.TextY">
            <summary>
            Gets the y-coordinate of the top-left corner of the text relative to its layout area.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.TextWidth">
            <summary>
            Gets the width of the text in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.TextHeight">
            <summary>
            Gets the height of the text in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutTextCommand.Bounds">
            <summary>
            Gets the bounds of the text drawn by this command relative to the layout area.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken">
            <summary>
            Represents a token of formatted text after it has been positioned by the layout engine.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.#ctor(TwistedLogik.Nucleus.Text.StringSegment,TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,System.Nullable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextIconInfo},TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader,System.Nullable{TwistedLogik.Ultraviolet.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken"/> structure.
            </summary>
            <param name="text">The token's text.</param>
            <param name="bounds">The token's bounds relative to its layout region.</param>
            <param name="fontFace">The token's font face.</param>
            <param name="icon">The token's icon.</param>
            <param name="glyphShader">The token's glyph shader.</param>
            <param name="color">The token's color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.MatchesStyle(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken)">
            <summary>
            Gets a value indicating whether this token's style matches another token's style.
            </summary>
            <param name="token">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken"/> to compare against this token.</param>
            <returns><c>true</c> if the tokens have matching styles; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.MatchesStyleRef(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken@)">
            <summary>
            Gets a value indicating whether this token's style matches another token's style.
            </summary>
            <param name="token">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken"/> to compare against this token.</param>
            <returns><c>true</c> if the tokens have matching styles; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.GetBounds(System.Int32,System.Int32)">
            <summary>
            Gets the token's bounding rectangle, translated to the specified position.
            </summary>
            <param name="x">The x-coordinate to which to translate the token's bounding rectangle.</param>
            <param name="y">The y-coordinate to which to translate the token's bounding rectangle.</param>
            <returns>The token's bounding rectangle.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.Text">
            <summary>
            Gets the token's text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.Bounds">
            <summary>
            Gets the token's bounds relative to its layout region.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.FontFace">
            <summary>
            Gets the token's font face.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.Icon">
            <summary>
            Gets the token's icon.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.GlyphShader">
            <summary>
            Gets the token's glyph shader.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutToken.Color">
            <summary>
            Gets the token's color.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser">
            <summary>
            Represents a lexer/parser which takes a string as input and produces a stream of formatted text tokens.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.Parse(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <param name="output">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ParseIncremental(System.String,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Incrementally lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <param name="start">The index of the first character that was changed.</param>
            <param name="count">The number of characters that were changed.</param>
            <param name="result">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult"/> structure that represents the result of the operation.</returns>
            <remarks>Incremental parsing provides a performance benefit when relatively small changes are being made
            to a large source text. Only tokens which are potentially influenced by changes within the specified substring
            of the source text are re-parsed by this operation.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.Parse(System.Text.StringBuilder,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.Text.StringBuilder"/> to parse.</param>
            <param name="output">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ParseIncremental(System.Text.StringBuilder,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Incrementally lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.Text.StringBuilder"/> to parse.</param>
            <param name="start">The index of the first character that was changed.</param>
            <param name="count">The number of characters that were changed.</param>
            <param name="result">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult"/> structure that represents the result of the operation.</returns>
            <remarks>Incremental parsing provides a performance benefit when relatively small changes are being made
            to a large source text. Only tokens which are potentially influenced by changes within the specified substring
            of the source text are re-parsed by this operation.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.Parse(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource"/> to parse.</param>
            <param name="output">The parsed token stream.</param>
            <param name="index">The index at which to begin parsing the input string.</param>
            <param name="count">the number of characters to parse.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ParseIncremental(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Incrementally lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource"/> to parse.</param>
            <param name="start">The index of the first character that was changed.</param>
            <param name="count">The number of characters that were changed.</param>
            <param name="output">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult"/> structure that represents the result of the operation.</returns>
            <remarks>Incremental parsing provides a performance benefit when relatively small changes are being made
            to a large source text. Only tokens which are potentially influenced by changes within the specified substring
            of the source text are re-parsed by this operation.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsStartOfNewline(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the start of a newline token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the start of a newline token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsStartOfNonBreakingSpace(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the start of a non-breaking white space token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the start of a non-breaking white space token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsEndOfNonBreakingSpace(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the end of a non-breaking white space token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the end of a non-breaking white space token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsStartOfBreakingSpace(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the start of a breaking white space token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the start of a breaking white space token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsEndOfBreakingSpace(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the end of a breaking white space token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the end of a breaking white space token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsEscapedPipe(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Gets a value indicating whether the specified character is an escaped pipe.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
            <returns><c>true</c> if the specified character is an escaped pipe; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsStartOfCommand(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the start of a command token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the start of a command token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsEndOfCommand(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the end of a command token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the end of a command token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsStartOfWord(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the start of a word token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the start of a word token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.IsEndOfWord(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,System.Int32)">
            <summary>
            Gets a value indicating whether the specified character is the end of a word token.
            </summary>
            <param name="input">The input string.</param>
            <param name="ix">The index of the character to evaluate.</param>
            <returns><c>true</c> if the specified character is the end of a word token; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ConsumeNewlineToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,System.Int32@)">
            <summary>
            Retrieves a newline token from the input stream, beginning at the specified character.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The parser options.</param>
            <param name="ix">The index at which to begin consuming token characters.</param>
            <returns>The token that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ConsumeNonBreakingSpaceToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,System.Int32@)">
            <summary>
            Retrieves a non-breaking white space token from the input stream, beginning at the specified character.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The parser options.</param>
            <param name="ix">The index at which to begin consuming token characters.</param>
            <returns>The token that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ConsumeBreakingSpaceToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,System.Int32@)">
            <summary>
            Retrieves a breaking white space token from the input stream, beginning at the specified character.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The parser options.</param>
            <param name="ix">The index at which to begin consuming token characters.</param>
            <returns>The token that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ConsumeEscapedPipeToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,System.Int32@)">
            <summary>
            Retrieves an escaped pipe token from the input stream, beginning at the specified character.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The parser options.</param>
            <param name="ix">The index at which to begin consuming token characters.</param>
            <returns>The token that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ConsumeCommandToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,System.Int32@)">
            <summary>
            Retrieves a command token from the input stream, beginning at the specified character.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The parser options.</param>
            <param name="ix">The index at which to begin consuming token characters.</param>
            <returns>The token that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ConsumeWordToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,System.Int32@)">
            <summary>
            Retrieves a word token from the input stream, beginning at the specified character.
            </summary>
            <param name="input">The input string.</param>
            <param name="options">The parser options.</param>
            <param name="ix">The index at which to begin consuming token characters.</param>
            <returns>The token that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ParseLexerToken(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType,TwistedLogik.Nucleus.Text.StringSegment,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Parses a lexer token.
            </summary>
            <param name="tokenType">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType"/> value specifying the type of token produced by the lexer.</param>
            <param name="tokenText">The text associated with the lexer token.</param>
            <param name="sourceOffset">The offset of the first character in the source text that produced the token.</param>
            <param name="sourceLength">The number of characters in the source text that produced the token.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
            <returns>The parsed token.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.ParseCommandToken(TwistedLogik.Nucleus.Text.StringSegment,System.Int32,System.Int32)">
            <summary>
            Parses a command token.
            </summary>
            <param name="tokenText">The text associated with the lexer token.</param>
            <param name="sourceOffset">The offset of the first character in the source text that produced the token.</param>
            <param name="sourceLength">The number of characters in the source text that produced the token.</param>
            <returns>The parsed token.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.FindTokensInfluencedBySubstring(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,System.Int32,System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Finds the index of the first and last tokens which are potentially affected by changes in the specified substring of the source text.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType">
            <summary>
            Represents the types of tokens produced by the formatted text lexer.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType.NewLine">
            <summary>
            The token represents a line break.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType.BreakingWhiteSpace">
            <summary>
            The token represents breaking white space.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType.NonBreakingWhiteSpace">
            <summary>
            The token represents non-breaking white space.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType.Word">
            <summary>
            The token represents a word containing letters, numbers, or other characters.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType.Pipe">
            <summary>
            The token represents an escaped pipe (|) symbol.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser.LexedTokenType.Command">
            <summary>
            The token represents a parser command.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions">
            <summary>
            Represents the set of options that can be specified to control text parsing.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions.None">
            <summary>
            No parser options specified.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions.IgnoreCommandCodes">
            <summary>
            Specifies that the parser should treat command codes as if they were raw text.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream">
            <summary>
            Represents the token stream produced by parsing formatted text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.GetEnumerator">
            <summary>
            Gets an enumerator for the result.
            </summary>
            <returns>An enumerator for the result.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Graphics#Graphics2D#Text#TextParserToken}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.Clear">
            <summary>
            Clears the token stream.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.Add(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken)">
            <summary>
            Adds an item to the token stream.
            </summary>
            <param name="item">The item to add to the token stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index from the token stream.
            </summary>
            <param name="index">The index of the item to remove from the token stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes the specified range of items from the token stream.
            </summary>
            <param name="index">The index of the first element to remove from the token stream.</param>
            <param name="count">The number of items to remove from the token stream.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken})">
            <summary>
            Inserts a range of elements into the token stream at the specified index.
            </summary>
            <param name="index">The index at which to begin inserting elements.</param>
            <param name="collection">The collection of elements to insert into the token stream.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.Item(System.Int32)">
            <summary>
            Gets the item at the specified index within the token stream.
            </summary>
            <param name="ix">The index of the token to retrieve.</param>
            <returns>The item at the specified index within the token stream.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.Count">
            <summary>
            Gets the number of items in the token stream.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.SourceText">
            <summary>
            Gets the source text that was parsed.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream.ParserOptions">
            <summary>
            Gets the parser options which were used to produce this token stream.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken">
            <summary>
            Represents a token produced by parsing formatted text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType,TwistedLogik.Nucleus.Text.StringSegment,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken"/> structure.
            </summary>
            <param name="tokenType">The token's type.</param>
            <param name="text">The token's text.</param>
            <param name="sourceOffset">The offset of the first character in the source text that produced this token.</param>
            <param name="sourceLength">The number of characters in the source text that produced this token.</param>
            <param name="isNonBreakingSpace">A value indicating whether this token represents a non-breaking space.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.ToString">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.TokenType">
            <summary>
            Gets the token's type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.Text">
            <summary>
            Gets the token's text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.SourceOffset">
            <summary>
            Gets the offset of the first character in the source text that produced this token.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.SourceLength">
            <summary>
            Gets the number of characters in the source text that produced this token.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.IsWhiteSpace">
            <summary>
            Gets a value indicating whether this token represents a white space character.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.IsNewLine">
            <summary>
            Gets a value indicating whether this token represents a new line character.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserToken.IsNonBreakingSpace">
            <summary>
            Gets a value indicating whether this token represents non-breaking white space.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType">
            <summary>
            Represents the types of parser tokens produced by <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParser"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.Text">
            <summary>
            The token contains text to be rendered.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.Icon">
            <summary>
            The token contains an icon to be drawn.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.ToggleBold">
            <summary>
            The token toggles whether the current font is bold.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.ToggleItalic">
            <summary>
            The token toggles whether the current font is italic.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushFont">
            <summary>
            The token pushes a font onto the font stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushColor">
            <summary>
            The token pushes a color onto the color stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushStyle">
            <summary>
            The token pushes a style onto the style stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PushGlyphShader">
            <summary>
            The token pushes a glyph shader onto the glyph shader stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopFont">
            <summary>
            The token pops a font off of the font stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopColor">
            <summary>
            The token pops a color off of the color stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopStyle">
            <summary>
            The token pops a style off of the style stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenType.PopGlyphShader">
            <summary>
            The token pops a glyph shader off of the glyph shader stack.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer">
            <summary>
            Contains methods for rendering formatted text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetLineAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2,System.Boolean)">
            <summary>
            Gets the index of the line of text at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="stretch">If <c>true</c>, a line is considered to fill the entire horizontal extent of the 
            layout area, regardless of the line's actual width.</param>
            <returns>The index of the line of text at the specified layout-relative position, 
            or <c>null</c> if the specified position is not contained by any line.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetLineAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Point2,System.Boolean)">
            <summary>
            Gets the index of the line of text at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="stretch">If <c>true</c>, a line is considered to fill the entire horizontal extent of the 
            layout area, regardless of the line's actual width.</param>
            <returns>The index of the line of text at the specified layout-relative position, 
            or <c>null</c> if the specified position is not contained by any line.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetLineAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Gets the index of the line of text at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="x">The x-coordinate to evaluate.</param>
            <param name="y">The y-coordinate to evaluate.</param>
            <param name="stretch">If <c>true</c>, a line is considered to fill the entire horizontal extent of the 
            layout area, regardless of the line's actual width.</param>
            <returns>The index of the line of text at the specified layout-relative position, 
            or <c>null</c> if the specified position is not contained by any line.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2,System.Nullable{System.Int32}@)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified position, regardless of
            whether the position corresponds to an actual glyph.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2,System.Boolean,System.Nullable{System.Int32}@)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="snapToLine">A value indicating whether the search position should be snapped to the nearest line of text.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified position, regardless of
            whether the position corresponds to an actual glyph.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Point2,System.Nullable{System.Int32}@)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified position, regardless of
            whether the position corresponds to an actual glyph.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Point2,System.Boolean,System.Nullable{System.Int32}@)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="snapToLine">A value indicating whether the search position should be snapped to the nearest line of text.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified position, regardless of
            whether the position corresponds to an actual glyph.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="x">The x-coordinate to evaluate.</param>
            <param name="y">The y-coordinate to evaluate.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Nullable{System.Int32}@)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="x">The x-coordinate to evaluate.</param>
            <param name="y">The y-coordinate to evaluate.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified position, regardless of
            whether the position corresponds to an actual glyph.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Boolean,System.Nullable{System.Int32}@)">
            <summary>
            Gets the index of the glyph at the specified layout-relative position.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="x">The x-coordinate to evaluate.</param>
            <param name="y">The y-coordinate to evaluate.</param>
            <param name="snapToLine">A value indicating whether the search position should be snapped to the nearest line of text.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified position, regardless of
            whether the position corresponds to an actual glyph.</param>
            <returns>The index of the glyph at the specified layout-relative position,
            or <c>nulll</c> if the specified position is not contained by any glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Gets the index of the insertion point which is closest to the specified layout-relative position.
            </summary>
            <remarks>An insertion point represents a position at which new text can be inserted into the formatted text, starting
            at index 0 (before the first character) and ending at <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Count"/>, inclusive (after the last character).</remarks>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <returns>The index of the insertion point which is closest to the specified layout-relative position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2,System.Int32@)">
            <summary>
            Gets the index of the insertion point which is closest to the specified layout-relative position.
            </summary>
            <remarks>An insertion point represents a position at which new text can be inserted into the formatted text, starting
            at index 0 (before the first character) and ending at <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Count"/>, inclusive (after the last character).</remarks>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified insertion point.</param>
            <returns>The index of the insertion point which is closest to the specified layout-relative position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Gets the index of the insertion point which is closest to the specified layout-relative position.
            </summary>
            <remarks>An insertion point represents a position at which new text can be inserted into the formatted text, starting
            at index 0 (before the first character) and ending at <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Count"/>, inclusive (after the last character).</remarks>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <returns>The index of the insertion point which is closest to the specified layout-relative position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Point2,System.Int32@)">
            <summary>
            Gets the index of the insertion point which is closest to the specified layout-relative position.
            </summary>
            <remarks>An insertion point represents a position at which new text can be inserted into the formatted text, starting
            at index 0 (before the first character) and ending at <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Count"/>, inclusive (after the last character).</remarks>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="position">The position to evaluate.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified insertion point.</param>
            <returns>The index of the insertion point which is closest to the specified layout-relative position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32)">
            <summary>
            Gets the index of the insertion point which is closest to the specified layout-relative position.
            </summary>
            <remarks>An insertion point represents a position at which new text can be inserted into the formatted text, starting
            at index 0 (before the first character) and ending at <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Count"/>, inclusive (after the last character).</remarks>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="x">The x-coordinate to evaluate.</param>
            <param name="y">The y-coordinate to evaluate.</param>
            <returns>The index of the insertion point which is closest to the specified layout-relative position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets the index of the insertion point which is closest to the specified layout-relative position.
            </summary>
            <remarks>An insertion point represents a position at which new text can be inserted into the formatted text, starting
            at index 0 (before the first character) and ending at <see cref="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream.Count"/>, inclusive (after the last character).</remarks>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="x">The x-coordinate to evaluate.</param>
            <param name="y">The y-coordinate to evaluate.</param>
            <param name="lineAtPosition">The index of the line of text that contains the specified insertion point.</param>
            <returns>The index of the insertion point which is closest to the specified layout-relative position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetLineBounds(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32)">
            <summary>
            Gets a layout-relative bounding box for the specified line.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="index">The index of the line for which to retrieve a bounding box.</param>
            <returns>A layout-relative bounding box for the specified line.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphBounds(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Boolean)">
            <summary>
            Gets a layout-relative bounding box for the specified glyph.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="index">The index of the glyph for which to retrieve a bounding box.</param>
            <param name="spanLineHeight">A value indicating whether the returned bounds should span the height of the line.</param>
            <returns>A layout-relative bounding box for the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphBounds(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo@,System.Boolean)">
            <summary>
            Gets a layout-relative bounding box for the specified glyph.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="index">The index of the glyph for which to retrieve a bounding box.</param>
            <param name="lineInfo">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which will be populated with metadata describing the line that contains the glyph.</param>
            <param name="spanLineHeight">A value indicating whether the returned bounds should span the height of the line.</param>
            <returns>A layout-relative bounding box for the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointBounds(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32)">
            <summary>
            Gets a layout-relative bounding box for the specified insertion point.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="index">The index of the insertion point for which to retrieve a bounding box.</param>
            <returns>A layout-relative bounding box for the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetInsertionPointBounds(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo@,System.Nullable{TwistedLogik.Ultraviolet.Rectangle}@)">
            <summary>
            Gets a layout-relative bounding box for the specified insertion point.
            </summary>
            <param name="input">The command stream that contains the layout information to evaluate.</param>
            <param name="index">The index of the insertion point for which to retrieve a bounding box.</param>
            <param name="lineInfo">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.LineInfo"/> structure which will be populated with metadata describing the line that contains the insertion point.</param>
            <param name="glyphBounds">The bounding box of the glyph that comes after the insertion point, or <c>null</c> if there is no such glyph.</param>
            <returns>A layout-relative bounding box for the specified glyph.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.RegisterStyle(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle)">
            <summary>
            Registers a style with the specified name.
            </summary>
            <param name="name">The name of the style to register.</param>
            <param name="style">The style to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.UnregisterStyle(System.String)">
            <summary>
            Unregisters the style with the specified name.
            </summary>
            <param name="name">The name of the style to unregister.</param>
            <returns><c>true</c> if the style was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.RegisterFont(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)">
            <summary>
            Registers the font with the specified name.
            </summary>
            <param name="name">The name of the font to register.</param>
            <param name="font">The font to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.UnregisterFont(System.String)">
            <summary>
            Unregisters the font with the specified name.
            </summary>
            <param name="name">The name of the font to unregister.</param>
            <returns><c>true</c> if the font was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.RegisterIcon(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteAnimation,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Registers the icon with the specified name.
            </summary>
            <param name="name">The name of the icon to register.</param>
            <param name="icon">The icon to register.</param>
            <param name="height">The width to which to scale the icon, or null to preserve the sprite's original width.</param>
            <param name="width">The height to which to scale the icon, or null to preserve the sprite's original height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.UnregisterIcon(System.String)">
            <summary>
            Unregisters the icon with the specified name.
            </summary>
            <param name="name">The name of the icon to unregister.</param>
            <returns><c>true</c> if the icon was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.RegisterGlyphShader(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader)">
            <summary>
            Registers the glyph shader with the specified name.
            </summary>
            <param name="name">The name of the glyph shader to register.</param>
            <param name="shader">The glyph shader to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.UnregisterGlyphShader(System.String)">
            <summary>
            Unregisters the glyph shader with the specified name.
            </summary>
            <param name="name">The name of the glyph shader to unregister.</param>
            <returns><c>true</c> if the glyph shader was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Parse(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <param name="output">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.ParseIncremental(System.String,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Incrementally lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.String"/> to parse.</param>
            <param name="start">The index of the first character that was changed.</param>
            <param name="count">The number of characters that were changed.</param>
            <param name="output">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult"/> structure that represents the result of the operation.</returns>
            <remarks>Incremental parsing provides a performance benefit when relatively small changes are being made
            to a large source text. Only tokens which are potentially influenced by changes within the specified substring
            of the source text are re-parsed by this operation.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Parse(System.Text.StringBuilder,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.Text.StringBuilder"/> to parse.</param>
            <param name="output">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.ParseIncremental(System.Text.StringBuilder,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions)">
            <summary>
            Incrementally lexes and parses the specified string.
            </summary>
            <param name="input">The <see cref="T:System.Text.StringBuilder"/> to parse.</param>
            <param name="start">The index of the first character that was changed.</param>
            <param name="count">The number of characters that were changed.</param>
            <param name="output">The parsed token stream.</param>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions"/> values that specify how the text should be parsed.</param>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.IncrementalResult"/> structure that represents the result of the operation.</returns>
            <remarks>Incremental parsing provides a performance benefit when relatively small changes are being made
            to a large source text. Only tokens which are potentially influenced by changes within the specified substring
            of the source text are re-parsed by this operation.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.CalculateLayout(System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Calculates a layout for the specified text.
            </summary>
            <param name="input">The string of text to lay out.</param>
            <param name="output">The command stream representing the formatted text.</param>
            <param name="settings">The layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.CalculateLayout(System.Text.StringBuilder,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Calculates a layout for the specified text.
            </summary>
            <param name="input">The string of text to lay out.</param>
            <param name="output">The command stream representing the formatted text.</param>
            <param name="settings">The layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.CalculateLayout(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Calculates a layout for the specified text.
            </summary>
            <param name="input">The parsed text to lay out.</param>
            <param name="output">The command stream representing the formatted text.</param>
            <param name="settings">The layout settings.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The string which will be lexed, parsed, laid out, and drawn.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <param name="settings">The settings which are passed to the text layout engine.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,System.String,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The string which will be lexed, parsed, laid out, and drawn.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <param name="start">The index of the first character to draw.</param>
            <param name="count">The number of characters to draw.</param>
            <param name="parserOptions">The parser options to use when parsing the input text.</param>
            <param name="settings">The settings which are passed to the text layout engine.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The string which will be lexed, parsed, laid out, and drawn.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <param name="settings">The settings which are passed to the text layout engine.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,System.Text.StringBuilder,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserOptions,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The string which will be lexed, parsed, laid out, and drawn.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <param name="start">The index of the first character to draw.</param>
            <param name="count">The number of characters to draw.</param>
            <param name="parserOptions">The parser options to use when parsing the input text.</param>
            <param name="settings">The settings which are passed to the text layout engine.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The collection of parser tokens which will be laid out and drawn.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <param name="settings">The settings which are passed to the text layout engine.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextParserTokenStream,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The collection of parser tokens which will be laid out and drawn.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <param name="start">The index of the first character to draw.</param>
            <param name="count">The number of characters to draw.</param>
            <param name="settings">The settings which are passed to the text layout engine.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The text layout command stream that describes the text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Int32,System.Int32)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance with which to draw the formatted text.</param>
            <param name="input">The text layout command stream that describes the text to draw.</param>
            <param name="position">The position at which to draw the text.</param>
            <param name="defaultColor">The color with which to draw the text.</param>
            <param name="start">The index of the first character to draw.</param>
            <param name="count">The number of characters to draw.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> which represents the bounding box of the formatted text.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.DrawInternal(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color,System.Int32,System.Int32)">
            <summary>
            Draws a string of formatted text using the specified <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> instance.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.DrawText(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource@,System.Single,System.Single,System.Int32,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Color,System.Int32@)">
            <summary>
            Draws a text command.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.DrawIcon(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Single,System.Single,System.Int32,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Color,System.Int32@)">
            <summary>
            Draws an icon command.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.ClearLayoutStacks">
            <summary>
            Clears all of the renderer's layout parameter stacks.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PushScopedStack``1(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped{``0}},``0)">
            <summary>
            Pushes a value onto a style-scoped stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PushStyle(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle,System.Boolean@,System.Boolean@)">
            <summary>
            Pushes a style onto the style stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PushFont(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)">
            <summary>
            Pushes a font onto the font stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PushColor(TwistedLogik.Ultraviolet.Color)">
            <summary>
            Pushes a color onto the color stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PushGlyphShader(TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader)">
            <summary>
            Pushes a glyph shader onto the glyph shader stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PopScopedStack``1(System.Collections.Generic.Stack{TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped{``0}})">
            <summary>
            Pops a value off of a style-scoped stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PopStyle(System.Boolean@,System.Boolean@)">
            <summary>
            Pops a style off of the style stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PopFont">
            <summary>
            Pops a font off of the font stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PopColor">
            <summary>
            Pops a color off of the color stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PopGlyphShader">
            <summary>
            Pops a glyph shader off of the glyph shader stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.PopStyleScope">
            <summary>
            Pops the current style scope off of the stacks.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.RefreshFont(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutSettings@,System.Boolean,System.Boolean,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace@)">
            <summary>
            Updates the current font by examining the state of the layout stacks.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.RefreshColor(TwistedLogik.Ultraviolet.Color,TwistedLogik.Ultraviolet.Color@)">
            <summary>
            Updates the current text color by examining the state of the layout stacks.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.ProcessStylingCommand(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks,System.Boolean@,System.Boolean@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.StringSource@)">
            <summary>
            Processes a styling command and returns a value specifying which, if any, styling parameters were changed as a result.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.ProcessBlockInfo(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32@)">
            <summary>
            Processes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.BlockInfo"/> command.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.ProcessLineInfo(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Processes a <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandType.LineInfo"/> command.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.SkipToLineAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Moves the specified command stream forward to the beginning of the line that contains the specified coordinates.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.SkipToLineContainingGlyph(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Boolean@,System.Int32@)">
            <summary>
            Moves the specified command stream forward to the beginning of the line that contains the specified glyph.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphAtPositionWithinText(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontFace,TwistedLogik.Nucleus.Text.StringSegment@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the index of the glyph within the specified text that contains the specified position.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer.GetGlyphOrInsertionPointAtPosition(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextLayoutCommandStream,System.Int32,System.Int32,System.Nullable{System.Int32}@,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.GlyphSearchMode)">
            <summary>
            Gets the index of the glyph or insertion point which is closest to the specified position in layout-relative space.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks">
            <summary>
            Represents the stacks used by <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer"/> to track its current styling state.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks.None">
            <summary>
            No stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks.Style">
            <summary>
            The style stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks.Font">
            <summary>
            The font stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks.Color">
            <summary>
            The color stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks.GlyphShader">
            <summary>
            The glyph shader stack.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStacks.All">
            <summary>
            All of the renderer's stacks.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStateChange">
            <summary>
            Represents a change to the state of the text renderer as a result of processing a layout command.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStateChange.None">
            <summary>
            No change.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStateChange.ChangeFont">
            <summary>
            The current font has changed.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStateChange.ChangeColor">
            <summary>
            The current color has changed.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRendererStateChange.ChangeGlyphShader">
            <summary>
            The current glyph shader has changed.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle">
            <summary>
            Represents a preset text style.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont,System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.Nullable{TwistedLogik.Ultraviolet.Color},TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader[])">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle"/> class.
            </summary>
            <param name="font">The font which is applied by this style, if any.</param>
            <param name="bold">A value indicating whether this style makes the current font bold.</param>
            <param name="italic">A value indicating whether this style makes the current font italic.</param>
            <param name="color">The color which is applied by this style, if any.</param>
            <param name="glyphShaders">The glyph shaders which are applied by this style, if any.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle.Font">
            <summary>
            Gets the font which is applied by this style, if any.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle.Bold">
            <summary>
            Gets a value indicating whether this style makes the current font bold.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle.Italic">
            <summary>
            Gets a value indicating whether this style makes the current font italic.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle.Color">
            <summary>
            Gets the color which is applied by this style, if any.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle.GlyphShaders">
            <summary>
            Gets the collection of glyph shaders which are applied by this style.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection">
            <summary>
            Represents the collection of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader"/> objects associated with a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection.#ctor(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.Graphics2D.GlyphShader})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection"/> class.
            </summary>
            <param name="glyphShaders"></param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection.Item(System.Int32)">
            <summary>
            Gets the glyph shader at the specified index within the collection.
            </summary>
            <param name="index">The index of the collection item to retrieve.</param>
            <returns>The glyph shader at the specified index within the collection.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleGlyphShaderCollection.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Graphics#Graphics2D#GlyphShader}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleInstance">
            <summary>
            Represents a particular instance of a style being applied to formatted text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleInstance.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyle,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleInstance"/> structure.
            </summary>
            <param name="style">The style that was applied.</param>
            <param name="bold">A value indicating whether the font was bold before the style was applied.</param>
            <param name="italic">A value indicating whether the font was italic before the style was applied.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleInstance.Style">
            <summary>
            Gets the style that was applied.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleInstance.Bold">
            <summary>
            Gets a value indicating whether the font was bold before the style was applied.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleInstance.Italic">
            <summary>
            Gets a value indicating whether the font was italic before the style was applied.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped`1">
            <summary>
            Represents an object which is scoped to a text style within the text layout or rendering engines.
            </summary>
            <typeparam name="T">The type of object which is associated with a style scope.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped`1.#ctor(`0,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped`1"/> structure.
            </summary>
            <param name="value">The scoped value.</param>
            <param name="scope">The style scope identifier.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped`1.Value">
            <summary>
            Gets the scoped value.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextStyleScoped`1.Scope">
            <summary>
            Gets the style scope identifier.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1">
            <summary>
            Represents a table of formatted text.
            </summary>
            <typeparam name="ViewModelType">The type of view model which is bound to this table.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1"/> class.
            </summary>
            <param name="renderer">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer"/> used to lay out and render the table's text.</param>
            <param name="width">The table's width in pixels.</param>
            <param name="height">The table's height in pixels.</param>
            <param name="font">The table's default font.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the table.
            </summary>
            <param name="width">The table's new width.</param>
            <param name="height">The table's new height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.MarkDirty">
            <summary>
            Marks the table as dirty, which causes it to recalculate its layout the next time it is drawn.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.PerformLayout">
            <summary>
            Calculates the table's layout.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Draws the table.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which to draw the table.</param>
            <param name="position">The position in screen coordinates at which to draw the table.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws the table.
            </summary>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which to draw the table.</param>
            <param name="position">The position in screen coordinates at which to draw the table.</param>
            <param name="color">The table's default text color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Refresh">
            <summary>
            Updates the table's data bindings from the view model.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Rows">
            <summary>
            Gets the table's collection of rows.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Font">
            <summary>
            Gets the table's default font.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Width">
            <summary>
            Gets the table's specified width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.Height">
            <summary>
            Gets the table's specified height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.ActualWidth">
            <summary>
            Gets the table's actual width as of its last layout calculation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.ActualHeight">
            <summary>
            Gets the table's actual height as of its last layout calculation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.ViewModel">
            <summary>
            Gets or sets the table's view model.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.CalculateAutomaticWidth(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow{`0})">
            <summary>
            Calculates the width of automatically-sized cells on the specified row.
            </summary>
            <param name="row">The row to evaluate.</param>
            <returns>The width of automatically-sized cells on the specified row.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.UnsubscribeFromChangeEvents(TwistedLogik.Nucleus.Data.INotifyPropertyChanged)">
            <summary>
            Unsubscribes from Change events on the specified object.
            </summary>
            <param name="inc">The object on which to unsubscribe from events.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.SubscribeToChangeEvents(TwistedLogik.Nucleus.Data.INotifyPropertyChanged)">
            <summary>
            Subscribes to Change events on the specified object.
            </summary>
            <param name="inc">The object on which to subscribe to events.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1.ViewModelChanged(System.Object,System.String)">
            <summary>
            Handles the view model's <see cref="E:TwistedLogik.Nucleus.Data.INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="instance">The object instance that changed.</param>
            <param name="propertyName">The name of the property that was changed. If all of the object's properties have
            changed, this value can be either <see cref="F:System.String.Empty"/> or <c>null</c>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1">
            <summary>
            Represents a cell in a formatted text table.
            </summary>
            <typeparam name="ViewModelType">The type of view model which is bound to this table.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1"/> class.
            </summary>
            <param name="row">The row that owns the cell.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Refresh">
            <summary>
            Updates the cell's data bindings from the view model.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Bind(System.String)">
            <summary>
            Binds the cell to the specified property on its view model.
            </summary>
            <param name="name">The name of the property to which to bind the cell.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Bind``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Binds the cell to the specified property on its view model.
            </summary>
            <typeparam name="T">The return type of the property to bind.</typeparam>
            <param name="exp">An expression </param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Row">
            <summary>
            Gets the row that owns the cell.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Format">
            <summary>
            Gets or sets a string used to specify how the cell's text should be formatted.
            If null or empty, no special formatting is applied.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Text">
            <summary>
            Gets the cell's text.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.TextFlags">
            <summary>
            Gets the cell's text flags.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Width">
            <summary>
            Gets the cell's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Height">
            <summary>
            Gets the cell's height in pixels.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Draw(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch,System.Single,System.Single,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Draws the cell's contents.
            </summary>
            <param name="renderer">The text renderer used to lay out and render the table's text.</param>
            <param name="spriteBatch">The sprite batch with which to draw the cell.</param>
            <param name="x">The x-coordinate at which to draw the cell.</param>
            <param name="y">The y-coordinate at which to draw the cell.</param>
            <param name="color">The cell's default text color.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Position(System.Single,System.Single)">
            <summary>
            Positions the cell relative to its table.
            </summary>
            <param name="x">The cell's x-coordinate relative to its table.</param>
            <param name="y">The cell's y-coordinate relative to its table.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.PerformLayout(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer,System.Int32,System.Int32)">
            <summary>
            Performs layout calculations for this cell.
            </summary>
            <param name="renderer">The text renderer used to lay out and render the table's text.</param>
            <param name="width">The cell's width in pixels.</param>
            <param name="height">The cell's height in pixels.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.X">
            <summary>
            Gets the cell's x-coordinate relative to its table as of its last layout calculation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.Y">
            <summary>
            Gets the cell's y-coordinate relative to its table as of its last layout calculation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.CalculatedWidth">
            <summary>
            Gets the cell's calculated width as of its last layout calculation.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1.CalculatedHeight">
            <summary>
            Gets the cell's calculated height as of its last layout calculation.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCellCollection`1">
            <summary>
            Represents a collection of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCell`1"/> objects.
            </summary>
            <typeparam name="ViewModelType">The type of view model which is bound to this table.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCellCollection`1.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCellCollection`1"/>.
            </summary>
            <param name="row">The row that owns the collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCellCollection`1.Add">
            <summary>
            Adds a cell to the collection.
            </summary>
            <returns>The cell that was added to the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCellCollection`1.Add(System.String,System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags)">
            <summary>
            Adds a cell to the collection.
            </summary>
            <param name="format">The cell's format string.</param>
            <param name="text">The cell's text.</param>
            <param name="textFlags">The cell's text flags.</param>
            <returns>The cell that was added to the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCellCollection`1.Add(System.String,System.String,TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextFlags,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a cell to the collection.
            </summary>
            <param name="format">The cell's format string.</param>
            <param name="text">The cell's text.</param>
            <param name="textFlags">The cell's text flags.</param>
            <param name="width">The cell's width in pixels, or <c>null</c> to automatically size the cell.</param>
            <param name="height">The cell's height in pixels, or <c>null</c> to automatically size the cell.</param>
            <returns>The cell that was added to the collection.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableCellCollection`1.Row">
            <summary>
            Gets the row that owns the collection.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableLayout">
            <summary>
            Represents the layout information for a table of formatted text.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableLayout.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableLayout"/> class.
            </summary>
            <param name="xml">The XML document that contains the table layout.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableLayout.Create``1(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFont)">
            <summary>
            Creates a table from the layout information.
            </summary>
            <typeparam name="ViewModelType">The type of view model which is bound to this table.</typeparam>
            <param name="renderer">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextRenderer"/> used to lay out and render the table's text.</param>
            <param name="font">The table's default font.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableLayoutProcessor">
            <summary>
            Represents a content processor that loads text table layouts from XML definition files.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableLayoutProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Xml.Linq.XDocument)">
            <summary>
            Processes the specified data structure into a game asset.
            </summary>
            <param name="manager">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with which the asset is being processed.</param>
            <param name="metadata">The asset's metadata.</param>
            <param name="input">The input data structure to process.</param>
            <returns>The game asset that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow`1">
            <summary>
            Represents a row of cells in a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1"/>.
            </summary>
            <typeparam name="ViewModelType">The type of view model which is bound to this table.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow`1.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow`1"/> class.
            </summary>
            <param name="table">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1"/> that owns the row.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow`1.Table">
            <summary>
            Gets the table that owns the row.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRow`1.Cells">
            <summary>
            Gets the row's collection of cells.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRowCollection`1">
            <summary>
            Represents a collection of rows in a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1"/>.
            </summary>
            <typeparam name="ViewModelType">The type of view model which is bound to this table.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRowCollection`1.#ctor(TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRowCollection`1"/> class.
            </summary>
            <param name="table">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTable`1"/> that owns the row collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRowCollection`1.Add">
            <summary>
            Adds a row to the collection.
            </summary>
            <returns>The row that was added to the collection.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Graphics2D.Text.TextTableRowCollection`1.Table">
            <summary>
            Gets the table that owns the row collection.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities">
            <summary>
            Encapsulates the capabilities of a graphics device.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.SupportsDepthStencilTextures">
            <summary>
            Gets a value indicating whether the device supports texture which have both depth and stencil components.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.SupportsInstancedRendering">
            <summary>
            Gets a value indicating whether the device supports instanced rendering.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.SupportsNonZeroBaseInstance">
            <summary>
            Gets a value indicating whether the device supports using a non-zero base instance
            when performing instanced rendering.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.SupportsPreservingRenderTargetContentInHardware">
            <summary>
            Gets a value indicating whether the current platform has in-hardware support for
            preserving the content of a render target after it has been unbound for rendering.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.MaximumTextureSize">
            <summary>
            Gets the maximum texture size supported by the device.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.MaximumViewportWidth">
            <summary>
            Gets the maximum supported viewport width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.MaximumViewportHeight">
            <summary>
            Gets the maximum supported viewport height.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.IEffectMatrices">
            <summary>
            Represents an effect which exposes world, view, and projection matrix parameters.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.IEffectMatrices.World">
            <summary>
            Gets or sets the effect's world matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.IEffectMatrices.View">
            <summary>
            Gets or sets the effect's view matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.IEffectMatrices.Projection">
            <summary>
            Gets or sets the effect's projection matrix.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.IEffectTextureSize">
            <summary>
            Represents an effect which exposes a texture size parameter.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.IEffectTextureSize.TextureSize">
            <summary>
            Gets or sets the dimensions of the texture being rendered.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.IndexBufferFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.IndexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="itype">The index element type.</param>
            <param name="icount">The index element count.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.IndexBuffer"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.IndexBuffer">
            <summary>
            Represents an index buffer.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.IndexBuffer.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.IndexBufferElementType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.IndexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="itype">The index element type.</param>
            <param name="icount">The index element count.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.IndexBuffer.Create(TwistedLogik.Ultraviolet.Graphics.IndexBufferElementType,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.IndexBuffer"/> class.
            </summary>
            <param name="itype">The index element type.</param>
            <param name="icount">The index element count.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.IndexBuffer"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.IndexBuffer.SetData``1(``0[])">
            <summary>
            Sets the data contained by the index buffer.
            </summary>
            <typeparam name="T">The type of the elements of the array to set as the buffer's data.</typeparam>
            <param name="data">An array containing the data to set in the index buffer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.IndexBuffer.SetData``1(``0[],System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.SetDataOptions)">
            <summary>
            Sets the data contained by the index buffer.
            </summary>
            <typeparam name="T">The type of the elements of the array to set as the buffer's data.</typeparam>
            <param name="data">An array containing the data to set in the index buffer.</param>
            <param name="offset">The offset into <paramref name="data"/> at which to begin setting elements into the buffer.</param>
            <param name="count">The number of elements from <paramref name="data"/> to set into the buffer.</param>
            <param name="options">A hint to the underlying driver indicating whether data will be overwritten by this operation.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.IndexBuffer.IndexElementType">
            <summary>
            Gets the buffer's element type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.IndexBuffer.IndexCount">
            <summary>
            Gets the buffer's index count.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.IndexBufferElementType">
            <summary>
            Represents the size of the elements in an index buffer.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.IndexBufferElementType.Int16">
            <summary>
            Indexes are 16-bit integers.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.IndexBufferElementType.Int32">
            <summary>
            Indexes are 32-bit integers.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.IVertexType">
            <summary>
            Represents a type which defines the layout of a vertex format.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.IVertexType.VertexDeclaration">
            <summary>
            Gets the type's vertex declaration.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.Graphics"/> namespace contains types relating to Ultraviolet's graphics subsystem.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.PrimitiveType">
            <summary>
            Represents the supported primitive types, which specify how vertex data is ordered within a buffer.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.PrimitiveType.TriangleList">
            <summary>
            The vertex data is ordered as a sequence of triangles, with each triangle described by three new vertices.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.PrimitiveType.TriangleStrip">
            <summary>
            The vertex data is ordered as a sequence of triangles, with each triangle described by three new vertices
            and one vertex from the previous triangle.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.PrimitiveType.LineList">
            <summary>
            The vertex data is ordered as a sequence of line segments, with each line segment described by two new vertices.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.PrimitiveType.LineStrip">
            <summary>
            The vertex data is ordered as a sequence of line segments, with each line segment described by one new vertex
            and one vertex from the previous line segment.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RasterizerStateFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState">
            <summary>
            Represents a graphics device's rasterizer state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RasterizerState.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RasterizerState.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RasterizerState.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.CullClockwise">
            <summary>
            Retrieves a built-in state object with settings for culling clockwise faces.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.CullCounterClockwise">
            <summary>
            Retrieves a built-in state object with settings for culling counter-clockwise faces.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.CullNone">
            <summary>
            Retrieves a built-in state object with settings for disabling back face culling.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.RasterizerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.CullMode">
            <summary>
            Gets or sets the cull mode.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.FillMode">
            <summary>
            Gets or sets the fill mode.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.DepthBias">
            <summary>
            Gets or sets the depth bias applied to primitives.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.SlopeScaleDepthBias">
            <summary>
            Gets or sets the coplanar depth bias applied to primitives.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RasterizerState.ScissorTestEnable">
            <summary>
            Gets or sets a value indicating whether scissor testing is enabled.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RasterizerState.MakeImmutable">
            <summary>
            Makes the state object immutable.  Further attempts to modify
            the object will throw an exception.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RasterizerState.InvalidateCache">
            <summary>
            Invalidates the cached state objects.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2DFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="format">The render buffer's format.</param>
            <param name="width">The render buffer's width in pixels.</param>
            <param name="height">The render buffer's height in pixels.</param>
            <param name="options">The render buffer's configuration options.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D">
            <summary>
            Represents a two-dimensional render buffer containing color, depth, or stencil data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> that represents a color buffer.
            </summary>
            <param name="width">The render buffer's width in pixels.</param>
            <param name="height">The render buffer's height in pixels.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D.Create(System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.RenderBufferOptions)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> that represents a color buffer.
            </summary>
            <param name="width">The render buffer's width in pixels.</param>
            <param name="height">The render buffer's height in pixels.</param>
            <param name="options">The render buffer's configuration options.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D.Create(TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> class.
            </summary>
            <param name="format">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat"/> value specifying the render buffer's data format.</param>
            <param name="width">The render buffer's width in pixels.</param>
            <param name="height">The render buffer's height in pixels.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D.Create(TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.RenderBufferOptions)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> class.
            </summary>
            <param name="format">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat"/> value specifying the render buffer's data format.</param>
            <param name="width">The render buffer's width in pixels.</param>
            <param name="height">The render buffer's height in pixels.</param>
            <param name="options">The render buffer's configuration options.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D.Format">
            <summary>
            Gets the render buffer's format.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D.Attached">
            <summary>
            Gets a value indicating whether the render buffer has been attached to a render target.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat">
            <summary>
            Represents the supported render buffer formats.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat.Color">
            <summary>
            The buffer contains 32 bits of color data.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat.Depth24Stencil8">
            <summary>
            The buffer contains 24 bits of depth data and 8 bits of stencil data.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat.Depth32">
            <summary>
            The buffer contains 32 bits of depth data.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat.Depth16">
            <summary>
            The buffer contains 16 bits of depth data.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferFormat.Stencil8">
            <summary>
            The buffer contains 8 bits of stencil data.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RenderBufferOptions">
            <summary>
            Represents the set of options which can be used to modify the behavior of a <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferOptions.None">
            <summary>
            The render buffer has no special options.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferOptions.ImmutableStorage">
            <summary>
            The render buffer should use immutable storage, if it is available.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderBufferOptions.WillNotBeSampled">
            <summary>
            Specifies that the render buffer will not be sampled. Render buffers which have been 
            created with this flag cannot be bound as a texture or have their data
            populated via a call to the SetData() method.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RenderTarget2DFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="width">The render target's width in pixels.</param>
            <param name="height">The render target's height in pixels.</param>
            <param name="usage">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderTargetUsage"/> value specifying whether the 
            render target's data is discarded or preserved when it is bound to the graphics device.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D">
            <summary>
            Represents a two-dimensional render target.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.Create(System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.RenderTargetUsage)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D"/> class.
            </summary>
            <param name="width">The render target's width in pixels.</param>
            <param name="height">The render target's height in pixels.</param>
            <param name="usage">A <see cref="P:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.RenderTargetUsage"/> value specifying whether the 
            render target's data is discarded or preserved when it is bound to the graphics device.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.Attach(TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D)">
            <summary>
            Attaches a render buffer to this render target.
            </summary>
            <param name="buffer">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderBuffer2D"/> to attach to this render target.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the render target.
            </summary>
            <param name="width">The render target's new width in pixels.</param>
            <param name="height">The render target's new height in pixels.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.GetData(TwistedLogik.Ultraviolet.Color[])">
            <summary>
            Gets the render target's data.
            </summary>
            <param name="data">An array to populate with the render target's data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.GetData(TwistedLogik.Ultraviolet.Color[],TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Gets the render target's data.
            </summary>
            <param name="data">An array to populate with the render target's data.</param>
            <param name="region">The region of the render target from which to retrieve data.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.Size">
            <summary>
            Gets the render target's size in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.Width">
            <summary>
            Gets the render target's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.Height">
            <summary>
            Gets the render target's height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.BoundForReading">
            <summary>
            Gets a value indicating whether the render target is bound to the device for reading.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.BoundForWriting">
            <summary>
            Gets a value indicating whether the render target is bound to the device for writing.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.RenderTarget2D.RenderTargetUsage">
            <summary>
            Gets a value indicating whether the render target's data is preserved when
            it is bound to the graphics device.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.RenderTargetUsage">
            <summary>
            Specifies whether a render target's data is preserved or discarded
            after it is bound to the graphics device.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderTargetUsage.DiscardContents">
            <summary>
            The render target's data is always discarded when the render target is bound.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderTargetUsage.PlatformContents">
            <summary>
            The render target's data is preserved on platforms which support doing so in hardware,
            and discarded on platforms which do not provide such support.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.RenderTargetUsage.PreserveContents">
            <summary>
            The render target's data is always preserved when the render target is bound.
            Some platforms may not support this in hardware, leading to performance issues;
            check the value of <see cref="P:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities.SupportsPreservingRenderTargetContentInHardware"/>
            to determine whether this is the case.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SamplerStateFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SamplerState">
            <summary>
            Represents a graphics device's rasterizer state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SamplerState.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SamplerState.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SamplerState.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.PointClamp">
            <summary>
            Retrieves a built-in state object using point filtering and texture coordinate clamping.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.PointWrap">
            <summary>
            Retrieves a built-in state object using point filtering and texture coordinate wrapping.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.LinearClamp">
            <summary>
            Retrieves a built-in state object using linear filtering and texture coordinate clamping.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.LinearWrap">
            <summary>
            Retrieves a built-in state object using linear filtering and texture coordinate wrapping.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.AnisotropicClamp">
            <summary>
            Retrieves a built-in state object using anisotropic filtering and texture coordinate clamping.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.AnisotropicWrap">
            <summary>
            Retrieves a built-in state object using anisotropic filtering and texture coordinate wrapping.
            </summary>
            <returns>The built-in <see cref="T:TwistedLogik.Ultraviolet.Graphics.SamplerState"/> object that was retrieved.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.AddressU">
            <summary>
            Gets or sets the texture address mode for the u-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.AddressV">
            <summary>
            Gets or sets the texture address mode for the v-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.Filter">
            <summary>
            Gets or sets the texture filtering mode.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.MaxAnisotropy">
            <summary>
            Gets or sets the maximum anisotropy.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SamplerState.MipMapLevelOfDetailBias">
            <summary>
            Gets or sets the mipmap level of detail bias.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SamplerState.MakeImmutable">
            <summary>
            Makes the state object immutable.  Further attempts to modify
            the object will throw an exception.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SamplerState.InvalidateCache">
            <summary>
            Invalidates the cached state objects.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SetDataOptions">
            <summary>
            Represents a hint to the underlying driver as to whether buffer data will be overwritten by a <c>SetData()</c> operation.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.SetDataOptions.None">
            <summary>
            No hint provided.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.SetDataOptions.Discard">
            <summary>
            The SetData() operation will discard the contents of the buffer.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.SetDataOptions.NoOverwrite">
            <summary>
            The SetData() operation will not overwrite existing data.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin">
            <summary>
            Represents the origin of texture data which is being set onto a texture or render buffer.
            If the data source's origin differs from the texture's expected origin, the buffer may be
            re-arranged during the copy in order to match what the texture expects.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin.TopLeft">
            <summary>
            The buffer being copied contains data with a top-left origin.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin.TopRight">
            <summary>
            The buffer being copied contains data with a top-right origin.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin.BottomLeft">
            <summary>
            The buffer being copied contains data with a bottom-left origin.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin.BottomRight">
            <summary>
            The buffer being copied contains data with a bottom-right origin.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.StencilOperation">
            <summary>
            Represents the stencil buffer operations.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.Decrement">
            <summary>
            Decrements the stencil buffer value, wrapping to the maximum value if the new value is less than 0.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.DecrementSaturation">
            <summary>
            Decrements the stencil buffer value, clamping to 0.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.Increment">
            <summary>
            Increments the stencil buffer value, wrapping to the minimum value if the new value exceeds the maximum value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.IncrementSaturation">
            <summary>
            Increments the stencil buffer value, clamping to the maximum value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.Invert">
            <summary>
            Inverts the bits of the stencil buffer value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.Keep">
            <summary>
            Preserves the stencil buffer value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.Replace">
            <summary>
            Replaces the stencil buffer value with the reference value.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.StencilOperation.Zero">
            <summary>
            Sets the stencil buffer value to zero.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Surface2DFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="width">The surface's width in pixels.</param>
            <param name="height">The surface's height in pixels.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Surface2DFromSourceFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> class from an instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSource"/>.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="source">The surface source from which to create the surface.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Surface2D">
            <summary>
            Represents a two-dimensional image which is held in CPU memory.
            </summary>
            <remarks>A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> operates similarly to a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/>, except that it is held in CPU memory rather
            than GPU memory. This makes it useful for manipulating image data prior to turning it into a texture.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> class.
            </summary>
            <param name="width">The surface's width in pixels.</param>
            <param name="height">The surface's height in pixels.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.Create(TwistedLogik.Ultraviolet.Graphics.SurfaceSource)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> class.
            </summary>
            <param name="source">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSource"/> from which to create the surface.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.GetData(TwistedLogik.Ultraviolet.Color[])">
            <summary>
            Gets the surface's data.
            </summary>
            <param name="data">An array to populate with the surface's data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.GetData(TwistedLogik.Ultraviolet.Color[],TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Gets the surface's data.
            </summary>
            <param name="data">An array to populate with the surface's data.</param>
            <param name="region">The region of the surface from which to retrieve data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.SetData(TwistedLogik.Ultraviolet.Color[])">
            <summary>
            Sets the surface's data.
            </summary>
            <param name="data">An array containing the data to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.SetData(TwistedLogik.Ultraviolet.Color[],TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Sets the surface's data in the specified region of the surface.
            </summary>
            <param name="data">An array containing the data to set.</param>
            <param name="region">The region of the surface to populate with data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.Blit(TwistedLogik.Ultraviolet.Graphics.Surface2D)">
            <summary>
            Blits the surface onto the specified destination surface.
            </summary>
            <param name="dst">The destination surface.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.Blit(TwistedLogik.Ultraviolet.Graphics.Surface2D,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Blits the surface onto the specified destination surface.
            </summary>
            <param name="dst">The destination surface.</param>
            <param name="dstRect">The area on the destination surface to which this surface will be copied.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.Blit(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Graphics.Surface2D,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Blits the surface onto the specified destination surface.
            </summary>
            <param name="srcRect">The area of this surface that will be copied to the destination surface.</param>
            <param name="dst">The destination surface.</param>
            <param name="dstRect">The area on the destination surface to which this surface will be copied.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.CreateSurface">
            <summary>
            Creates a copy of the surface.
            </summary>
            <returns>A new <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> which is a copy of this surface.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.CreateSurface(TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Creates a copy of a region of this surface.
            </summary>
            <param name="region">The region of this surface to copy.</param>
            <returns>A new <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> which is a copy of the specified region of this surface.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.CreateTexture(System.Boolean)">
            <summary>
            Creates a texture from the surface.
            </summary>
            <param name="premultiplyAlpha">A value indicating whether to premultiply the surface's alpha when creating the texture.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> that was created from the surface.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.SaveAsJpeg(System.IO.Stream)">
            <summary>
            Saves the surface as a JPEG image to the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to save the image data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Surface2D.SaveAsPng(System.IO.Stream)">
            <summary>
            Saves the surface as a PNG image to the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to save the image data.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Surface2D.Width">
            <summary>
            Gets the surface's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Surface2D.Height">
            <summary>
            Gets the surface's height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Surface2D.Pitch">
            <summary>
            Gets the length of a surface scanline in bytes.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Surface2D.BytesPerPixel">
            <summary>
            Gets the number of bytes used to represent a single pixel on this surface.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSaverFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver">
            <summary>
            Contains methods for saving the contents of a surface to a file.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver.SaveAsPng(TwistedLogik.Ultraviolet.Graphics.Surface2D,System.IO.Stream)">
            <summary>
            Saves the specified surface as a PNG image.
            </summary>
            <param name="surface">The surface to save.</param>
            <param name="stream">The stream to which to save the surface data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver.SaveAsJpeg(TwistedLogik.Ultraviolet.Graphics.Surface2D,System.IO.Stream)">
            <summary>
            Saves the specified surface as a JPEG image.
            </summary>
            <param name="surface">The surface to save.</param>
            <param name="stream">The stream to which to save the surface data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver.SaveAsPng(TwistedLogik.Ultraviolet.Graphics.RenderTarget2D,System.IO.Stream)">
            <summary>
            Saves the specified render target as a PNG image.
            </summary>
            <param name="renderTarget">The render target to save.</param>
            <param name="stream">The stream to which to save the render target data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SurfaceSaver.SaveAsJpeg(TwistedLogik.Ultraviolet.Graphics.RenderTarget2D,System.IO.Stream)">
            <summary>
            Saves the specified render target as a JPEG image.
            </summary>
            <param name="renderTarget">The render target to save.</param>
            <param name="stream">The stream to which to save the render target data.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSourceFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSource"/> class.
            </summary>
            <param name="stream">The stream from which to load the surface.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSource"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSource">
            <summary>
            Represents source data from which a <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> object can be created.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SurfaceSource.Create(System.IO.Stream)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSource"/> class.
            </summary>
            <param name="stream">Th <see cref="T:System.IO.Stream"/> that contains the data to load.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.SurfaceSource"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.SurfaceSource.Dispose">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SurfaceSource.Item(System.Int32,System.Int32)">
            <summary>
            Gets the color of the pixel at the specified position on the surface source.
            </summary>
            <param name="x">The x-coordinate of the pixel to retrieve.</param>
            <param name="y">The y-coordinate of the pixel to retrieve.</param>
            <returns>The color of the specified pixel.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SurfaceSource.Data">
            <summary>
            Gets a pointer to the beginning of the surface data.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SurfaceSource.Stride">
            <summary>
            Gets the size, in bytes, of a single scanline of image data from this source.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SurfaceSource.Width">
            <summary>
            Gets the width of the surface source in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.SurfaceSource.Height">
            <summary>
            Gets the height of the surface source.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Texture2DFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="width">The texture's width in pixels.</param>
            <param name="height">The texture's height in pixels.</param>
            <param name="immutable">A value indicating whether the texture should be created with immutable storage.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Texture2D">
            <summary>
            Represents a two-dimensional texture.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.Create(System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> class.
            </summary>
            <param name="width">The texture's width in pixels.</param>
            <param name="height">The texture's height in pixels.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.Create(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> class.
            </summary>
            <param name="width">The texture's width in pixels.</param>
            <param name="height">The texture's height in pixels.</param>
            <param name="immutable">A value indicating whether to use immutable storage.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.CompareTo(TwistedLogik.Ultraviolet.Graphics.Texture2D)">
            <summary>
            Compares the texture with another texture and returns a value indicating whether the current
            instance comes before, after, or in the same position as the specified texture.
            </summary>
            <param name="other">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> to compare to this instance.</param>
            <returns>A value indicating the relative order of the objects being compared.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.Resize(System.Int32,System.Int32)">
            <summary>
            Resizes the texture.
            </summary>
            <param name="width">The texture's new width in pixels.</param>
            <param name="height">The texture's new height in pixels.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.SetData``1(``0[],TwistedLogik.Ultraviolet.Graphics.SetDataOrigin)">
            <summary>
            Sets the texture's data.
            </summary>
            <typeparam name="T">The type of the elements in the array being set as the texture's data.</typeparam>
            <param name="data">An array containing the data to set.</param>
            <param name="origin">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin"/> value specifying the origin of the texture data in <paramref name="data"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.SetData``1(``0[],System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.SetDataOrigin)">
            <summary>
            Sets the texture's data.
            </summary>
            <typeparam name="T">The type of the elements in the array being set as the texture's data.</typeparam>
            <param name="data">An array containing the data to set.</param>
            <param name="offset">The index of the first element to set.</param>
            <param name="count">The number of elements to set.</param>
            <param name="origin">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin"/> value specifying the origin of the texture data in <paramref name="data"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},``0[],System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.SetDataOrigin)">
            <summary>
            Sets the texture's data.
            </summary>
            <typeparam name="T">The type of the elements of the array to set as the texture's data.</typeparam>
            <param name="level">The mipmap level for which to set data.</param>
            <param name="rect">A rectangle describing the position and size of the data to set, or <c>null</c> to set the entire texture.</param>
            <param name="data">An array containing the data to set.</param>
            <param name="offset">The index of the first element to set.</param>
            <param name="count">The number of elements to set.</param>
            <param name="origin">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin"/> value specifying the origin of the texture data in <paramref name="data"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.SetData``1(System.Int32,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},``0[],System.Int32,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.SetDataOrigin)">
            <summary>
            Sets the texture's data.
            </summary>
            <typeparam name="T">The type of the elements of the array to set as the texture's data.</typeparam>
            <param name="level">The mipmap level for which to set data.</param>
            <param name="rect">A rectangle describing the position and size of the data to set, or <c>null</c> to set the entire texture.</param>
            <param name="data">An array containing the data to set.</param>
            <param name="offset">The index of the first element to set.</param>
            <param name="count">The number of elements to set.</param>
            <param name="stride">The number of elements in one row of data, or zero to use the width of <paramref name="rect"/>.</param>
            <param name="origin">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin"/> value specifying the origin of the texture data in <paramref name="data"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Texture2D.SetData(System.Int32,System.Nullable{TwistedLogik.Ultraviolet.Rectangle},System.IntPtr,System.Int32,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.TextureDataFormat,TwistedLogik.Ultraviolet.Graphics.SetDataOrigin)">
            <summary>
            Sets the texture's data.
            </summary>
            <param name="level">The mipmap level for which to set data.</param>
            <param name="rect">A rectangle describing the position and size of the data to set, or <c>null</c> to set the entire texture.</param>
            <param name="data">A pointer to the data to set.</param>
            <param name="offset">The index of the first element to set.</param>
            <param name="count">The number of elements to set.</param>
            <param name="stride">The number of elements in one row of data, or zero to use the width of <paramref name="rect"/>.</param>
            <param name="format">The format of the data being set.</param>
            <param name="origin">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.SetDataOrigin"/> value specifying the origin of the texture data in <paramref name="data"/>.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Texture2D.Width">
            <summary>
            Gets the texture's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Texture2D.Height">
            <summary>
            Gets the texture's height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Texture2D.BoundForReading">
            <summary>
            Gets a value indicating whether the texture is bound to the device for reading.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Texture2D.BoundForWriting">
            <summary>
            Gets a value indicating whether the texture is bound to the device for writing.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Texture2D.ImmutableStorage">
            <summary>
            Gets a value indicating whether the texture is using immutable storage.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Texture2D.WillNotBeSampled">
            <summary>
            Gets a value indicating whether the texture is optimized with the assumption that it will not be sampled. Textures
            which are thus optimized cannot be bound to a sampler or have their data set via the SetData() method.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureAddressMode">
            <summary>
            Represents the supported texture addressing modes.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureAddressMode.Clamp">
            <summary>
            Clamps texture coordinates to the range [0.0, 1.0].
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureAddressMode.Wrap">
            <summary>
            Wraps texture coordinates which exceed the range [0.0, 1.0].
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureAddressMode.Mirror">
            <summary>
            Mirrors texture coordinates at every integer junction.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlas">
            <summary>
            Represents a collection of images that have been composited onto a single texture.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.#ctor(TwistedLogik.Ultraviolet.Graphics.Texture2D,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,TwistedLogik.Ultraviolet.Rectangle}})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlas"/> class.
            </summary>
            <param name="texture">The atlas' texture.</param>
            <param name="cells">The atlas' cells.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.op_Implicit(TwistedLogik.Ultraviolet.Graphics.TextureAtlas)~TwistedLogik.Ultraviolet.Graphics.Texture2D">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlas"/> to its underlying <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/>.
            </summary>
            <param name="atlas">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlas"/> to convert.</param>
            <returns>The underlying <see cref="T:TwistedLogik.Ultraviolet.Graphics.Texture2D"/> represented by <paramref name="atlas"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.ContainsCell(System.String)">
            <summary>
            Gets a value indicating whether the texture atlas contains a cell with the specified name.
            </summary>
            <param name="cell">The name of the cell to evaluate.</param>
            <returns><c>true</c> if the texture atlas contains a cell with the specified name; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,TwistedLogik#Ultraviolet#Rectangle}}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.Item(System.String)">
            <summary>
            Gets the location of the cell with the specified name.
            </summary>
            <param name="cell">The name of the cell for which to retrieve a location.</param>
            <returns>The location of the cell with the specified name.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.Width">
            <summary>
            Gets the texture atlas' width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.Height">
            <summary>
            Gets the texture atlas' height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.CellCount">
            <summary>
            Gets the number of cells on the texture atlas.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlas.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition">
            <summary>
            Represents the definition of a texture atlas.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.#ctor(System.Xml.Linq.XDocument,TwistedLogik.Ultraviolet.Content.ContentManager,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition"/> class.
            </summary>
            <param name="xml">The XML document that defines the texture atlas.</param>
            <param name="content">The content manager that is loading the texture atlas.</param>
            <param name="assetPath">The asset path of the texture atlas that is being loaded.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.RootDirectory">
            <summary>
            Gets the root directory of the atlas images.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.RequirePowerOfTwo">
            <summary>
            Gets a value indicating whether the output texture must have power-of-two dimensions.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.RequireSquare">
            <summary>
            Gets a value indicating whether the output texture must be square.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.MaximumWidth">
            <summary>
            Gets the maximum width of the atlas' texture.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.MaximumHeight">
            <summary>
            Gets the maximum height of the atlas' texture.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.Padding">
            <summary>
            Gets the texture atlas' padding.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.ImageList">
            <summary>
            Gets the texture atlas' list of image assets.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.DefaultMaximumWidth">
            <summary>
            The default maximum width of a texture atlas.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.DefaultMaximumHeight">
            <summary>
            The default maximum height of a texture atlas.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.ExpandFileExpression(TwistedLogik.Ultraviolet.Content.ContentManager,System.String)">
            <summary>
            Expands a file expression potentially containing wildcard (*) characters.
            </summary>
            <param name="manager">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> which is loading the texture atlas.</param>
            <param name="expression">The file expression to expand.</param>
            <returns>A collection containing the paths to the files that were resolved from the file expression.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.ExpandDirectoryExpression(TwistedLogik.Ultraviolet.Content.ContentManager,System.String,System.String,System.Collections.Generic.List{System.String})">
            <summary>
            Expands a directory expression potentially containing wildcard (*) characters.
            </summary>
            <param name="manager">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> which is loading the texture atlas.</param>
            <param name="root">The root directory of the expression that is being expanded.</param>
            <param name="expression">The file expression to expand.</param>
            <param name="result">A collection to populate with the expanded directories.</param>
            <returns>A collection containing the paths to the directories that were resolved from the directory expression.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.GetImageSize(TwistedLogik.Ultraviolet.Content.ContentManager,System.String)">
            <summary>
            Gets the size of the specified image.
            </summary>
            <param name="content">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with which to load images.</param>
            <param name="path">The path to the image for which to retrieve a size.</param>
            <returns>The size of the specified image.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.LoadImages(TwistedLogik.Ultraviolet.Content.ContentManager,System.Xml.Linq.XElement)">
            <summary>
            Loads the texture atlas' images.
            </summary>
            <param name="content">The <see cref="T:TwistedLogik.Ultraviolet.Content.ContentManager"/> with which to load images.</param>
            <param name="images">The XML element that defines the set of images to load.</param>
            <returns>A value indicating whether any images were loaded.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition.SortImagesBySize">
            <summary>
            Sorts the images in the atlas by size, so that larger images are placed first.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlasImage">
            <summary>
            Represents an image to be included on a texture atlas.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasImage.#ctor(System.String,System.String,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlasImage"/> structure.
            </summary>
            <param name="name">The name of the image.</param>
            <param name="path">The path to the image asset.</param>
            <param name="size">The size of the image.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasImage.Name">
            <summary>
            Gets the unique name of the image.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasImage.Path">
            <summary>
            Gets the path to the image asset.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasImage.Size">
            <summary>
            Gets the size of the image asset.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor">
            <summary>
            Represents a content processor which loads XML definition files as texture atlases.
            </summary>
            <remarks>This class is based on code taken from the Sprite Sheet Packer library (see TwistedLogik.Ultraviolet.Licenses.txt).</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.ExportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryWriter,System.Xml.Linq.XDocument,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.ImportPreprocessed(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.IO.BinaryReader)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Xml.Linq.XDocument)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.SupportsPreprocessing">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.PackImageRectangles(TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition,System.Int32@,System.Int32@)">
            <summary>
            This method does some trickery type stuff where we perform the TestPackingImages method over and over,
            trying to reduce the image size until we have found the smallest possible image we can fit.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.TestPackingImages(TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,TwistedLogik.Ultraviolet.Rectangle})">
            <summary>
            Determines whether the atlas' images can fit on a texture of the specified size.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.CreateOutputSurface(TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition,TwistedLogik.Ultraviolet.Content.ContentManager,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,TwistedLogik.Ultraviolet.Rectangle})">
            <summary>
            Creates the output surface for a texture atlas.
            </summary>
            <param name="definition">The texture atlas definition.</param>
            <param name="content">The content manager with which to load images.</param>
            <param name="width">The width of the output texture.</param>
            <param name="height">The height of the output texture.</param>
            <param name="images">The table of image locations on the texture atlas.</param>
            <returns>The output surface that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.CreateOutputTexture(TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition,TwistedLogik.Ultraviolet.Content.ContentManager,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,TwistedLogik.Ultraviolet.Rectangle})">
            <summary>
            Creates the output texture for a texture atlas.
            </summary>
            <param name="definition">The texture atlas definition.</param>
            <param name="content">The content manager with which to load images.</param>
            <param name="width">The width of the output texture.</param>
            <param name="height">The height of the output texture.</param>
            <param name="images">The table of image locations on the texture atlas.</param>
            <returns>The output texture that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureAtlasProcessor.CreateTextureAtlas(TwistedLogik.Ultraviolet.Graphics.TextureAtlasDefinition,TwistedLogik.Ultraviolet.Content.ContentManager,System.Int32,System.Int32,System.Collections.Generic.Dictionary{System.String,TwistedLogik.Ultraviolet.Rectangle})">
            <summary>
            Creates a texture atlas from the specified collection of images.
            </summary>
            <param name="definition">The texture atlas definition.</param>
            <param name="content">The content manager with which to load images.</param>
            <param name="width">The width of the output texture.</param>
            <param name="height">The height of the output texture.</param>
            <param name="images">The table of image locations on the texture atlas.</param>
            <returns>The texture atlas that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureDataFormat">
            <summary>
            Represents Ultraviolet's supported texture data formats.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureDataFormat.RGBA">
            <summary>
            32-bit color data stored in RGBA order.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureDataFormat.BGRA">
            <summary>
            32-bit color data stored in BGRA order.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureFilter">
            <summary>
            Represents the supported texture filtering mode.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureFilter.Point">
            <summary>
            Use point filtering.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureFilter.Linear">
            <summary>
            Use linear filtering.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.TextureFilter.Anisotropic">
            <summary>
            Use anisotropic filtering.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.TextureUtil">
            <summary>
            Contains utility methods for manipulating texture data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.TextureUtil.ReorientTextureData(System.Void*,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reorients the data in the specified buffer, flipping it horizontally, vertically, or both.
            </summary>
            <param name="buffer">The buffer to reorient.</param>
            <param name="width">The width in pixels of the texture represented by the buffer.</param>
            <param name="height">The height in pixels of the texture represented by the buffer.</param>
            <param name="size">The size in bytes of one element of the buffer.</param>
            <param name="flipHorizontally">A value indicating whether to flip the data horizontally.</param>
            <param name="flipVertically">A value indicating whether to flip the data vertically.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexBufferFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="vdecl">The vertex declaration for the buffer.</param>
            <param name="vcount">The number of vertices in the buffer.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer">
            <summary>
            Represents a buffer containing vertex data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexBuffer.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Graphics.VertexDeclaration,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="vdecl">The vertex declaration for the buffer.</param>
            <param name="vcount">The number of vertices in the buffer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexBuffer.Create(TwistedLogik.Ultraviolet.Graphics.VertexDeclaration,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> class.
            </summary>
            <param name="vdecl">The vertex declaration for the buffer.</param>
            <param name="vcount">The number of vertices in the buffer.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexBuffer.Create``1(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> class.
            </summary>
            <typeparam name="T">The vertex type that defines the layout of the buffer's vertices.</typeparam>
            <param name="vcount">The number of vertices in the buffer.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexBuffer"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexBuffer.SetData``1(``0[])">
            <summary>
            Sets the data contained by the vertex buffer.
            </summary>
            <typeparam name="T">The type of the elements of the array to set as the buffer's data.</typeparam>
            <param name="data">An array containing the data to set in the vertex buffer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexBuffer.SetData``1(``0[],System.Int32,System.Int32,TwistedLogik.Ultraviolet.Graphics.SetDataOptions)">
            <summary>
            Sets the data contained by the vertex buffer.
            </summary>
            <typeparam name="T">The type of the elements of the array to set as the buffer's data.</typeparam>
            <param name="data">An array containing the data to set in the vertex buffer.</param>
            <param name="offset">The offset into <paramref name="data"/> at which to begin setting elements into the buffer.</param>
            <param name="count">The number of elements from <paramref name="data"/> to set into the buffer.</param>
            <param name="options">A hint to the underlying driver indicating whether data will be overwritten by this operation.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexBuffer.VertexDeclaration">
            <summary>
            Gets the buffer's vertex declaration.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexBuffer.VertexCount">
            <summary>
            Gets the buffer's vertex count.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration">
            <summary>
            Represents a vertex declaration, which defines the structure of vertex data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration.#ctor(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Graphics.VertexElement})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration"/> class.
            </summary>
            <param name="elements">The vertex declaration's elements.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the vertex declaration.
            </summary>
            <returns>An enumerator that iterates through the vertex declaration.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Graphics#VertexElement}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the vertex declaration.
            </summary>
            <returns>An enumerator that iterates through the vertex declaration.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the vertex declaration.
            </summary>
            <returns>An enumerator that iterates through the vertex declaration.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration.VertexStride">
            <summary>
            Gets the vertex stride in bytes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexDeclaration.CalculateStride">
            <summary>
            Calculates the stride of a vertex in bytes.
            </summary>
            <returns>The stride of a vertex in bytes.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexElement">
            <summary>
            Represents a single element in a vertex declaration.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexElement.#ctor(System.Int32,TwistedLogik.Ultraviolet.Graphics.VertexFormat,TwistedLogik.Ultraviolet.Graphics.VertexUsage,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexElement"/> structure.
            </summary>
            <param name="position">The element's position within the vertex data, in bytes.</param>
            <param name="format">The element's vertex format.</param>
            <param name="usage">The element's usage hint.</param>
            <param name="index">The element's usage index.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexElement.UsageIndexCount">
            <summary>
            Gets the maximum number of vertex usage indices allowed by the Ultraviolet Framework.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexElement.Position">
            <summary>
            Gets the element's position within its vertex data, in bytes.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexElement.Format">
            <summary>
            Gets the element's vertex format.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexElement.Usage">
            <summary>
            Gets the element's usage hint.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexElement.Index">
            <summary>
            Gets the element's usage index.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexFormat">
            <summary>
            Represents the supported formats for vertex data.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.Single">
            <summary>
            32-bit floating point with one component.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.Vector2">
            <summary>
            32-bit floating point with two components.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.Vector3">
            <summary>
            32-bit floating point with three components.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.Vector4">
            <summary>
            32-bit floating point with three components.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.Color">
            <summary>
            8-bit unsigned byte with four components.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.NormalizedShort2">
            <summary>
            Packed vector containing two 16-bit signed normalized integer values ranging from -1 to +1.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.NormalizedShort4">
            <summary>
            Packed vector containing four 16-bit signed normalized integer values ranging from -1 to +1.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.Short2">
            <summary>
            Packed vector containing two 16-bit signed normalized integer values.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexFormat.Short4">
            <summary>
            Packed vector containing two 16-bit signed normalized integer values.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexPosition">
            <summary>
            Represents a vertex containing only 3D position data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexPosition.#ctor(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexPosition"/> structure.
            </summary>
            <param name="position">The vertex position.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexPosition.TwistedLogik#Ultraviolet#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPosition.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPosition.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexPositionColor">
            <summary>
            Represents a vertex containing 3D position and color data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexPositionColor.#ctor(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexPositionColor"/> structure.
            </summary>
            <param name="position">The vertex position.</param>
            <param name="color">The vertex color.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexPositionColor.TwistedLogik#Ultraviolet#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionColor.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionColor.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionColor.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture">
            <summary>
            Represents a vertex containing 3D position, color, and texture coordinate data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture.#ctor(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Color,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture"/> structure.
            </summary>
            <param name="position">The vertex position.</param>
            <param name="color">The vertex color.</param>
            <param name="textureCoordinate">The texture coordinate.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture.TwistedLogik#Ultraviolet#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture.Color">
            <summary>
            The vertex color.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionColorTexture.TextureCoordinate">
            <summary>
            The texture coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexPositionTexture">
            <summary>
            Represents a vertex containing 3D position and texture coordinate data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.VertexPositionTexture.#ctor(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.VertexPositionTexture"/> structure.
            </summary>
            <param name="position">The vertex position.</param>
            <param name="textureCoordinate">The texture coordinate.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.VertexPositionTexture.TwistedLogik#Ultraviolet#Graphics#IVertexType#VertexDeclaration">
            <summary>
            Gets the vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionTexture.VertexDeclaration">
            <summary>
            The vertex declaration.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionTexture.Position">
            <summary>
            The vertex position.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexPositionTexture.TextureCoordinate">
            <summary>
            The texture coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.VertexUsage">
            <summary>
            Provides usage hints as to the intended purpose of a vertex element.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexUsage.Position">
            <summary>
            The element provides vertex position data.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexUsage.Color">
            <summary>
            The element provides color data.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Graphics.VertexUsage.TextureCoordinate">
            <summary>
            The element provides texture coordinate data.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Graphics.Viewport">
            <summary>
            Represents a region of the screen in which rendering takes place.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Graphics.Viewport"/> structure.
            </summary>
            <param name="x">The x-coordinate of the upper-left corner of the viewport on the render target surface.</param>
            <param name="y">The y-coordinate of the upper-left corner of the viewport on the render target surface.</param>
            <param name="width">The width of the viewport in pixels.</param>
            <param name="height">The height of the viewport in pixels.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.op_Equality(TwistedLogik.Ultraviolet.Graphics.Viewport,TwistedLogik.Ultraviolet.Graphics.Viewport)">
            <summary>
            Compares two viewports for equality.
            </summary>
            <param name="v1">The first <see cref="T:TwistedLogik.Ultraviolet.Graphics.Viewport"/> to compare.</param>
            <param name="v2">The second <see cref="T:TwistedLogik.Ultraviolet.Graphics.Viewport"/> to compare.</param>
            <returns><c>true</c> if the specified viewports are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.op_Inequality(TwistedLogik.Ultraviolet.Graphics.Viewport,TwistedLogik.Ultraviolet.Graphics.Viewport)">
            <summary>
            Compares two viewports for inequality.
            </summary>
            <param name="v1">The first <see cref="T:TwistedLogik.Ultraviolet.Graphics.Viewport"/> to compare.</param>
            <param name="v2">The second <see cref="T:TwistedLogik.Ultraviolet.Graphics.Viewport"/> to compare.</param>
            <returns><c>true</c> if the specified viewports are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Graphics.Viewport.Equals(TwistedLogik.Ultraviolet.Graphics.Viewport)">
            <summary>
            Determines whether this instance is equal to the specified viewport.
            </summary>
            <param name="other">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Viewport"/> to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified viewport; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Viewport.X">
            <summary>
            Gets the x-coordinate of the upper-left corner of the viewport on the render target surface.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Viewport.Y">
            <summary>
            Gets the y-coordinate of the upper-left corner of the viewport on the render target surface.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Viewport.Width">
            <summary>
            Gets the width of the viewport in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Graphics.Viewport.Height">
            <summary>
            Gets the height of the viewport in pixels.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IInterpolatable`1">
            <summary>
            Represents an object which can be interpolated.
            </summary>
            <typeparam name="T">The type which is being interpolated.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IInterpolatable`1.Interpolate(`0,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.ButtonState">
            <summary>
            Represents the state of an input button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.ButtonState.Up">
            <summary>
            The button is up.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.ButtonState.Down">
            <summary>
            The button is down.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.ButtonState.Pressed">
            <summary>
            The button was pressed this frame.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.ButtonState.Released">
            <summary>
            The button was released this frame.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.DummyInputBinding">
            <summary>
            Represents an input binding which corresponds to no device and which is never pressed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.Update">
            <summary>
            Updates the binding's state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.UsesSameButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same button configuration as the specified input binding.
            </summary>
            <param name="binding">The input binding to compare against this input binding.</param>
            <returns>true if the specified input binding uses the same device and the same button 
            configuration as this input binding; otherwise, false.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.UsesSamePrimaryButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same primary buttons as the specified input binding.
            </summary>
            <param name="binding">The input binding to compare against this input binding.</param>
            <returns>true if the specified input binding uses the same device and the same primary 
            buttons as this input binding; otherwise, false.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.IsDown">
            <summary>
            Gets a value indicating whether the binding is down.
            </summary>
            <returns>true if the binding is down; otherwise, false.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.IsUp">
            <summary>
            Gets a value indicating whether the binding is up.
            </summary>
            <returns>true if the binding is up; otherwise, false.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.IsPressed(System.Boolean)">
            <summary>
            Gets a value indicating whether the binding was pressed this frame.
            </summary>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns>true if the binding was pressed this frame; otherwise, false.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.IsReleased">
            <summary>
            Gets a value indicating whether the binding was released this frame.
            </summary>
            <returns>true if the binding was released this frame; otherwise, false.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.ToXml(System.String)">
            <summary>
            Creates an XML element that represents the binding.
            </summary>
            <param name="name">The binding's name.</param>
            <returns>An XML element that represents the binding.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.DummyInputBinding.CalculatePriority">
            <summary>
            Calculates the binding's priority relative to other bindings with the same primary buttons.
            </summary>
            <returns>The binding's priority relative to other bindings with the same primary buttons.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadAxis">
            <summary>
            Represents the axes available on a <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadAxis.None">
            <summary>
            No game pad axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadAxis.LeftJoystickX">
            <summary>
            The left joystick x-axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadAxis.LeftJoystickY">
            <summary>
            The left joystick y-axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadAxis.RightJoystickX">
            <summary>
            The right joystick x-axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadAxis.RightJoystickY">
            <summary>
            The right joystick y-axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadAxis.LeftTrigger">
            <summary>
            The left trigger axis.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadAxis.RightTrigger">
            <summary>
            The right trigger axis.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadButton">
            <summary>
            Represents the buttons available on a <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.None">
            <summary>
            No game pad button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.A">
            <summary>
            The A button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.B">
            <summary>
            The B button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.X">
            <summary>
            The X button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.Y">
            <summary>
            The Y button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.Back">
            <summary>
            The Back button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.Guide">
            <summary>
            The Guide button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.Start">
            <summary>
            The Start button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.LeftStick">
            <summary>
            The left joystick button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.RightStick">
            <summary>
            The right joystick button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.LeftShoulder">
            <summary>
            The left shoulder button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.RightShoulder">
            <summary>
            The right shoulder button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.DPadUp">
            <summary>
            The up button on the directional pad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.DPadDown">
            <summary>
            The down button on the directional pad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.DPadLeft">
            <summary>
            The left button on the directional pad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadButton.DPadRight">
            <summary>
            The right button on the directional pad.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadButtonPressedEventHandler">
            <summary>
            Represents the method that is called when a game pad button is pressed.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> that raised the event.</param>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadButton"/> value that represents the button that was pressed.</param>
            <param name="repeat">A value indicating whether this is a repeated button press.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadButtonReleasedEventHandler">
            <summary>
            Represents the method that is called when a game pad button is pressed.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> that raised the event.</param>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadButton"/> value that represents the button that was released.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadAxisEventHandler">
            <summary>
            Represents the method that is called when a game pad axis changes its value.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> that raised the event.</param>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> value that represents the axis that changed.</param>
            <param name="value">The axis' value.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadAxisPressedEventHandler">
            <summary>
            Represents the method that is called when a game pad axis is pressed.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> that raised the event.</param>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> value that represents the axis that was pressed.</param>
            <param name="value">The axis' value.</param>
            <param name="repeat">A value indicating whether this is a repeated axis press.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadAxisReleasedEventHandler">
            <summary>
            Represents the method that is called when a game pad axis is released.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> that raised the event.</param>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> value that represents the axis that was released.</param>
            <param name="value">The axis' value.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadAxisVectorEventHandler">
            <summary>
            Represents the method that is called when a game pad axis vector changes its value.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> that raised the event.</param>
            <param name="vector">The axis' vector.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadDevice">
            <summary>
            Represents a game pad input device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.GetJoystickDirection(TwistedLogik.Ultraviolet.Input.GamePadJoystick,System.Nullable{System.Single})">
            <summary>
            Gets the direction in which the specified joystick is pointed, using the specified minimum threshold value.
            If no threshold is specified, the value of <see cref="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold"/> is used instead.
            </summary>
            <param name="joystick">A <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadJoystick"/> value that represents the joystick to evaluate.</param>
            <param name="threshold">The threshold value at which the joystick is considered to be pointed in a particular direction.</param>
            <returns>A set of <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection"/> values which represent the joystick's direction.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.GetJoystickDirectionFromAxis(TwistedLogik.Ultraviolet.Input.GamePadAxis,System.Nullable{System.Single})">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection"/> value that corresponds to the state of the specified axis.
            </summary>
            <param name="axis">A <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> value to evaluate.</param>
            <param name="threshold">The threshold value at which an axis is considered to be pointed in a particular direction.</param>
            <returns>A set of <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection"/> values which represent the specified axis' direction.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.GetAxisValue(TwistedLogik.Ultraviolet.Input.GamePadAxis)">
            <summary>
            Gets the value of the specified game pad axis.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> value to retrieve.</param>
            <returns>The value of the specified game pad axis.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.IsAxisDown(TwistedLogik.Ultraviolet.Input.GamePadAxis)">
            <summary>
            Gets a value indicating whether the specified game pad axis is currently considered "down"
            in accordance with the <see cref="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold"/> property.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> to evaluate.</param>
            <returns><c>true</c> if the axis is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.IsAxisUp(TwistedLogik.Ultraviolet.Input.GamePadAxis)">
            <summary>
            Gets a value indicating whether the specified game pad axis is currently considered "up"
            in accordance with the <see cref="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold"/> property.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> to evaluate.</param>
            <returns><c>true</c> if the axis is up; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.IsAxisPressed(TwistedLogik.Ultraviolet.Input.GamePadAxis)">
            <summary>
            Gets a value indicating whether the specified game pad axis is currently considered "pressed"
            in accordance with the <see cref="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold"/> property.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> to evaluate.</param>
            <returns><c>true</c> if the axis is pressed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.IsAxisReleased(TwistedLogik.Ultraviolet.Input.GamePadAxis)">
            <summary>
            Gets a value indicating whether the specified game pad axis is currently considered "released"
            in accordance with the <see cref="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold"/> property.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> to evaluate.</param>
            <returns><c>true</c> if the axis is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.Name">
            <summary>
            Gets the device's name.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.PlayerIndex">
            <summary>
            Gets the index of the player that corresponds to this device.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold">
            <summary>
            Gets or sets the threshold at which an axis is considered to be "down."
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.LeftTrigger">
            <summary>
            Gets the normalized value of the left trigger axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.RightTrigger">
            <summary>
            Gets the normalized value of the right trigger axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.LeftJoystickX">
            <summary>
            Gets the normalized value of the left joystick x-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.LeftJoystickY">
            <summary>
            Gets the normalized value of the left joystick y-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.LeftJoystickVector">
            <summary>
            Gets a vector representing the position of the left joystick.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.RightJoystickX">
            <summary>
            Gets the normalized value of the right joystick x-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.RightJoystickY">
            <summary>
            Gets the normalized value of the right joystick y-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.RightJoystickVector">
            <summary>
            Gets a vector representing the position of the right joystick.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.ButtonPressed">
            <summary>
            Occurs when one of the game pad's buttons is pressed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.ButtonReleased">
            <summary>
            Occurs when one of the game pad's buttons is released.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisChanged">
            <summary>
            Occurs when the value of one of the game pad's axes changes.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisPressed">
            <summary>
            Occurs when one of the game pad's axes enters the "pressed" state, as determined by
            the value of the <see cref="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold"/> property.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisReleased">
            <summary>
            Occurs when one of the game pad's axes leaves hte "pressed" state, as determined by
            the value of the <see cref="P:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisDownThreshold"/> property.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.LeftJoystickVectorChanged">
            <summary>
            Occurs when the value of the game pad's left joystick vector changes.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.RightJoystickVectorChanged">
            <summary>
            Occurs when the value of the game pad's right joystick vector changes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.OnButtonPressed(TwistedLogik.Ultraviolet.Input.GamePadButton,System.Boolean)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.ButtonPressed"/> event.
            </summary>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadButton"/> value that represents the button that was pressed.</param>
            <param name="repeat">A value indicating whether this is a repeated button press.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.OnButtonReleased(TwistedLogik.Ultraviolet.Input.GamePadButton)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.ButtonReleased"/> event.
            </summary>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadButton"/> value that represents the button that was pressed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.OnAxisChanged(TwistedLogik.Ultraviolet.Input.GamePadAxis,System.Single)">
            <summary>
            Raises the AxisChanged event.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> value that represents the axis that changed.</param>
            <param name="value">The axis' value.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.OnAxisPressed(TwistedLogik.Ultraviolet.Input.GamePadAxis,System.Single,System.Boolean)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisPressed"/> event.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> that was pressed.</param>
            <param name="value">The axis' value.</param>
            <param name="repeat">A value indicating whether this is a repeated axis press.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.OnAxisReleased(TwistedLogik.Ultraviolet.Input.GamePadAxis,System.Single)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.GamePadDevice.AxisReleased"/> event.
            </summary>
            <param name="axis">The <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadAxis"/> that was released.</param>
            <param name="value">The axis' value.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.OnLeftJoystickVectorChanged(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Raises the LeftJoystickVectorChanged event.
            </summary>
            <param name="vector">The axis' vector.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadDevice.OnRightJoystickVectorChanged(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Raises the RightJoystickVectorChanged event.
            </summary>
            <param name="vector">The axis' vector.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadInputBinding">
            <summary>
            Represents a game pad input binding.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="element">The XML element that contains the binding data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.Int32,TwistedLogik.Ultraviolet.Input.GamePadButton)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="playerIndex">The index of the player for which to create the binding.</param>
            <param name="button">A <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadButton"/> value representing the binding's primary button.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.Update">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.UsesSameButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.UsesSamePrimaryButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.IsDown">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.IsUp">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.IsPressed(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.IsReleased">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.PlayerIndex">
            <summary>
            Gets the index of the 
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.Button">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadButton"/> value that represents the binding's primary button.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.ToXml(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.GamePadInputBinding.CalculatePriority">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputActionEventHandler">
            <summary>
            Represents the method that is called when an input action is pressed or released.
            </summary>
            <param name="action">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputAction"/> that raised the event.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputAction">
            <summary>
            Represents an input action associated with one or more input bindings.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.#ctor(TwistedLogik.Ultraviolet.Input.InputActionCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.InputAction"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.Update">
            <summary>
            Updates the input action's state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.AdjustPriority(System.Nullable{System.Int32})">
            <summary>
            Adjusts the input action's priority by the specified amount.
            </summary>
            <remarks>Higher values indicate higher priority.</remarks>
            <param name="priorityAdjustment">The amount by which to adjust the action's priority, 
            or <c>null</c> to reset the input action's priority adjustment.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.IsDown">
            <summary>
            Gets a value indicating whether the binding is down.
            </summary>
            <returns><c>true</c> if the binding is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.IsUp">
            <summary>
            Gets a value indicating whether the binding is up.
            </summary>
            <returns><c>true</c> if the binding is up; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.IsPressed(System.Boolean)">
            <summary>
            Gets a value indicating whether the binding was pressed this frame.
            </summary>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns><c>true</c> if the binding was pressed this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.IsReleased">
            <summary>
            Gets a value indicating whether the binding was released this frame.
            </summary>
            <returns><c>true</c> if the binding was released this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.GetState(System.Boolean)">
            <summary>
            Gets the binding's current state.
            </summary>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Input.ButtonState"/> value representing the binding's current state.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.InputAction.Primary">
            <summary>
            Gets or sets the primary binding associated with this action.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.InputAction.Secondary">
            <summary>
            Gets or sets the secondary binding associated with this action.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.InputAction.Enabled">
            <summary>
            Gets or sets a value indicating whether this action is enabled.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.InputAction.Pressed">
            <summary>
            Occurs when one of the action's associated bindings is pressed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.InputAction.Released">
            <summary>
            Occurs when one of the action's associated bindings is released after being pressed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.Register(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Registers the specified binding.
            </summary>
            <param name="binding">The input binding to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.Unregister(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Unregisters the specified input binding.
            </summary>
            <param name="binding">The input binding to unregister.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.OnPressed">
            <summary>
            Raises the Pressed event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputAction.OnReleased">
            <summary>
            Raises the Released event.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputActionCollection">
            <summary>
            Represents a collection of named input actions.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.InputActionCollection"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.CreateSingleton``1">
            <summary>
            Creates an <see cref="T:TwistedLogik.Ultraviolet.UltravioletSingleton`1"/> which encapsulates an instance of the specified input action collection type.
            </summary>
            <typeparam name="T">The type of input action collection for which to create a singleton.</typeparam>
            <returns>An <see cref="T:TwistedLogik.Ultraviolet.UltravioletSingleton`1"/> which encapsulates an instance of the specified input action collection type.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.UnbindConflicts(TwistedLogik.Ultraviolet.Input.InputBinding,System.Predicate{TwistedLogik.Ultraviolet.Input.InputAction})">
            <summary>
            Removes any bindings which conflict with the specified binding.
            </summary>
            <param name="binding">The input binding for which to unbind conflicts.</param>
            <param name="predicate">A predicate specifying which input actions to unbind.If <c>null</c>, 
            all potential conflicts are unbound.</param>
            <returns>A collection of input actions which were affected by this operation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.Update">
            <summary>
            Updates the collection's input bindings.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.Save(System.String)">
            <summary>
            Saves the collection's input actions to the specified path.
            </summary>
            <param name="path">The path to the file to save.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.Save(System.IO.Stream)">
            <summary>
            Saves the collection's input actions to the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to which to save the input actions.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.Load(System.String,System.Boolean)">
            <summary>
            Loads the collection's input actions from the specified path.
            </summary>
            <param name="path">The path to the file to load.</param>
            <param name="throwIfNotFound">A value indicating whether to throw an exception if the specified file is not found.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.Load(System.IO.Stream)">
            <summary>
            Loads the collection's input actions from the specified stream.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> from which to load the input actions.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.CreateActions">
            <summary>
            Creates the collection's action set.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.ResetToDefaults">
            <summary>
            Resets the collection to its default state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String,TwistedLogik#Ultraviolet#Input#InputAction}}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.RegisterBinding(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Registers an input binding with the collection.
            </summary>
            <param name="binding">The input binding to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.UnregisterBinding(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Unregisters an input binding from the collection.
            </summary>
            <param name="binding">The input binding to unregister.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.OnCreatingActions">
            <summary>
            Called when the collection is creating its actions.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.OnResetting">
            <summary>
            Called when the collection is being reset to its default values.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.OnLoading">
            <summary>
            Called when a set of input bindings is about to be loaded.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.OnLoaded">
            <summary>
            Called after a set of input bindings has been loaded.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.CreateAction(System.String)">
            <summary>
            Creates and registers a new input action.
            </summary>
            <param name="name">The unique name of the input action.</param>
            <returns>The input action that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.CreateKeyboardBinding(TwistedLogik.Ultraviolet.Input.Key,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new keyboard binding.
            </summary>
            <param name="key">The binding's primary key.</param>
            <param name="control">A value indicating whether the binding requires the Control modifier.</param>
            <param name="alt">A value indicating whether the binding requires the Alt modifier.</param>
            <param name="shift">A value indicating whether the binding requires the Shift modifier.</param>
            <returns>The binding that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.CreateMouseBinding(TwistedLogik.Ultraviolet.Input.MouseButton,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new mouse binding.
            </summary>
            <param name="button">The binding's primary button.</param>
            <param name="control">A value indicating whether the binding requires the Control modifier.</param>
            <param name="alt">A value indicating whether the binding requires the Alt modifier.</param>
            <param name="shift">A value indicating whether the binding requires the Shift modifier.</param>
            <returns>The binding that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.CreateGamePadBinding(System.Int32,TwistedLogik.Ultraviolet.Input.GamePadButton)">
            <summary>
            Creates a new game pad binding.
            </summary>
            <param name="playerIndex">The index of the player for which to create the binding.</param>
            <param name="button">The binding's primary button.</param>
            <returns>The binding that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.SerializeToXml">
            <summary>
            Serializes the input actions into an XML document.
            </summary>
            <returns>An XML document that represents the input actions.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.DeserializeFromXml(System.Xml.Linq.XDocument)">
            <summary>
            Deserializes the input actions from the specified XML file.
            </summary>
            <param name="xml">The XML file from which to deserialize the input actions.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.CreateBindingFromXml(System.Xml.Linq.XElement)">
            <summary>
            Creates an input binding from the specified XML element.
            </summary>
            <param name="element">The XML element that represents the input binding to create.</param>
            <returns>The input binding that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup">
            <summary>
            Represents a group of input bindings that use the same primary buttons.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup.InputBindingComparer">
            <summary>
            Represents a comparer for sorting input bindings by priority.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup.InputBindingComparer.Compare(TwistedLogik.Ultraviolet.Input.InputBinding,TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Compares two input bindings by priority.
            </summary>
            <param name="x">The first input binding to compare.</param>
            <param name="y">The second input binding to compare.</param>
            <returns>A value representing the relative order of the compared input bindings.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup.Add(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Adds a binding to the group.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to add to the group.</param>
            <returns><c>true</c> if the binding was added to the group; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup.Remove(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Removes a binding from the group.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to remove from the group.</param>
            <returns><c>true</c> if the binding was removed from the group; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup.Clear">
            <summary>
            Clears the binding group.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup.Update">
            <summary>
            Updates the bindings in the group.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.InputActionCollection.InputBindingGroup.Empty">
            <summary>
            Gets a value indicating whether the group is empty.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputBindingEventHandler">
            <summary>
            Represents the method that is called when an <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> is pressed or released.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> that raised the event.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputBinding">
            <summary>
            Represents an input binding.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.AdjustPriority(System.Nullable{System.Int32})">
            <summary>
            Adjusts the input binding's priority by the specified amount.
            </summary>
            <remarks>Higher values indicate higher priority.</remarks>
            <param name="priorityAdjustment">The amount by which to adjust the binding's priority, 
            or <c>null</c> to reset the input binding's priority adjustment.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.Update">
            <summary>
            Updates the binding's state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.UsesSameButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same button configuration as the specified input binding.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to compare against this input binding.</param>
            <returns><c>true</c> if the specified input binding uses the same device and the same button 
            configuration as this input binding; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.UsesSamePrimaryButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same primary buttons as the specified input binding.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to compare against this input binding.</param>
            <returns><c>true</c> if the specified input binding uses the same device and the same primary 
            buttons as this input binding; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.IsDown">
            <summary>
            Gets a value indicating whether the binding is down.
            </summary>
            <returns><c>true</c> if the binding is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.IsUp">
            <summary>
            Gets a value indicating whether the binding is up.
            </summary>
            <returns><c>true</c> if the binding is up; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.IsPressed(System.Boolean)">
            <summary>
            Gets a value indicating whether the binding was pressed this frame.
            </summary>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns><c>true</c> if the binding was pressed this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.IsReleased">
            <summary>
            Gets a value indicating whether the binding was released this frame.
            </summary>
            <returns><c>true</c> if the binding was released this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.GetState(System.Boolean)">
            <summary>
            Gets the binding's current state.
            </summary>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Input.ButtonState"/> value indicating the binding's current state.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.InputBinding.Priority">
            <summary>
            Gets the input binding's priority relative to other input bindings
            which use the same primary buttons.
            </summary>
            <remarks>Higher values indicate higher priority.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.InputBinding.PriorityIsAdjusted">
            <summary>
            Gets a value indicating whether this binding's priority has been adjusted.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.InputBinding.Enabled">
            <summary>
            Gets or sets a value indicating whether this binding is enabled.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.InputBinding.Pressed">
            <summary>
            Occurs when the binding is pressed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.InputBinding.Released">
            <summary>
            Occurs when the binding is released.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.ToXml(System.String)">
            <summary>
            Creates an XML element that represents the binding.
            </summary>
            <param name="name">The name to give to the created XML element.</param>
            <returns>An XML element that represents the binding.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.CalculatePriority">
            <summary>
            Calculates the binding's priority relative to other bindings with the same primary buttons.
            </summary>
            <returns>The binding's priority relative to other bindings with the same primary buttons.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.OnPressed">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.InputBinding.Pressed"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputBinding.OnReleased">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.InputBinding.Released"/> event.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.InputDevice`1">
            <summary>
            Represents any input device.
            </summary>
            <typeparam name="T">The type of button exposed by the device.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputDevice`1.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.InputDevice`1"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputDevice`1.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the device's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputDevice`1.IsButtonDown(`0)">
            <summary>
            Gets a value indicating whether the specified button is currently down.
            </summary>
            <param name="button">The button to evaluate.</param>
            <returns><c>true</c> if the button is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputDevice`1.IsButtonUp(`0)">
            <summary>
            Gets a value indicating whether the specified button is currently up.
            </summary>
            <param name="button">The button to evaluate.</param>
            <returns><c>true</c> if the button is up; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputDevice`1.IsButtonPressed(`0,System.Boolean)">
            <summary>
            Gets a value indicating whether the specified button is currently pressed.
            </summary>
            <param name="button">The button to evaluate.</param>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns><c>true</c> if the button is pressed; otherwise, <c>false</c>.</returns>        
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputDevice`1.IsButtonReleased(`0)">
            <summary>
            Gets a value indicating whether the specified button is currently released.
            </summary>
            <param name="button">The button to evaluate.</param>
            <returns><c>true</c> if the button is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.InputDevice`1.GetButtonState(`0)">
            <summary>
            Gets the current state of the specified button.
            </summary>
            <param name="button">The button for which to retrieve a state.</param>
            <returns>The current state of the specified button.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadJoystick">
            <summary>
            Represents the joysticks on a game pad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystick.None">
            <summary>
            No joystick.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystick.Left">
            <summary>
            The left joystick.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystick.Right">
            <summary>
            The right joystick.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection">
            <summary>
            Represents the directions in which a game pad joystick can be oriented.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection.None">
            <summary>
            The joystick is at rest.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection.Up">
            <summary>
            The joystick is pointed up.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection.Down">
            <summary>
            The joystick is pointed down.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection.Left">
            <summary>
            The joystick is pointed left.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.GamePadJoystickDirection.Right">
            <summary>
            The joystick is pointed right.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.Key">
            <summary>
            Represents the virtual, mapped keys on a keyboard.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.None">
            <summary>
            No key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Return">
            <summary>
            The Return/Enter key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Escape">
            <summary>
            The Escape key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Backspace">
            <summary>
            The Backspace key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Space">
            <summary>
            The space ( ) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Exclamation">
            <summary>
            The exclamation (!) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.DoubleQuote">
            <summary>
            The double quote (") key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Hash">
            <summary>
            The hash (#) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Percent">
            <summary>
            The percent (%) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Dollar">
            <summary>
            The dollar ($) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Ampersand">
            <summary>
            The ampersand (&amp;) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.SingleQuote">
            <summary>
            The single quote (') key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.LeftParenthesis">
            <summary>
            The left parenthesis key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.RightParenthesis">
            <summary>
            The right parenthesis key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Asterisk">
            <summary>
            The asterisk (*) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Plus">
            <summary>
            The plus (+) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Comma">
            <summary>
            The comma (,) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Minus">
            <summary>
            The minus (-) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Period">
            <summary>
            The period (.) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Slash">
            <summary>
            The slash (/) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Colon">
            <summary>
            The colon (:) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Semicolon">
            <summary>
            The semicolon (;) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Less">
            <summary>
            The less than (&lt;) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Equals">
            <summary>
            The equals (=) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Greater">
            <summary>
            The greater than (&gt;) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Question">
            <summary>
            The question mark (?) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.At">
            <summary>
            The at sign (@) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.LeftBracket">
            <summary>
            The left bracket ([) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Backslash">
            <summary>
            The backslash (\) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.RightBracket">
            <summary>
            The right bracket (]) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Caret">
            <summary>
            The caret (^) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Underscore">
            <summary>
            The underscore (_) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.BackQuote">
            <summary>
            The back quote (`) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.P">
            <summary>
             The P key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.CapsLock">
            <summary>
            The Caps Lock key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.PrintScreen">
            <summary>
            The Print Screen key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.ScrollLock">
            <summary>
            The Scroll Lock key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Pause">
            <summary>
            The Pause key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.PageDown">
            <summary>
            The Page Down key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Right">
            <summary>
            The right arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Left">
            <summary>
            The left arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Down">
            <summary>
            The down arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Up">
            <summary>
            The up arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.NumLockClear">
            <summary>
            The Num Lock/Clear key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadDivide">
            <summary>
            The divide (/) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMultiply">
            <summary>
            The multiply (*) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMinus">
            <summary>
            The minus (-) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadPlus">
            <summary>
            The plus (+) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadEnter">
            <summary>
            The Enter/Return key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD1">
            <summary>
            The 1 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD2">
            <summary>
            The 2 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD3">
            <summary>
            The 3 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD4">
            <summary>
            The 4 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD5">
            <summary>
            The 5 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD6">
            <summary>
            The 6 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD7">
            <summary>
            The 7 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD8">
            <summary>
            The 8 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD9">
            <summary>
            The 9 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD0">
            <summary>
            The 9 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadPeriod">
            <summary>
            The period (.) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Application">
            <summary>
            The Application key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Power">
            <summary>
            The Power key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadEquals">
            <summary>
            The equals (=) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F13">
            <summary>
            The F13 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F14">
            <summary>
            The F14 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F15">
            <summary>
            The F15 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F16">
            <summary>
            The F16 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F17">
            <summary>
            The F17 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F18">
            <summary>
            The F18 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F19">
            <summary>
            The F19 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F20">
            <summary>
            The F20 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F21">
            <summary>
            The F21 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F22">
            <summary>
            The F22 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F23">
            <summary>
            The F23 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.F24">
            <summary>
            The F24 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Execute">
            <summary>
            The Execute key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Help">
            <summary>
            The Help key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Menu">
            <summary>
            The Menu key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Select">
            <summary>
            The Select key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Stop">
            <summary>
            The Stop key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Again">
            <summary>
            The Again key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Undo">
            <summary>
            The Undo key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Cut">
            <summary>
            The Cut key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Copy">
            <summary>
            The Copy key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Paste">
            <summary>
            The Paste key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Find">
            <summary>
            The Find key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Mute">
            <summary>
            The Mute key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.VolumeUp">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.VolumeDown">
            <summary>
            The Volume Down key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadComma">
            <summary>
            The comma (,) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadEqualsAS400">
            <summary>
            The equals key on an AS/400 keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AltErase">
            <summary>
            The Alternate Erase key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.SysReq">
            <summary>
            The SysReq key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Cancel">
            <summary>
            The Cancel key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Clear">
            <summary>
            The Clear key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Prior">
            <summary>
            The Prior key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Return2">
            <summary>
            The second Return/Enter key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Separator">
            <summary>
            The Separator key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Out">
            <summary>
            The Out key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Oper">
            <summary>
            The Oper key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.ClearAgain">
            <summary>
            The Clear/Again key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.CrSel">
            <summary>
            The CrSel key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.ExSel">
            <summary>
            The ExSel key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Keypad00">
            <summary>
            The 00 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Keypad000">
            <summary>
            The 000 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.ThousandsSeparator">
            <summary>
            The thousands separator key
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.DecimalSeparator">
            <summary>
            The decimal separator key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.CurrencyUnit">
            <summary>
            The currency unit key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.CurrencySubUnit">
            <summary>
            The currency sub-unit key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadLeftParenthesis">
            <summary>
            The left parenthesis key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadRightParenthesis">
            <summary>
            The right parenthesis key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadLeftBrace">
            <summary>
            The left brace ([) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadRightBrace">
            <summary>
            The right brace (]) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadTab">
            <summary>
            The Tab key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadBackspace">
            <summary>
            The Backspace key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadA">
            <summary>
            The A key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadB">
            <summary>
            The B key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadC">
            <summary>
            The C key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadD">
            <summary>
            The D key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadE">
            <summary>
            The E key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadF">
            <summary>
            The F key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadXor">
            <summary>
            The XOR key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadPower">
            <summary>
            The Power key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadPercent">
            <summary>
            The percent (%) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadLess">
            <summary>
            The less than (&lt;) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadGreater">
            <summary>
            The greater than (&gt;) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadAmpersand">
            <summary>
            The ampersand (&amp;) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadDoubleAmpersand">
            <summary>
            The double ampersand (&amp;&amp;) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadVerticalBar">
            <summary>
            The vertical bar (|) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadDoubleVerticalBar">
            <summary>
            The double vertical bar (||) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadColon">
            <summary>
            The colon (:) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadHash">
            <summary>
            The hash (#) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadSpace">
            <summary>
            The space ( ) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadAt">
            <summary>
            The at sign (@) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadExclamation">
            <summary>
            The exclamation mark (!) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMemStore">
            <summary>
            The Mem Store key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMemRecall">
            <summary>
            The Mem Recall key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMemClear">
            <summary>
            The Mem Clear key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMemAdd">
            <summary>
            The Mem Add key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMemSubtract">
            <summary>
            The Mem Subtract key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMemMultiply">
            <summary>
            The Mem Multiply key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadMemDivide">
            <summary>
            The Mem Divide key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadPlusMinus">
            <summary>
            The plus/minus key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadClear">
            <summary>
            The Clear key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadClearEntry">
            <summary>
            The Clear Entry key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadBinary">
            <summary>
            The Binary key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadOctal">
            <summary>
            The Octal key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadDecimal">
            <summary>
            The Decimal key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.KeypadHexadecimal">
            <summary>
            The Hexadecimal key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.LeftControl">
            <summary>
            The left Control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.LeftAlt">
            <summary>
            The left Alt key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.LeftGui">
            <summary>
            The left GUI key (i.e. the Windows key on Windows).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.RightControl">
            <summary>
            The right Control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.RightAlt">
            <summary>
            The right Alt key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.RightGui">
            <summary>
            The right GUI key (i.e. the Windows key on Windows).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Mode">
            <summary>
            The Mode key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AudioNext">
            <summary>
            The Audio Next key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AudioPrev">
            <summary>
            The Audio Prev key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AudioStop">
            <summary>
            The Audio Stop key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AudioPlay">
            <summary>
            The Audio Play key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AudioMute">
            <summary>
            The Audio Mute key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.MediaSelect">
            <summary>
            The Media Select key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.WorldWideWeb">
            <summary>
            The World Wide Web key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Mail">
            <summary>
            The Mail key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Calculator">
            <summary>
            The Calculator key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Computer">
            <summary>
            The Computer key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AppControlSearch">
            <summary>
            The Search application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AppControlHome">
            <summary>
            The Home application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AppControlBack">
            <summary>
            The Back application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AppControlForward">
            <summary>
            The Forward application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AppControlStop">
            <summary>
            The Stop application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AppControlRefresh">
            <summary>
            The Refresh application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.AppControlBookmarks">
            <summary>
            The Bookmarks application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.BrightnessDown">
            <summary>
            The Brightness Down key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.BrightnessUp">
            <summary>
            The Brightness Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.DisplaySwitch">
            <summary>
            The Display Switch key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.IlluminationToggle">
            <summary>
            The Illumination Toggle key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.IlluminationDown">
            <summary>
            The Illumination Down key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.IlluminationUp">
            <summary>
            The Illumination Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Eject">
            <summary>
            The Eject key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Key.Sleep">
            <summary>
            The Sleep key.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.KeyboardButtonEventHandler">
            <summary>
            Represents the method that is called when a keyboard button is pressed or released.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardDevice"/> that raised the event.</param>
            <param name="scancode">The <see cref="T:TwistedLogik.Ultraviolet.Input.Scancode"/> value that represents the key that was pressed.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.KeyPressedEventHandler">
            <summary>
            Represents the method that is called when a keyboard key is pressed.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardDevice"/> that raised the event.</param>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> value that represents the key that was pressed.</param>
            <param name="ctrl">A value indicating whether the Control modifier is active.</param>
            <param name="alt">A value indicating whether the Alt modifier is active.</param>
            <param name="shift">A value indicating whether the Shift modifier is active.</param>
            <param name="repeat">A value indicating whether this is a repeated key press.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.KeyReleasedEventHandler">
            <summary>
            Represents the method that is called when a keyboard key is released.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardDevice"/> that raised the event.</param>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> value that represents the key that was released.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.TextInputEventHandler">
            <summary>
            Represents the method that is called when text input is available.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardDevice"/> that raised the event.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.KeyboardDevice">
            <summary>
            Represents a keyboard device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardDevice"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.GetTextInput(System.Text.StringBuilder,System.Boolean)">
            <summary>
            Populates the specified <see cref="T:System.Text.StringBuilder"/> with the most recent text input.
            </summary>
            <param name="sb">The <see cref="T:System.Text.StringBuilder"/> to populate with text input data.</param>
            <param name="append">A value indicating whether to append the text input data to the existing data of <paramref name="sb"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsKeyDown(TwistedLogik.Ultraviolet.Input.Key)">
            <summary>
            Gets a value indicating whether the specified key is currently down.
            </summary>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> to evaluate.</param>
            <returns><c>true</c> if the key is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsKeyUp(TwistedLogik.Ultraviolet.Input.Key)">
            <summary>
            Gets a value indicating whether the specified key is currently up.
            </summary>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> to evaluate.</param>
            <returns><c>true</c> if the key is up; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsKeyPressed(TwistedLogik.Ultraviolet.Input.Key,System.Boolean)">
            <summary>
            Gets a value indicating whether the specified key is currently pressed.
            </summary>
            <remarks>Platforms may send multiple key press events while a key is held down.  Any such 
            event after the first is marked as a "repeat" event and should be handled accordingly.</remarks>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> to evaluate.</param>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated key press events on devices which support them.</param>
            <returns><c>true</c> if the key is pressed; otherwise, <c>false</c>.</returns>        
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsKeyReleased(TwistedLogik.Ultraviolet.Input.Key)">
            <summary>
            Gets a value indicating whether the specified key is currently released.
            </summary>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> to evaluate.</param>
            <returns><c>true</c> if the key is released; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.GetKeyState(TwistedLogik.Ultraviolet.Input.Key)">
            <summary>
            Gets the current state of the specified key.
            </summary>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> for which to retrieve a state.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Input.ButtonState"/> value indicating the state of the specified key.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsControlDown">
            <summary>
            Gets a value indicating whether one of the Control modifier keys is currently down.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsAltDown">
            <summary>
            Gets a value indicating whether one of the Alt modifier keys is currently down.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsShiftDown">
            <summary>
            Gets a value indicating whether one of the Shift modifier keys is currently down.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsNumLockDown">
            <summary>
            Gets a value indicating whether the Num Lock modifier is currently down.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardDevice.IsCapsLockDown">
            <summary>
            Gets a value indicating whether the Caps Lock modifier is currently down.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.ButtonPressed">
            <summary>
            Occurs when a button is pressed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.ButtonReleased">
            <summary>
            Occurs when a button is released.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.KeyPressed">
            <summary>
            Occurs when a key is pressed.
            </summary>
            <remarks>Platforms may send multiple key press events while a key is held down. Any such 
            event after the first is marked as a "repeat" event and should be handled accordingly.</remarks>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.KeyReleased">
            <summary>
            Occurs when a key is released.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.TextInput">
            <summary>
            Occurs when text input is available.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.TextEditing">
            <summary>
            Occurs when text is being edited.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.OnButtonPressed(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.Scancode)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.ButtonPressed"/> event.
            </summary>
            <param name="window">The window that raised the event.</param>
            <param name="scancode">The <see cref="T:TwistedLogik.Ultraviolet.Input.Scancode"/> that represents the button that was pressed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.OnButtonReleased(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.Scancode)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.ButtonReleased"/> event.
            </summary>
            <param name="window">The window that raised the event.</param>
            <param name="scancode">The <see cref="T:TwistedLogik.Ultraviolet.Input.Scancode"/> that represents the button that was released.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.OnKeyPressed(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.Key,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.KeyPressed"/> event.
            </summary>
            <remarks>Platforms may send multiple key press events while a key is held down.  Any such 
            event after the first is marked as a "repeat" event and should be handled accordingly.</remarks>
            <param name="window">The window that raised the event.</param>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> that was pressed.</param>
            <param name="ctrl">A value indicating whether the Control modifier is active.</param>
            <param name="alt">A value indicating whether the Alt modifier is active.</param>
            <param name="shift">A value indicating whether the Shift modifier is active.</param>
            <param name="repeat">A value indicating whether this is a repeated key press.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.OnKeyReleased(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.Key)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.KeyReleased"/> event.
            </summary>
            <param name="window">The window that raised the event.</param>
            <param name="key">The <see cref="T:TwistedLogik.Ultraviolet.Input.Key"/> that was released.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.OnTextInput(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.TextInput"/> event.
            </summary>
            <param name="window">The window that raised the event.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardDevice.OnTextEditing(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.KeyboardDevice.TextEditing"/> event.
            </summary>
            <param name="window">The window that raised the event.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding">
            <summary>
            Represents a keyboard input binding.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="element">The XML element that contains the binding data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Input.Key)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="key">A <see cref="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.Key"/> value representing the binding's primary key.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Input.Key,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="key">A <see cref="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.Key"/> value representing the binding's primary key.</param>
            <param name="control">A value indicating whether the binding requires the Control modifier.</param>
            <param name="alt">A value indicating whether the binding requires the Alt modifier.</param>
            <param name="shift">A value indicating whether the binding requires the Shift modifier.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.Update">
            <summary>
            Updates the binding's state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.UsesSameButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same button configuration as the specified input binding.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to compare against this input binding.</param>
            <returns><c>true</c> if the specified input binding uses the same device and the same button 
            configuration as this input binding; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.UsesSamePrimaryButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same primary buttons as the specified input binding.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to compare against this input binding.</param>
            <returns><c>true</c> if the specified input binding uses the same device and the same primary 
            buttons as this input binding; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.IsDown">
            <summary>
            Gets a value indicating whether the binding is down.
            </summary>
            <returns><c>true</c> if the binding is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.IsUp">
            <summary>
            Gets a value indicating whether the binding is up.
            </summary>
            <returns><c>true</c> if the binding is up; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.IsPressed(System.Boolean)">
            <summary>
            Gets a value indicating whether the binding was pressed this frame.
            </summary>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns><c>true</c> if the binding was pressed this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.IsReleased">
            <summary>
            Gets a value indicating whether the binding was released this frame.
            </summary>
            <returns><c>true</c> if the binding was released this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.Keyboard">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardDevice"/> that created this input binding.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.Key">
            <summary>
            Gets the <see cref="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.Key"/> value that represents the binding's primary key.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.IsControlRequired">
            <summary>
            Gets a value indicating whether this binding requires the Control modifier.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.IsAltRequired">
            <summary>
            Gets a value indicating whether this binding requires the Alt modifier.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.IsShiftRequired">
            <summary>
            Gets a value indicating whether this binding requires the Shift modifier.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.ToXml(System.String)">
            <summary>
            Creates an XML element that represents the binding.
            </summary>
            <param name="name">The name to give to the created XML element.</param>
            <returns>An XML element that represents the binding.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.CalculatePriority">
            <summary>
            Calculates the binding's priority relative to other bindings with the same primary buttons.
            </summary>
            <returns>The binding's priority relative to other bindings with the same primary buttons.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.KeyboardInputBinding.AreModifiersSatisfied">
            <summary>
            Gets a value indicating whether the binding's modifier states are satisfied.
            </summary>
            <returns><c>true</c> if the binding's modifier states are satisfied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.KeyboardMode">
            <summary>
            Represents the various display modes of software keyboards.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.KeyboardMode.Text">
            <summary>
            The keyboard will be optimized for text entry.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.KeyboardMode.Number">
            <summary>
            The keyboard will be optimized for number entry.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.KeyboardMode.Phone">
            <summary>
            The keyboard will be optimized for phone number entry.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.KeyboardMode.Datetime">
            <summary>
            The keyboard will be optimized for date/time entry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.MouseButton">
            <summary>
            Represents the set of buttons on a mouse.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.MouseButton.None">
            <summary>
            No mouse button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.MouseButton.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.MouseButton.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.MouseButton.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.MouseButton.XButton1">
            <summary>
            The first additional mouse button.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.MouseButton.XButton2">
            <summary>
            The second additional mouse button.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.MouseButtonEventHandler">
            <summary>
            Represents the method that is called when a mouse button is pressed or released.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseDevice"/> that raised the event.</param>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseButton"/> value that represents the button that was pressed or released.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.MouseMoveEventHandler">
            <summary>
            Represents the method that is called when the mouse is moved.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseDevice"/> that raised the event.</param>
            <param name="x">The x-coordinate of the mouse's current position.</param>
            <param name="y">The y-coordinate of the mouse's current position.</param>
            <param name="dx">The difference between the x-coordinate of the mouse's 
            current position and the x-coordinate of the mouse's previous position.</param>
            <param name="dy">The difference between the y-coordinate of the mouse's 
            current position and the y-coordinate of the mouse's previous position.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.MouseWheelEventHandler">
            <summary>
            Represents the method that is called when the mouse's wheel is scrolled.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseDevice"/> that raised the event.</param>
            <param name="x">The amount that the wheel was scrolled along the horizontal axis.</param>
            <param name="y">The amount that the wheel was scrolled along the vertical axis.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.MouseDevice">
            <summary>
            Represents a mouse device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.MouseDevice"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.GetPositionInWindow(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Gets the mouse cursor's position within the specified window.
            </summary>
            <param name="window">The window to evaluate.</param>
            <returns>The cursor's compositor-space position within the specified 
            window, or <see langword="null"/> if the cursor is outside of the window.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.IsButtonClicked(TwistedLogik.Ultraviolet.Input.MouseButton)">
            <summary>
            Gets a value indicating whether the specified button was clicked this frame.
            </summary>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseButton"/> value that represents the button to evaluate.</param>
            <returns><c>true</c> if the button was clicked this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.IsButtonDoubleClicked(TwistedLogik.Ultraviolet.Input.MouseButton)">
            <summary>
            Gets a value indicating whether the specified button was double clicked this frame.
            </summary>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseButton"/> value that represents the button to evaluate.</param>
            <returns><c>true</c> if the button was double clicked this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.Window">
            <summary>
            Gets the window that currently contains the mouse cursor.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.Position">
            <summary>
            Gets the mouse's current position.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.X">
            <summary>
            Gets the x-coordinate of the mouse's current position.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.Y">
            <summary>
            Gets the y-coordinate of the mouse's current position.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.WheelDeltaX">
            <summary>
            Gets the mouse's horizontal scroll wheel delta in the last frame.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.WheelDeltaY">
            <summary>
            Gets the mouse's vertical scroll wheel delta in the last frame.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.IsControlDown">
            <summary>
            Gets a value indicating whether one of the Control modifier keys is currently down.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.IsAltDown">
            <summary>
            Gets a value indicating whether one of the Alt modifier keys is currently down.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseDevice.IsShiftDown">
            <summary>
            Gets a value indicating whether one of the Shift modifier keys is currently down.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.MouseDevice.ButtonPressed">
            <summary>
            Occurs when a mouse button is pressed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.MouseDevice.ButtonReleased">
            <summary>
            Occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.MouseDevice.Click">
            <summary>
            Occurs when a mouse button is clicked.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.MouseDevice.DoubleClick">
            <summary>
            Occurs when a mouse button is double clicked.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.MouseDevice.Moved">
            <summary>
            Occurs when the mouse is moved.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.MouseDevice.WheelScrolled">
            <summary>
            Occurs when the mouse wheel is scrolled.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.OnButtonPressed(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.MouseButton)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.MouseDevice.ButtonPressed"/> event.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="button">The mouse button that was pressed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.OnButtonReleased(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.MouseButton)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.MouseDevice.ButtonReleased"/> event.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="button">The mouse button that was released.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.OnClick(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.MouseButton)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.MouseDevice.Click"/> event.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="button">The mouse button that was clicked.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.OnDoubleClick(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Input.MouseButton)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.MouseDevice.DoubleClick"/> event.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="button">The mouse button that was clicked.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.OnMoved(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.MouseDevice.Moved"/> event.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="x">The x-coordinate of the mouse's current position.</param>
            <param name="y">The y-coordinate of the mouse's current position.</param>
            <param name="dx">The difference between the x-coordinate of the mouse's 
            current position and the x-coordinate of the mouse's previous position.</param>
            <param name="dy">The difference between the y-coordinate of the mouse's 
            current position and the y-coordinate of the mouse's previous position.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseDevice.OnWheelScrolled(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,System.Int32,System.Int32)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.MouseDevice.WheelScrolled"/> event.
            </summary>
            <param name="window">The window in which the input event took place.</param>
            <param name="x">The amount that the wheel was scrolled along the horizontal axis.</param>
            <param name="y">The amount that the wheel was scrolled along the vertical axis.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.MouseInputBinding">
            <summary>
            Represents a mouse input binding.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.MouseInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="element">The XML element that contains the binding data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Input.MouseButton)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.MouseInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseButton"/> value that represents the binding's primary button.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.Input.MouseButton,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.MouseInputBinding"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="button">The <see cref="T:TwistedLogik.Ultraviolet.Input.MouseButton"/> value that represents the binding's primary button.</param>
            <param name="control">A value indicating whether the binding requires the Control modifier.</param>
            <param name="alt">A value indicating whether the binding requires the Alt modifier.</param>
            <param name="shift">A value indicating whether the binding requires the Shift modifier.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.Update">
            <summary>
            Updates the binding's state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.UsesSameButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same button configuration as the specified input binding.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to compare against this input binding.</param>
            <returns><c>true</c> if the specified input binding uses the same device and the same button 
            configuration as this input binding; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.UsesSamePrimaryButtons(TwistedLogik.Ultraviolet.Input.InputBinding)">
            <summary>
            Gets a value indicating whether the input binding uses the same device 
            and the same primary buttons as the specified input binding.
            </summary>
            <param name="binding">The <see cref="T:TwistedLogik.Ultraviolet.Input.InputBinding"/> to compare against this input binding.</param>
            <returns><c>true</c> if the specified input binding uses the same device and the same primary 
            buttons as this input binding; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.IsDown">
            <summary>
            Gets a value indicating whether the binding is down.
            </summary>
            <returns><c>true</c> if the binding is down; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.IsUp">
            <summary>
            Gets a value indicating whether the binding is up.
            </summary>
            <returns><c>true</c> if the binding is up; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.IsPressed(System.Boolean)">
            <summary>
            Gets a value indicating whether the binding was pressed this frame.
            </summary>
            <param name="ignoreRepeats">A value indicating whether to ignore repeated button press events on devices which support them.</param>
            <returns><c>true</c> if the binding was pressed this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.IsReleased">
            <summary>
            Gets a value indicating whether the binding was released this frame.
            </summary>
            <returns><c>true</c> if the binding was released this frame; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseInputBinding.Mouse">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Input.MouseDevice"/> that created this input binding.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseInputBinding.Button">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.Input.MouseButton"/> value that represents the binding's primary button.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseInputBinding.IsControlRequired">
            <summary>
            Gets a value indicating whether this binding requires the Control modifier.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseInputBinding.IsAltRequired">
            <summary>
            Gets a value indicating whether this binding requires the Alt modifier.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.MouseInputBinding.IsShiftRequired">
            <summary>
            Gets a value indicating whether this binding requires the Shift modifier.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.ToXml(System.String)">
            <summary>
            Creates an XML element that represents the binding.
            </summary>
            <param name="name">The name to give to the created XML element.</param>
            <returns>An XML element that represents the binding.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.CalculatePriority">
            <summary>
            Calculates the binding's priority relative to other bindings with the same primary buttons.
            </summary>
            <returns>The binding's priority relative to other bindings with the same primary buttons.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.MouseInputBinding.AreModifiersSatisfied">
            <summary>
            Gets a value indicating whether the binding's modifier states are satisfied.
            </summary>
            <returns><c>true</c> if the binding's modifier states are satisfied; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.Input"/> namespace contains types relating to Ultraviolet's input subsystem.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.Scancode">
            <summary>
            Represents the physical keys on a keyboard.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Unknown">
            <summary>
            Unknown scancode.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.B">
            <summary>
             The B key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Return">
            <summary>
            The Return/Enter key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Escape">
            <summary>
            The Escape key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Backspace">
            <summary>
            The Backspace key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Tab">
            <summary>
            The Tab key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Space">
            <summary>
            The space ( ) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Minus">
            <summary>
            The minus (-) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Equals">
            <summary>
            The equals (=) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.LeftBracket">
            <summary>
            The left bracket ([) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.RightBracket">
            <summary>
            The right bracket (]) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Backslash">
            <summary>
            The backslash (\) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.NonUSHash">
            <summary>
            The non-US hash key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Semicolon">
            <summary>
            The semicolon (;) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Apostrophe">
            <summary>
            The apostrophe (') key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Grave">
            <summary>
            The grave accent (`) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Comma">
            <summary>
            The comma (,) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Period">
            <summary>
            The period (.) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Slash">
            <summary>
            The slash (/) key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.CapsLock">
            <summary>
            The caps lock key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F1">
            <summary>
            The F1 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F2">
            <summary>
            The F2 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F3">
            <summary>
            The F3 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F4">
            <summary>
            The F4 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F5">
            <summary>
            The F5 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F6">
            <summary>
            The F6 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F7">
            <summary>
            The F7 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F8">
            <summary>
            The F8 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F9">
            <summary>
            The F9 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F10">
            <summary>
            The F10 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F11">
            <summary>
            The F11 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F12">
            <summary>
            The F12 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.PrintScreen">
            <summary>
            The Print Screen key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.ScrollLock">
            <summary>
            The Scroll Lock key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Pause">
            <summary>
            The Pause/Break key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Insert">
            <summary>
            The Insert key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Home">
            <summary>
            The Home key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.PageUp">
            <summary>
            The Page Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Delete">
            <summary>
            The Delete key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.End">
            <summary>
            The End key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.PageDown">
            <summary>
            The page down key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Right">
            <summary>
            The right arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Left">
            <summary>
            The left arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Down">
            <summary>
            The down arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Up">
            <summary>
            The up arrow key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.NumLockClear">
            <summary>
            The num lock/clear key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadDivide">
            <summary>
            The divide (/) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMultiply">
            <summary>
            The multiply (*) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMinus">
            <summary>
            The minus (-) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadPlus">
            <summary>
            The plus (+) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadEnter">
            <summary>
            The Enter/Return key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD1">
            <summary>
            The 1 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD2">
            <summary>
            The 2 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD3">
            <summary>
            The 3 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD4">
            <summary>
            The 4 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD5">
            <summary>
            The 5 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD6">
            <summary>
            The 6 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD7">
            <summary>
            The 7 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD8">
            <summary>
            The 8 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD9">
            <summary>
            The 9 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD0">
            <summary>
            The 0 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadPeriod">
            <summary>
            The period (.) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.NonUSBackslash">
            <summary>
            The non-US backslash key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Application">
            <summary>
            The Application key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Power">
            <summary>
            The Power key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadEquals">
            <summary>
            The equals (=) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F13">
            <summary>
            The F13 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F14">
            <summary>
            The F14 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F15">
            <summary>
            The F15 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F16">
            <summary>
            The F16 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F17">
            <summary>
            The F17 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F18">
            <summary>
            The F18 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F19">
            <summary>
            The F19 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F20">
            <summary>
            The F20 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F21">
            <summary>
            The F21 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F22">
            <summary>
            The F22 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F23">
            <summary>
            The F23 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.F24">
            <summary>
            The F24 function key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Execute">
            <summary>
            The Execute key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Help">
            <summary>
            The Help key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Menu">
            <summary>
            The Menu key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Select">
            <summary>
            The Select key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Stop">
            <summary>
            The Stop key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Again">
            <summary>
            The Again key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Undo">
            <summary>
            The Undo key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Cut">
            <summary>
            The Cut key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Copy">
            <summary>
            The Copy key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Paste">
            <summary>
            The Paste key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Find">
            <summary>
            The Find key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Mute">
            <summary>
            The Mute key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.VolumeUp">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.VolumeDown">
            <summary>
            The Volume Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadComma">
            <summary>
            The comma key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadEqualsAS400">
            <summary>
            The equals key on an AS/400 keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International1">
            <summary>
            The first international key.
            </summary>
            <remarks>
            From http://www.quadibloc.com/comp/scan.htm:
            INT 1 is the key next to the left shift key on an international keyboard. On many international keyboards, it has the characters &lt; and &gt;, but on the United Kingdom keyboard, it has | and \.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International2">
            <summary>
            The second international key.
            </summary>
            <remarks>
            From http://www.quadibloc.com/comp/scan.htm:
            INT 2 is the lower key of the two to the right of the Enter key on an international keyboard. Confusingly, it, and not the one with | and \ on it in the UK, has the same scan code in some sets as the U. S. | and \ key; and on the Canadian French keyboard, it is this key that has &lt; and &gt; on it. In the United Kingdom, the characters on this key are ~ and #.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International3">
            <summary>
            The third international key.
            </summary>
            <remarks>
            From http://www.quadibloc.com/comp/scan.htm:
            INT 3 is found both on some Brazilian keyboards and on the Japanese keyboard used for a Kanji input method (it has hiragana on the keys, as opposed to the other form of a plain Japanese keyboard with katakana on the keys). On the Japanese keyboard, it has _ and \ on it, and is located next to the right shift key.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International4">
            <summary>
            The fourth international key.
            </summary>
            <remarks>
            From http://www.quadibloc.com/comp/scan.htm:
            INT 4 is also found on the Japanese keyboard. It has | and ¥ on it and is located next to the backspace key.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International5">
            <summary>
            The fifth international key.
            </summary>
            <remarks>
            From http://www.quadibloc.com/comp/scan.htm:
            INT 5 is located on the numeric keypad on some Brazilian keyboards. It has the same Group 3 scan code as the extra key on the numeric keypad of 122-key keyboards when the code assignments used for keyboards used with IBM terminals are followed.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International6">
            <summary>
            The sixth international key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International7">
            <summary>
            The seventh international key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International8">
            <summary>
            The eighth international key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.International9">
            <summary>
            The ninth international key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang1">
            <summary>
            The first language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Hangul/English toggle key.  This usage is used as an input method editor control key on a Korean language keyboard.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang2">
            <summary>
            The second language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Hanja conversion key.  This usage is used as an input method editor control key on a Korean language keyboard.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang3">
            <summary>
            The third language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Defines the Katakana key for Japanese USB word-processing keyboards.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang4">
            <summary>
            The fourth language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Defines the Hiragana key for Japanese USB word-processing keyboards.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang5">
            <summary>
            The fifth language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Defines the Zenkaku/Hankaku key for Japanese USB word-processing keyboards.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang6">
            <summary>
            The sixth language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Reserved for language-specific functions, such as Front End Processors and Input Method Editors.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang7">
            <summary>
            The seventh language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Reserved for language-specific functions, such as Front End Processors and Input Method Editors.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang8">
            <summary>
            The eighth language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Reserved for language-specific functions, such as Front End Processors and Input Method Editors.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Lang9">
            <summary>
            The ninth language key.
            </summary>
            <remarks>
            From http://www.usb.org/developers/devclass_docs/Hut1_12v2.pdf:
            Reserved for language-specific functions, such as Front End Processors and Input Method Editors.
            </remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AltErase">
            <summary>
            The Alternate Erase key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.SysReq">
            <summary>
            The SysReq key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Cancel">
            <summary>
            The Cancel key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Clear">
            <summary>
            The Clear key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Prior">
            <summary>
            The Prior key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Return2">
            <summary>
            The second Return/Enter key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Separator">
            <summary>
            The Separator key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Out">
            <summary>
            The Out key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Oper">
            <summary>
            The Oper key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.ClearAgain">
            <summary>
            The Clear/Again key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.CrSel">
            <summary>
            The CrSel key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.ExSel">
            <summary>
            The ExSel key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Keypad00">
            <summary>
            The 00 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Keypad000">
            <summary>
            The 000 key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.ThousandsSeparator">
            <summary>
            The thousands separator key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.DecimalSeparator">
            <summary>
            The decimal separator key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.CurrencyUnit">
            <summary>
            The currency unit key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.CurrencySubUnit">
            <summary>
            The currency sub-unit key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadLeftParenthesis">
            <summary>
            The left parenthesis key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadRightParenthesis">
            <summary>
            The right parenthesis key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadLeftBrace">
            <summary>
            The left brace ([) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadRightBrace">
            <summary>
            The right brace (]) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadTab">
            <summary>
            The Tab key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadBackspace">
            <summary>
            The Backspace key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadA">
            <summary>
            The A key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadB">
            <summary>
            The B key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadC">
            <summary>
            The C key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadD">
            <summary>
            The D key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadE">
            <summary>
            The E key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadF">
            <summary>
            The F key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadXor">
            <summary>
            The XOR key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadPower">
            <summary>
            The Power key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadPercent">
            <summary>
            The percent (%) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadLess">
            <summary>
            The less than (&lt;) on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadGreater">
            <summary>
            The greater than (&gt;) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadAmpersand">
            <summary>
            The ampersand (&amp;) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadDoubleAmpersand">
            <summary>
            The double ampersand (&amp;&amp;) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadVerticalBar">
            <summary>
            The vertical bar (|) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadDoubleVerticalBar">
            <summary>
            The double vertical bar (||) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadColon">
            <summary>
            The colon (:) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadHash">
            <summary>
            The hash (#) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadSpace">
            <summary>
            The space ( ) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadAt">
            <summary>
            The at (@) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadExclamation">
            <summary>
            The exclamation (!) key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMemStore">
            <summary>
            The Mem Store key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMemRecall">
            <summary>
            The Mem Recall key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMemClear">
            <summary>
            The Mem Clear key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMemAdd">
            <summary>
            The Mem Add key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMemSubtract">
            <summary>
            The Mem Subtract key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMemMultiply">
            <summary>
            The Mem Multiply key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadMemDivide">
            <summary>
            The Mem Divide key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadPlusMinus">
            <summary>
            The plus/minus key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadClear">
            <summary>
            The Clear key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadClearEntry">
            <summary>
            The Clear Entry key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadBinary">
            <summary>
            The Binary key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadOctal">
            <summary>
            The Octal key on t he keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadDecimal">
            <summary>
            The Decimal key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.KeypadHexadecimal">
            <summary>
            The Hexadecimal key on the keypad.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.LeftControl">
            <summary>
            The left Control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.LeftShift">
            <summary>
            The left Shift key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.LeftAlt">
            <summary>
            The left Alt key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.LeftGui">
            <summary>
            The left GUI key (i.e. the Windows key on Windows).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.RightControl">
            <summary>
            The right Control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.RightShift">
            <summary>
            The right Shift key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.RightAlt">
            <summary>
            The right Alt key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.RightGui">
            <summary>
            The right GUI key (i.e. the Windows key on Windows).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Mode">
            <summary>
            The Mode key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AudioNext">
            <summary>
            The Audio Next key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AudioPrev">
            <summary>
            The Audio Prev key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AudioStop">
            <summary>
            The Audio Stop key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AudioPlay">
            <summary>
            The Audio Play key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AudioMute">
            <summary>
            The Audio Mute key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.MediaSelect">
            <summary>
            The Media Select key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.WorldWideWeb">
            <summary>
            The World Wide Web key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Mail">
            <summary>
            The Mail key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Calculator">
            <summary>
            The Calculator key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Computer">
            <summary>
            The Computer key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AppControlSearch">
            <summary>
            The Search application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AppControlHome">
            <summary>
            The Home application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AppControlBack">
            <summary>
            The Back application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AppControlForward">
            <summary>
            The Forward application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AppControlStop">
            <summary>
            The Stop application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AppControlRefresh">
            <summary>
            The Refresh application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.AppControlBookmarks">
            <summary>
            The Bookmarks application control key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.BrightnessDown">
            <summary>
            The Brightness Down key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.BrightnessUp">
            <summary>
            The Brightness Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.DisplaySwitch">
            <summary>
            The Display Switch key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.IlluminationToggle">
            <summary>
            The Illumination Toggle key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.IlluminationDown">
            <summary>
            The Illumination Down key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.IlluminationUp">
            <summary>
            The Illumination Up key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Eject">
            <summary>
            The Eject key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.Sleep">
            <summary>
            The Sleep key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.App1">
            <summary>
            The App1 key.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Input.Scancode.App2">
            <summary>
            The App2 key.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.SoftwareKeyboardServiceFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Input.SoftwareKeyboardService"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Input.SoftwareKeyboardService"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.SoftwareKeyboardService">
            <summary>
            Represents a service which controls the software keyboard, if one is available on the current platform.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.SoftwareKeyboardService.ShowSoftwareKeyboard(TwistedLogik.Ultraviolet.Input.KeyboardMode)">
            <summary>
            Shows the software keyboard, if one is available.
            </summary>
            <param name="mode">The display mode of the software keyboard.</param>
            <returns><c>true</c> if the software keyboard was shown; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.SoftwareKeyboardService.HideSoftwareKeyboard">
            <summary>
            Hides the software keyboard.
            </summary>
            <returns><c>true</c> if the software keyboard was hidden; otherwise, false.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.TouchTapEventHandler">
            <summary>
            Represents the method that is called when a finger is tapped against a touch device.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.TouchDevice"/> that raised the event.</param>
            <param name="fingerID">A value which identifies the finger which was tapped.</param>
            <param name="x">The x-coordinate at which the tap began.</param>
            <param name="y">The y-coordinate at which the tap began.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.TouchFingerEventHandler">
            <summary>
            Represents the method that is called when a finger is pressed against or removed from a touch device. 
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.TouchDevice"/> that raised the event.</param>
            <param name="fingerID">A value which identifies the finger which was pressed or removed.</param>
            <param name="x">The normalized x-coordinate at which the finger was pressed or removed.</param>
            <param name="y">The normalized y-coordinate at which the finger was pressed or removed.</param>
            <param name="pressure">The normalized pressure with which the touch was applied.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.TouchFingerMotionEventHandler">
            <summary>
            Represents the method that is called when a finger is moved across a touch device.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.TouchDevice"/> that raised the event.</param>
            <param name="fingerID">A value which identifies the finger which was moved.</param>
            <param name="x">The finger's normalized x-coordinate on the touch device.</param>
            <param name="y">The finger's normalized y-coordinate on the touch device.</param>
            <param name="dx">The change in the finger's x-coordinate.</param>
            <param name="dy">The change in the finger's y-coordinate.</param>
            <param name="pressure">The normalized pressure of the finger against the device.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.MultiTouchEventHandler">
            <summary>
            Represents the method that is called when a multitouch gesture is performed.
            </summary>
            <param name="device">The <see cref="T:TwistedLogik.Ultraviolet.Input.TouchDevice"/> that raised the event.</param>
            <param name="x">The x-coordinate of the normalized center of the gesture.</param>
            <param name="y">The y-coordinate of the normalized center of the gesture.</param>
            <param name="theta">The amount that the fingers rotated during the gesture.</param>
            <param name="distance">The amount that the fingers pinched during the gesture.</param>
            <param name="numfingers">The number of fingers that were used in the gesture.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Input.TouchDevice">
            <summary>
            Represents touch input.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Input.TouchDevice"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the device's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.WasTapped">
            <summary>
            Gets a value indicating whether the device was tapped anywhere on its surface
            during the previous frame.
            </summary>
            <returns><c>true</c> if the device was tapped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.WasTapped(TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Gets a value indicating whether the device was tapped anywhere in the specified
            area on its surface during the previous frame.
            </summary>
            <param name="area">A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure containing the area to 
            evaluate, specified in normalized coordinates.</param>
            <returns><c>true</c> if the device was tapped; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.TouchDevice.MaximumTapDistance">
            <summary>
            Gets the maximum distance that a finger can move between its up and down events in order
            for the input to be considered a "tap." This value is in normalized units; i.e. a value
            of 0.05 means that the finger can move across 5% of the device and still be considered a tap.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Input.TouchDevice.MaximumTapDelay">
            <summary>
            Gets the maximum delay in milliseconds between a finger's up and down events in order
            for the input to be considered a "tap."
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.TouchDevice.Tap">
            <summary>
            Occurs when a finger is tapped against the touch surface.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.TouchDevice.FingerDown">
            <summary>
            Occurs when a finger is pressed against the touch surface.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.TouchDevice.FingerUp">
            <summary>
            Occurs when a finger is removed from the touch surface.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.TouchDevice.FingerMotion">
            <summary>
            Occurs when a finger is moved across the touch surface.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Input.TouchDevice.MultiTouchGesture">
            <summary>
            Occurs when a multi-touch gesture is performed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.OnTap(System.Int64,System.Single,System.Single)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.TouchDevice.Tap"/> event.
            </summary>
            <param name="fingerID">A value which identifies the finger which was tapped.</param>
            <param name="x">The x-coordinate at which the finger was tapped.</param>
            <param name="y">The y-coordinate at which the finger was tapped.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.OnFingerDown(System.Int64,System.Single,System.Single,System.Single)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.TouchDevice.FingerDown"/> event.
            </summary>
            <param name="fingerID">A value which identifies the finger which was pressed or removed.</param>
            <param name="x">The normalized x-coordinate at which the finger was pressed or removed.</param>
            <param name="y">The normalized y-coordinate at which the finger was pressed or removed.</param>
            <param name="pressure">The normalized pressure with which the touch was applied.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.OnFingerUp(System.Int64,System.Single,System.Single,System.Single)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.TouchDevice.FingerUp"/> event.
            </summary>
            <param name="fingerID">A value which identifies the finger which was pressed or removed.</param>
            <param name="x">The normalized x-coordinate at which the finger was pressed or removed.</param>
            <param name="y">The normalized y-coordinate at which the finger was pressed or removed.</param>
            <param name="pressure">The normalized pressure with which the touch was applied.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.OnFingerMotion(System.Int64,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.TouchDevice.FingerMotion"/> event.
            </summary>
            <param name="fingerID">A value which identifies the finger which was moved.</param>
            <param name="x">The finger's normalized x-coordinate on the touch device.</param>
            <param name="y">The finger's normalized y-coordinate on the touch device.</param>
            <param name="dx">The change in the finger's x-coordinate.</param>
            <param name="dy">The change in the finger's y-coordinate.</param>
            <param name="pressure">The normalized pressure of the finger against the device.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Input.TouchDevice.OnMultiTouchGesture(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.Input.TouchDevice.MultiTouchGesture"/> event.
            </summary>
            <param name="x">The x-coordinate of the normalized center of the gesture.</param>
            <param name="y">The y-coordinate of the normalized center of the gesture.</param>
            <param name="theta">The amount that the fingers rotated during the gesture.</param>
            <param name="distance">The amount that the fingers pinched during the gesture.</param>
            <param name="numfingers">The number of fingers that were used in the gesture.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.InvalidCompatibilityShimException">
            <summary>
            Represents the exception that is thrown when the Ultraviolet Framework cannot load the compatibility shim
            for the current platform.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.InvalidCompatibilityShimException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.InvalidCompatibilityShimException"/> class
            with the specified exception message.
            </summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.InvalidCompatibilityShimException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.InvalidCompatibilityShimException"/> class 
            with the specified exception message and inner exception..
            </summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The exception's inner exception.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletAudio">
            <summary>
            Represents the Ultraviolet Framework's audio subsystem.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletAudio.Suspend">
            <summary>
            Suspends all audio output.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletAudio.Resume">
            <summary>
            Resumes audio output after a call to <see cref="M:TwistedLogik.Ultraviolet.IUltravioletAudio.Suspend"/>.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletAudio.AudioMasterVolume">
            <summary>
            Gets or sets the master volume for all audio output.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletAudio.SongsMasterVolume">
            <summary>
            Gets or sets the master volume for songs.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletAudio.SoundEffectsMasterVolume">
            <summary>
            Gets or sets the master volume for sound effects.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletAudio.AudioMuted">
            <summary>
            Gets or sets a value indicating whether all audio output is globally muted.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletAudio.SongsMuted">
            <summary>
            Gets or sets a value indicating whether songs are globally muted.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletAudio.SoundEffectsMuted">
            <summary>
            Gets or sets a value indicating whether sound effects are globally muted.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletComponent">
            <summary>
            Represents an application component which participates in an Ultraviolet context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletComponent.Ultraviolet">
            <summary>
            Gets the Ultraviolet context.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletContent">
            <summary>
            Represents the Ultraviolet Framework's content management subsystem.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletContent.RegisterImportersAndProcessors(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Registers any content importers or processors defined in the Ultraviolet Core assembly or
            any assembly containing the implementation of one of the Ultraviolet context's subsystems.
            </summary>
            <param name="additionalAssemblies">A collection of assemblies to include in the registration process, 
            or <c>null</c> to only load Ultraviolet assemblies.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletContent.Manifests">
            <summary>
            Gets the content manifest registry.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletContent.Importers">
            <summary>
            Gets the content importer registry.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletContent.Processors">
            <summary>
            Gets the content processor registry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletFactoryInitializer">
            <summary>
            Represents an object which injects factory methods into the Ultraviolet context.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletFactoryInitializer.Initialize(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.UltravioletFactory)">
            <summary>
            Initializes the specified factory.
            </summary>
            <param name="owner">The Ultraviolet context that owns the initializer.</param>
            <param name="factory">The <see cref="T:TwistedLogik.Ultraviolet.UltravioletFactory"/> to initialize.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletGraphics">
            <summary>
            Represents the Ultraviolet Framework's graphics subsystem.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.Clear(TwistedLogik.Ultraviolet.Color)">
            <summary>
            Clears the back buffer to the specified color.
            </summary>
            <param name="color">The <see cref="T:TwistedLogik.Ultraviolet.Color"/> to which to clear the color buffer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.Clear(TwistedLogik.Ultraviolet.Color,System.Double,System.Int32)">
            <summary>
            Clears the back buffer to the specified color, depth, and stencil values.
            </summary>
            <param name="color">The <see cref="T:TwistedLogik.Ultraviolet.Color"/> to which to clear the color buffer.</param>
            <param name="depth">The depth value to which to clear the depth buffer.</param>
            <param name="stencil">The stencil value to which to clear the stencil buffer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.Clear(TwistedLogik.Ultraviolet.ClearOptions,TwistedLogik.Ultraviolet.Color,System.Double,System.Int32)">
            <summary>
            Clears the back buffer to the specified color, depth, and stencil values.
            </summary>
            <param name="options">A set of <see cref="T:TwistedLogik.Ultraviolet.ClearOptions"/> flags specifying which buffers to clear.</param>
            <param name="color">The <see cref="T:TwistedLogik.Ultraviolet.Color"/> to which to clear the color buffer.</param>
            <param name="depth">The depth value to which to clear the depth buffer.</param>
            <param name="stencil">The stencil value to which to clear the stencil buffer.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetRenderTarget(TwistedLogik.Ultraviolet.Graphics.RenderTarget2D)">
            <summary>
            Sets the render target.
            </summary>
            <param name="rt">The render target to set, or <see langword="null"/> to revert to t
            he default render target for the current window's compositor.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetRenderTargetToBackBuffer">
            <summary>
            Sets the render target to the back buffer, bypassing any window compositors.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetRenderTarget">
            <summary>
            Gets the device's current render target.
            </summary>
            <returns>The device's current render target.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetViewport(TwistedLogik.Ultraviolet.Graphics.Viewport)">
            <summary>
            Sets the viewport.
            </summary>
            <param name="viewport">The viewport to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetViewport">
            <summary>
            Gets the device's viewport.
            </summary>
            <returns>The device's viewport.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetTexture(System.Int32,TwistedLogik.Ultraviolet.Graphics.Texture2D)">
            <summary>
            Binds a texture to the specified sampler.
            </summary>
            <param name="sampler">The sampler index.</param>
            <param name="texture">The texture to bind to the specified texture stage.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetTexture(System.Int32)">
            <summary>
            Gets the texture that is bound to the specified sampler.
            </summary>
            <param name="sampler">The sampler index.</param>
            <returns>The texture that is bound to the specified sampler.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetGeometryStream(TwistedLogik.Ultraviolet.Graphics.GeometryStream)">
            <summary>
            Binds a geometry stream to the graphics device.
            </summary>
            <param name="stream">The geometry stream to bind to the graphics device.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetGeometryStream">
            <summary>
            Gets the geometry stream that is bound to the graphics device.
            </summary>
            <returns>The geometry stream that is bound to the graphics device.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetBlendState(TwistedLogik.Ultraviolet.Graphics.BlendState)">
            <summary>
            Binds a blend state to the graphics device.
            </summary>
            <param name="state">The blend state to bind to the graphics device.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetBlendState">
            <summary>
            Gets the blend state that is bound to the device.
            </summary>
            <returns>The blend state that is bound to the device.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetDepthStencilState(TwistedLogik.Ultraviolet.Graphics.DepthStencilState)">
            <summary>
            Binds a depth/stencil state to the graphics device.
            </summary>
            <param name="state">The depth/stencil state to bind to the graphics device.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetDepthStencilState">
            <summary>
            Gets the depth/stencil state that is bound to the device.
            </summary>
            <returns>The depth/stencil state that is bound to the device.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetRasterizerState(TwistedLogik.Ultraviolet.Graphics.RasterizerState)">
            <summary>
            Binds a rasterizer state to the graphics device.
            </summary>
            <param name="state">The rasterizer state to bind to the graphics device.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetRasterizerState">
            <summary>
            Gets the rasterizer state that is bound to the device.
            </summary>
            <returns>The rasterizer state that is bound to the device.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetSamplerState(System.Int32,TwistedLogik.Ultraviolet.Graphics.SamplerState)">
            <summary>
            Binds a sampler state to the specified sampler.
            </summary>
            <param name="sampler">The sampler index.</param>
            <param name="state">The sampler state to bind to the sampler.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetSamplerState(System.Int32)">
            <summary>
            Gets the sampler state that is bound to the specified sampler.
            </summary>
            <param name="sampler">The sampler index.</param>
            <returns>The sampler state that is bound to the specified sampler.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetScissorRectangle(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the device's scissor rectangle.
            </summary>
            <param name="x">The x-coordinate of the top-left corner of the scissor rectangle.</param>
            <param name="y">The y-coordinate of the top-left corner of the scissor rectangle.</param>
            <param name="width">The width of the scissor rectangle.</param>
            <param name="height">The height of the scissor rectangle.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.SetScissorRectangle(System.Nullable{TwistedLogik.Ultraviolet.Rectangle})">
            <summary>
            Sets the device's scissor rectangle.
            </summary>
            <param name="rect">The scissor rectangle, or <c>null</c> to disable the scissor test.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.GetScissorRectangle">
            <summary>
            Gets the device's scissor rectangle.
            </summary>
            <returns>The device's scissor rectangle, or <c>null</c> if the scissor test is disabled.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.DrawPrimitives(TwistedLogik.Ultraviolet.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Draws a collection of non-indexed geometric primitives of the specified type from the currently bound buffers.
            </summary>
            <param name="type">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.PrimitiveType"/> value representing the type of primitive to render.</param>
            <param name="start">The index of the first vertex to render.</param>
            <param name="count">The number of primitives to render.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.DrawIndexedPrimitives(TwistedLogik.Ultraviolet.Graphics.PrimitiveType,System.Int32,System.Int32)">
            <summary>
            Draws a collection of indexed geometric primitives of the specified type from the currently bound buffers.
            </summary>
            <param name="type">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.PrimitiveType"/> value representing the type of primitive to render.</param>
            <param name="start">The index of the first vertex to render.</param>
            <param name="count">The number of primitives to render.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletGraphics.DrawInstancedPrimitives(TwistedLogik.Ultraviolet.Graphics.PrimitiveType,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draws a collection of instanced geometric primitives of the specified type from the currently bound buffers.
            </summary>
            <param name="type">A <see cref="T:TwistedLogik.Ultraviolet.Graphics.PrimitiveType"/> value representing the type of primitive to render.</param>
            <param name="start">The index of the first vertex to render.</param>
            <param name="count">The number of primitives to render.</param>
            <param name="instances">The number of instances to render.</param>
            <param name="baseInstance">The index of the first instance to render.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletGraphics.FrameRate">
            <summary>
            Gets the current frame rate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletGraphics.Capabilities">
            <summary>
            Gets a <see cref="T:TwistedLogik.Ultraviolet.Graphics.GraphicsCapabilities"/> object which exposes the capabilities of the current graphics device.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletHost">
            <summary>
            Represents an object which hosts instances of the Ultraviolet Framework.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletHost.Exit">
            <summary>
            Exits the application.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletHost.Ultraviolet">
            <summary>
            Gets the Ultraviolet context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletHost.IsActive">
            <summary>
            Gets a value indicating whether the application's primary window is currently active.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletHost.IsFixedTimeStep">
            <summary>
            Gets or sets a value indicating whether the application is running on a fixed time step.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletHost.TargetElapsedTime">
            <summary>
            Gets or sets the target time between frames when the application is running on a fixed time step.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletHost.InactiveSleepTime">
            <summary>
            Gets or sets the amount of time to sleep every frame when
            the application's primary window is inactive.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.GamePadConnectionEventHandler">
            <summary>
            Represents the method that is called when a <see cref="T:TwistedLogik.Ultraviolet.Input.GamePadDevice"/> is connected or disconnected.
            </summary>
            <param name="device">The device that was connected or disconnected.</param>
            <param name="playerIndex">The player index associated with the game pad.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletInput">
            <summary>
            Represents the Ultraviolet Framework's input subsystem.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.ShowSoftwareKeyboard">
            <summary>
            Displays the software keyboard, if one is available, using <see cref="F:TwistedLogik.Ultraviolet.Input.KeyboardMode.Text"/> as the keyboard mode.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.ShowSoftwareKeyboard(TwistedLogik.Ultraviolet.Input.KeyboardMode)">
            <summary>
            Displays the software keyboard, if one is available, using the specified keyboard mode.
            </summary>
            <param name="mode">A <see cref="T:TwistedLogik.Ultraviolet.Input.KeyboardMode"/> value which specifies the type of software keyboard to display.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.HideSoftwareKeyboard">
            <summary>
            Hides the software keyboard.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.IsKeyboardSupported">
            <summary>
            Gets a value indicating whether the current platform supports keyboard input.
            </summary>
            <returns><c>true</c> if the current platform supports keyboard input; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.GetKeyboard">
            <summary>
            Gets the keyboard device, if keyboard input is supported.
            </summary>
            <remarks>If keyboard input is not supported on the current platform, this method will throw NotSupportedException.</remarks>
            <returns>The keyboard device.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.IsMouseSupported">
            <summary>
            Gets a value indicating whether the current platform supports mouse input.
            </summary>
            <returns><c>true</c> if the current platform supports mouse input; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.GetMouse">
            <summary>
            Gets the mouse device, if mouse input is supported.
            </summary>
            <remarks>If mouse input is not supported on the current platform, this method will throw NotSupportedException.</remarks>
            <returns>The mouse device.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.GetGamePadCount">
            <summary>
            Gets the number of game pads that are currently connected.
            </summary>
            <returns>The number of game pads that are currently connected.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.IsGamePadSupported">
            <summary>
            Gets a value indicating whether the current platform supports game pad input.
            </summary>
            <returns><c>true</c> if the current platform supports game pad input; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.IsGamePadConnected(System.Int32)">
            <summary>
            Gets a value indicating whether the game pad for the specified player is connected.
            </summary>
            <param name="playerIndex">The index of the player to evaluate.</param>
            <returns><c>true</c> if the specified player's game pad is connected; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.GetGamePadForPlayer(System.Int32)">
            <summary>
            Gets the game pad that belongs to the specified player.
            </summary>
            <param name="playerIndex">The index of the player for which to retrieve a game pad.</param>
            <returns>The game pad that belongs to the specified player, or <c>null</c> if no such game pad exists.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.GetFirstConnectedGamePad">
            <summary>
            Gets the first connected game pad device.
            </summary>
            <returns>The first connected game pad device, or <c>null</c> if no game pads are connected.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.IsTouchSupported">
            <summary>
            Gets a value indicating whether touch input is supported.
            </summary>
            <returns><c>true</c> if touch input is supported; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.IsTouchDeviceConnected(System.Int32)">
            <summary>
            Gets a value indicating whether a touch device with the specified index exists.
            </summary>
            <param name="index">The touch device index to evaluate.</param>
            <returns><c>true</c> if there is a touch device at the specified index; otherwise, false.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.GetTouchDevice">
            <summary>
            Gets the first available touch device.
            </summary>
            <returns>The first available touch device.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletInput.GetTouchDeviceByIndex(System.Int32)">
            <summary>
            Gets the touch device with the specified device index.
            </summary>
            <param name="index">The index of the device to retrieve.</param>
            <returns>The touch device with the specified device index, or <c>null</c> if no such device exists.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletInput.EmulateMouseWithTouchInput">
            <summary>
            Gets or sets a value indicating whether the input subsystem should emulate
            mouse inputs using touch inputs.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.IUltravioletInput.GamePadConnected">
            <summary>
            Occurs when a game pad is connected to the system.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.IUltravioletInput.GamePadDisconnected">
            <summary>
            Occurs when a game pad is disconnected from the system.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletPlatform">
            <summary>
            Represents the Ultraviolet Framework's platform interop subsystem.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletPlatform.Cursor">
            <summary>
            Gets or sets the current cursor.
            </summary>
            <remarks>Setting this property to <c>null</c> will restore the default cursor.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletPlatform.Clipboard">
            <summary>
            Gets the system clipboard manager.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletPlatform.Windows">
            <summary>
            Gets the window information manager.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.IUltravioletPlatform.Displays">
            <summary>
            Gets the display information manager.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletSubsystemUpdateEventHandler">
            <summary>
            Represents the method that is called when an Ultraviolet subsystem updates its state.
            </summary>
            <param name="subsystem">The Ultraviolet subsystem.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletSubsystem">
            <summary>
            Represents one of Ultraviolet's subsystems.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletSubsystem.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the subsystem's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.IUltravioletSubsystem.Updating">
            <summary>
            Occurs when the subsystem is updating its state.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.IUltravioletUI">
            <summary>
            Represents the Ultraviolet Framework's UI subsystem.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletUI.GetScreens">
            <summary>
            Gets the screen stack associated with the primary window.
            </summary>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreenStack"/> associated with the primary window.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.IUltravioletUI.GetScreens(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Gets the screen stack associated with the specified window.
            </summary>
            <param name="window">The window for which to retrieve a screen stack, 
            or <c>null</c> to retrieve the screen stack for the primary window.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreenStack"/> associated with the specified window.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Matrix">
            <summary>
            Represents a 4x4 transformation matrix.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> structure.
            </summary>
            <param name="m11">The value at row 1, column 1 of the matrix.</param>
            <param name="m12">The value at row 1, column 2 of the matrix.</param>
            <param name="m13">The value at row 1, column 3 of the matrix.</param>
            <param name="m14">The value at row 1, column 4 of the matrix.</param>
            <param name="m21">The value at row 2, column 1 of the matrix.</param>
            <param name="m22">The value at row 2, column 2 of the matrix.</param>
            <param name="m23">The value at row 2, column 3 of the matrix.</param>
            <param name="m24">The value at row 2, column 4 of the matrix.</param>
            <param name="m31">The value at row 3, column 1 of the matrix.</param>
            <param name="m32">The value at row 3, column 2 of the matrix.</param>
            <param name="m33">The value at row 3, column 3 of the matrix.</param>
            <param name="m34">The value at row 3, column 4 of the matrix.</param>
            <param name="m41">The value at row 4, column 1 of the matrix.</param>
            <param name="m42">The value at row 4, column 2 of the matrix.</param>
            <param name="m43">The value at row 4, column 3 of the matrix.</param>
            <param name="m44">The value at row 4, column 4 of the matrix.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Equality(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Compares two matrices for equality.
            </summary>
            <param name="m1">The first <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to compare.</param>
            <param name="m2">The second <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to compare.</param>
            <returns><c>true</c> if the specified matrices are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Inequality(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Compares two matrices for inequality.
            </summary>
            <param name="m1">The first <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to compare.</param>
            <param name="m2">The second <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to compare.</param>
            <returns><c>true</c> if the specified matrices are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Multiply(System.Single,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Multiplies a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> by a scaling factor.
            </summary>
            <param name="multiplier">The multiplier.</param>
            <param name="multiplicand">The multiplicand.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Multiply(TwistedLogik.Ultraviolet.Matrix,System.Single)">
            <summary>
            Multiplies a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> by a scaling factor.
            </summary>
            <param name="multiplicand">The multiplicand.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Multiply(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Multiplies a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> by another matrix.
            </summary>
            <param name="multiplicand">The multiplicand.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Division(TwistedLogik.Ultraviolet.Matrix,System.Single)">
            <summary>
            Divides a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> by a scaling factor.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Division(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Divides a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> by a another matrix.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Addition(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to another matrix.
            </summary>
            <param name="m1">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the left side of the addition operator.</param>
            <param name="m2">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the right side of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_Subtraction(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Subtracts a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> from another matrix.
            </summary>
            <param name="m1">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the left side of the subtraction operator.</param>
            <param name="m2">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the right side of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.op_UnaryNegation(TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Negates the specified elements of the specified <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to negate.</param>
            <returns>The negated <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.TryParse(System.String,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Converts the string representation of a matrix into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to convert.</param>
            <param name="matrix">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Parse(System.String)">
            <summary>
            Converts the string representation of a matrix into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> structure.
            </summary>
            <param name="s">A string containing a matrix to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> structure equivalent to the matrix contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Converts the string representation of a matrix into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="matrix">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> into an instance of the Matrix structure.
            </summary>
            <param name="s">A string containing a <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the Matrix structure equivalent to the matrix contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateWorld(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Creates a world matrix with the specified parameters.
            </summary>
            <param name="position">The object's position.</param>
            <param name="forward">The object's forward vector.</param>
            <param name="up">The object's up vector.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateWorld(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a world matrix with the specified parameters.
            </summary>
            <param name="position">The object's position.</param>
            <param name="forward">The object's forward vector.</param>
            <param name="up">The object's up vector.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateLookAt(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="cameraPosition">The camera's position.</param>
            <param name="cameraTarget">The camera's target.</param>
            <param name="cameraUp">The camera's up vector.</param>
            <returns>The view <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateLookAt(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a view matrix.
            </summary>
            <param name="cameraPosition">The camera's position.</param>
            <param name="cameraTarget">The camera's target.</param>
            <param name="cameraUp">The camera's up vector.</param>
            <param name="result">The view <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the view volume.</param>
            <param name="height">The height of the view volume.</param>
            <param name="zNearPlane">The distance from the camera to the near z-plane.</param>
            <param name="zFarPlane">The distance from the camera to the far z-plane.</param>
            <returns>The projection <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateOrthographic(System.Single,System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates an orthographic projection matrix.
            </summary>
            <param name="width">The width of the view volume.</param>
            <param name="height">The height of the view volume.</param>
            <param name="zNearPlane">The distance from the camera to the near z-plane.</param>
            <param name="zFarPlane">The distance from the camera to the far z-plane.</param>
            <param name="result">The projection <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates an off-center orthographic projection matrix.
            </summary>
            <param name="left">The minimum x-value of the view volume.</param>
            <param name="right">The maximum x-value of the view volume.</param>
            <param name="bottom">The minimum y-value of the view volume.</param>
            <param name="top">The maximum y-value of the view volume.</param>
            <param name="zNearPlane">The distance from the camera to the near z-plane.</param>
            <param name="zFarPlane">The distance from the camera to the far z-plane.</param>
            <returns>The projection <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateOrthographicOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates an off-center orthographic projection matrix.
            </summary>
            <param name="left">The minimum x-value of the view volume.</param>
            <param name="right">The maximum x-value of the view volume.</param>
            <param name="bottom">The minimum y-value of the view volume.</param>
            <param name="top">The maximum y-value of the view volume.</param>
            <param name="zNearPlane">The distance from the camera to the near z-plane.</param>
            <param name="zFarPlane">The distance from the camera to the far z-plane.</param>
            <param name="result">The projection <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective matrix.
            </summary>
            <param name="width">The width of the view volume at the near plane.</param>
            <param name="height">The height of the view volume at the near plane.</param>
            <param name="nearPlaneDistance">The distance to the near view plane.</param>
            <param name="farPlaneDistance">The distance to the far view plane.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreatePerspective(System.Single,System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a perspective matrix.
            </summary>
            <param name="width">The width of the view volume at the near plane.</param>
            <param name="height">The height of the view volume at the near plane.</param>
            <param name="nearPlaneDistance">The distance to the near view plane.</param>
            <param name="farPlaneDistance">The distance to the far view plane.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective matrix based on a field of view.
            </summary>
            <param name="fieldOfView">The field of view in radians.</param>
            <param name="aspectRatio">The aspect ratio of the view.</param>
            <param name="nearPlaneDistance">The distance to the near view plane.</param>
            <param name="farPlaneDistance">The distance to the far view plane.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreatePerspectiveFieldOfView(System.Single,System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a perspective matrix based on a field of view.
            </summary>
            <param name="fieldOfView">The field of view in radians.</param>
            <param name="aspectRatio">The aspect ratio of the view.</param>
            <param name="nearPlaneDistance">The distance to the near view plane.</param>
            <param name="farPlaneDistance">The distance to the far view plane.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a customized perspective matrix.
            </summary>
            <param name="left">The minimum x-value of the view volume at the near view plane.</param>
            <param name="right">The maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
            <param name="top">The maximum y-value of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">The distance to the near view plane.</param>
            <param name="farPlaneDistance">The distance to the far view plane.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreatePerspectiveOffCenter(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a customized perspective matrix.
            </summary>
            <param name="left">The minimum x-value of the view volume at the near view plane.</param>
            <param name="right">The maximum x-value of the view volume at the near view plane.</param>
            <param name="bottom">The minimum y-value of the view volume at the near view plane.</param>
            <param name="top">The maximum y-value of the view volume at the near view plane.</param>
            <param name="nearPlaneDistance">The distance to the near view plane.</param>
            <param name="farPlaneDistance">The distance to the far view plane.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateSpriteBatchProjection(System.Single,System.Single)">
            <summary>
            Creates the projection matrix used by a sprite batch.
            </summary>
            <param name="viewportWidth">The current viewport's width.</param>
            <param name="viewportHeight">The current viewport's height.</param>
            <returns>The projection <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> used by a sprite batch.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateSpriteBatchProjection(System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates the projection matrix used by a sprite batch.
            </summary>
            <param name="viewportWidth">The current viewport's width.</param>
            <param name="viewportHeight">The current viewport's height.</param>
            <param name="result">The projection <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> used by a sprite batch.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateTranslation(System.Single,System.Single,System.Single)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">The amount to translate along the x-axis.</param>
            <param name="y">The amount to translate along the y-axis.</param>
            <param name="z">The amount to translate along the z-axis.</param>
            <returns>The translation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateTranslation(System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="x">The amount to translate along the x-axis.</param>
            <param name="y">The amount to translate along the y-axis.</param>
            <param name="z">The amount to translate along the z-axis.</param>
            <param name="result">The translation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateTranslation(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="position">A vector describing the amount to translate along each axis.</param>
            <returns>The translation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateTranslation(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="position">A vector describing the amount to translate along each axis.</param>
            <param name="result">The translation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateRotationX(System.Single)">
            <summary>
            Creates a matrix that represents a rotation over the x-axis.
            </summary>
            <param name="radians">The number of radians to rotate.</param>
            <returns>The rotation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateRotationX(System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a matrix that represents a rotation over the x-axis.
            </summary>
            <param name="radians">The number of radians to rotate.</param>
            <param name="result">The rotation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateRotationY(System.Single)">
            <summary>
            Creates a matrix that represents a rotation over the y-axis.
            </summary>
            <param name="radians">The number of radians to rotate.</param>
            <returns>The rotation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateRotationY(System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a matrix that represents a rotation over the y-axis.
            </summary>
            <param name="radians">The number of radians to rotate.</param>
            <param name="result">The rotation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateRotationZ(System.Single)">
            <summary>
            Creates a matrix that represents a rotation over the z-axis.
            </summary>
            <param name="radians">The number of radians to rotate.</param>
            <returns>The rotation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateRotationZ(System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a matrix that represents a rotation over the z-axis.
            </summary>
            <param name="radians">The number of radians to rotate.</param>
            <param name="result">The rotation <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateFromAxisAngle(TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Creates a matrix that represents a rotation around the specified axis.
            </summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">The angle to rotate, specified in radians.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateFromAxisAngle(TwistedLogik.Ultraviolet.Vector3@,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a matrix that represents a rotation around the specified axis.
            </summary>
            <param name="axis">The axis around which to rotate.</param>
            <param name="angle">The angle to rotate, specified in radians.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateScale(System.Single)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">The scaling factor.</param>
            <returns>The scaling <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateScale(System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">The scaling factor.</param>
            <param name="result">The scaling <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateScale(System.Single,System.Single,System.Single)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The scaling factor along the x-axis.</param>
            <param name="scaleY">The scaling factor along the y-axis.</param>
            <param name="scaleZ">The scaling factor along the z-axis.</param>
            <returns>The scaling <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateScale(System.Single,System.Single,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scaleX">The scaling factor along the x-axis.</param>
            <param name="scaleY">The scaling factor along the y-axis.</param>
            <param name="scaleZ">The scaling factor along the z-axis.</param>
            <param name="result">The scaling <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateScale(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="scale">A vector describing the scaling factor along each axis.</param>
            <returns>The scaling <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.CreateScale(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Creates a scaling matrix.
            </summary>
            <param name="v">A vector describing the scaling factor along each axis.</param>
            <param name="result">The scaling <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Concat(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Concatenates two matrices. The operation specified by the matrix on the left is applied first; the operation specified by the matrix 
            on the right is applied second. This is in contrast to the <see cref="M:TwistedLogik.Ultraviolet.Matrix.Multiply(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)"/> method, which applies the 
            operand on the right first, and the operand on the left second.
            </summary>
            <param name="m1">The first matrix to concatenate.</param>
            <param name="m2">The second matrix to concatenate.</param>
            <param name="result">A matrix which is the result of concatenating the specified matrices.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Concat(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Concatenates two matrices. The operation specified by the matrix on the left is applied first; the operation specified by the matrix 
            on the right is applied second. This is in contrast to the <see cref="M:TwistedLogik.Ultraviolet.Matrix.Multiply(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)"/> method, which applies the 
            operand on the right first, and the operand on the left second.
            </summary>
            <param name="m1">The first matrix to concatenate.</param>
            <param name="m2">The second matrix to concatenate.</param>
            <returns>A matrix which is the result of concatenating the specified matrices.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Add(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="m1">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the left side of the addition operator.</param>
            <param name="m2">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the right side of the addition operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Add(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Adds a matrix to another matrix.
            </summary>
            <param name="m1">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the left side of the addition operator.</param>
            <param name="m2">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the right side of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Subtract(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Subtracts a matrix from another matrix.
            </summary>
            <param name="m1">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the left side of the subtraction operator.</param>
            <param name="m2">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the right side of the subtraction operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Subtract(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Subtracts a matrix from another matrix.
            </summary>
            <param name="m1">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the left side of the subtraction operator.</param>
            <param name="m2">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> on the right side of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Multiply(TwistedLogik.Ultraviolet.Matrix@,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Multiplies a matrix by a scaling factor.
            </summary>
            <param name="multiplicand">The multiplicand.</param>
            <param name="multiplier">The multiplier.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Multiply(TwistedLogik.Ultraviolet.Matrix,System.Single)">
            <summary>
            Multiplies a matrix by a scaling factor.
            </summary>
            <param name="multiplicand">The multiplicand.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Multiply(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="multiplicand">The multiplicand.</param>
            <param name="multiplier">The multiplier.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Multiply(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Multiplies a matrix by another matrix.
            </summary>
            <param name="multiplicand">The multiplicand.</param>
            <param name="multiplier">The multiplier.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Divide(TwistedLogik.Ultraviolet.Matrix@,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Divides a matrix by a scaling factor.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Divide(TwistedLogik.Ultraviolet.Matrix,System.Single)">
            <summary>
            Divides a matrix by a scaling factor.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Divide(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Divides a matrix by another matrix.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Divide(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Divides a matrix by another matrix.
            </summary>
            <param name="dividend">The dividend.</param>
            <param name="divisor">The divisor.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Transpose(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to transpose.</param>
            <param name="result">The transposed <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Transpose(TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transposes the specified matrix.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to transpose.</param>
            <returns>The transposed <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Lerp(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@,System.Single,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Linearly interpolates between the specified matrices.
            </summary>
            <param name="matrix1">The first <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to interpolate.</param>
            <param name="matrix2">The second <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to interpolate.</param>
            <param name="amount">A value from 0.0 to 1.0 indicating the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Lerp(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix,System.Single)">
            <summary>
            Linearly interpolates between the specified matrices.
            </summary>
            <param name="matrix1">The first <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to interpolate.</param>
            <param name="matrix2">The second <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to interpolate.</param>
            <param name="amount">A value from 0.0 to 1.0 indicating the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Invert(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to invert.</param>
            <param name="result">The invertex <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Invert(TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Calculates the inverse of the specified matrix.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to invert.</param>
            <returns>The inverted <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.TryInvert(TwistedLogik.Ultraviolet.Matrix,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Attempts to calculate the inverse of the specified matrix.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to invert.</param>
            <param name="result">The inverted <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
            <returns><c>true</c> if the matrix was inverted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.TryInvertRef(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Attempts to calculate the inverse of the specified matrix.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to invert.</param>
            <param name="result">The inverted <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
            <returns><c>true</c> if the matrix was inverted; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Negate(TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Negates the specified matrix's elements.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to negate.</param>
            <param name="result">The negated <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Negate(TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Negates the specified matrix's elements.
            </summary>
            <param name="matrix">The <see cref="T:TwistedLogik.Ultraviolet.Matrix"/> to negate.</param>
            <returns>The negated <see cref="T:TwistedLogik.Ultraviolet.Matrix"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Equals(TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.EqualsRef(TwistedLogik.Ultraviolet.Matrix@)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Determinant">
            <summary>
            Calculates the matrix's determinant.
            </summary>
            <returns>The matrix's determinant.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Matrix.Interpolate(TwistedLogik.Ultraviolet.Matrix,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Identity">
            <summary>
            Gets the identity matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M11">
            <summary>
            Gets the value at row 1, column 1 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M12">
            <summary>
            Gets the value at row 1, column 2 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M13">
            <summary>
            Gets the value at row 1, column 3 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M14">
            <summary>
            Gets the value at row 1, column 4 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M21">
            <summary>
            Gets the value at row 2, column 1 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M22">
            <summary>
            Gets the value at row 2, column 2 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M23">
            <summary>
            Gets the value at row 2, column 3 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M24">
            <summary>
            Gets the value at row 2, column 4 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M31">
            <summary>
            Gets the value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M32">
            <summary>
            Gets the value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M33">
            <summary>
            Gets the value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M34">
            <summary>
            Gets the value at row 3, column 1 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M41">
            <summary>
            Gets the value at row 4, column 1 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M42">
            <summary>
            Gets the value at row 4, column 2 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M43">
            <summary>
            Gets the value at row 4, column 3 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.M44">
            <summary>
            Gets the value at row 4, column 4 of the matrix.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Right">
            <summary>
            Gets the matrix's right vector.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Left">
            <summary>
            Gets the matrix's left vector.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Up">
            <summary>
            Gets the matrix's up vector.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Down">
            <summary>
            Gets the matrix's down vector.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Backward">
            <summary>
            Gets the matrix's backwards vector.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Forward">
            <summary>
            Gets the matrix's forwards vector.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Matrix.Translation">
            <summary>
            Gets the matrix's translation vector.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Messages.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.Messages"/> namespace contains custom message types used by
            the Ultraviolet Framework to faciliate communication between its subsystems.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Messages.OrientationChangedMessageData">
            <summary>
            Represents the message data for an Orientation Changed message.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Messages.OrientationChangedMessageData.Display">
            <summary>
            Gets or sets the display which changed orientation.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.MutableVector2">
            <summary>
            The <see cref="T:TwistedLogik.Ultraviolet.MutableVector2"/> structure is a mutable version of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure used 
            primarily for performance micro-optimizations within the Ultraviolet Framework.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.MutableVector2.X">
            <summary>
            The vector's x-coordinate.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.MutableVector2.Y">
            <summary>
            The vector's y-coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.MutableVector3">
            <summary>
            The <see cref="T:TwistedLogik.Ultraviolet.MutableVector3"/> structure is a mutable version of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure used 
            primarily for performance micro-optimizations within the Ultraviolet Framework.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.MutableVector3.X">
            <summary>
            The vector's x-coordinate.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.MutableVector3.Y">
            <summary>
            The vector's y-coordinate.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.MutableVector3.Z">
            <summary>
            The vector's z-coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet"/> namespace contains Ultraviolet's fundamental systems and data structures,
            including the <see cref="T:TwistedLogik.Ultraviolet.UltravioletContext"/> class which represents instances of
            the Framework itself.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.DisplayMode">
            <summary>
            <para>Represents a display mode.</para>
            <para>A display mode encapsulates all of the parameters of a display device, 
            include its resolution, bit depth, and refresh rate.</para>
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DisplayMode.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.DisplayMode"/> class.
            </summary>
            <param name="width">The display mode's width in pixels.</param>
            <param name="height">The display mode's height in pixels.</param>
            <param name="bpp">The display mode's bit depth.</param>
            <param name="refresh">The display mode's refresh rate in hertz.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DisplayMode.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.DisplayMode.Width">
            <summary>
            Gets the display's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.DisplayMode.Height">
            <summary>
            Gets the display's height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.DisplayMode.BitsPerPixel">
            <summary>
            Gets the display's bit depth.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.DisplayMode.RefreshRate">
            <summary>
            Gets the display's refresh rate in hertz.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.DummyUltravioletClipboardInfo">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletClipboardInfo"/>.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.DummyUltravioletClipboardInfo.Text">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.DummyUltravioletDisplayInfo">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplayInfo"/>.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.DummyUltravioletDisplayInfo.PrimaryDisplay">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletDisplayInfo.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.List`1.Enumerator"/> that iterates through the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletDisplayInfo.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Platform#IUltravioletDisplay}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletDisplayInfo.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo">
            <summary>
            Represents a dummy implementation of <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.DesignatePrimary(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.GetByID(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.GetPrimary">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.GetCurrent">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.Create(System.String,System.Int32,System.Int32,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Platform.WindowFlags)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.CreateFromNativePointer(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.Destroy(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.DestroyByID(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#Platform#IUltravioletWindow}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.WindowCreated">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.WindowDestroyed">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.PrimaryWindowChanging">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.PrimaryWindowChanged">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.CurrentWindowChanging">
            <inheritdoc/>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.DummyUltravioletWindowInfo.CurrentWindowChanged">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.FileSource">
            <summary>
            Represents a source of file data.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSource.Find(System.String,System.Boolean)">
            <summary>
            Finds the archive node with the specified path.
            </summary>
            <param name="path">The relative path of the node to find.</param>
            <param name="throwIfNotFound">A value indicating whether to throw a <see cref="T:System.IO.FileNotFoundException"/> if the path does not exist.</param>
            <returns>The archive node with the specified path, or <c>null</c> if no such node exists and <paramref name="throwIfNotFound"/> is <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSource.Extract(System.String)">
            <summary>
            Extracts the specified file.
            </summary>
            <param name="path">The relative path of the file to load.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that represents the extracted data.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.FileSourceNode">
            <summary>
            Represents a file or directory in a file source tree.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.Parent">
            <summary>
            Gets the node's parent node.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.Path">
            <summary>
            Gets the file's path within its source.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.Name">
            <summary>
            Gets the node's name.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.IsFile">
            <summary>
            Gets a value indicating whether the node represents a file.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.IsDirectory">
            <summary>
            Gets a value indicating whether the node represents a directory.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.Position">
            <summary>
            Gets the position of the node's data within the archive's data block.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.SizeInBytes">
            <summary>
            Gets the node's size in bytes.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSourceNode.Children">
            <summary>
            Gets the archive node's child nodes.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.FileSystemServiceFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Platform.FileSystemService"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.FileSystemService"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.FileSystemService">
            <summary>
            Contains methods for interacting with the file system.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.FileSystemService"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.FileSystemService"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.GetCurrentDirectory">
            <summary>
            Gets the current working directory.
            </summary>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.FileExists(System.String)">
            <summary>
            Gets a value indicating whether the specified path exists and is a file.
            </summary>
            <param name="path">The path to evaluate.</param>
            <returns><c>true</c> if the specified path exists and is a file; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.DirectoryExists(System.String)">
            <summary>
            Gets a value indicating whether the specified path exists and is a directory.
            </summary>
            <param name="path">The path to evaluate.</param>
            <returns><c>true</c> if the specified path exists and is a directory; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.ListFiles(System.String,System.String)">
            <summary>
            Lists the files at the specified path.
            </summary>
            <param name="path">The path to evaluate.</param>
            <param name="searchPattern">The search string to match against the names of files in <paramref name="path"/>.</param>
            <returns>A list of directories at the specified path.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.ListDirectories(System.String,System.String)">
            <summary>
            Lists the directories at the specified path.
            </summary>
            <param name="path">The path to evaluate.</param>
            <param name="searchPattern">The search string to match against the names of directories in <paramref name="path"/>.</param>
            <returns>A list of directories at the specified path.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.OpenRead(System.String)">
            <summary>
            Opens the specified file for reading.
            </summary>
            <param name="path">The path of the file to open.</param>
            <returns>A <see cref="T:System.IO.Stream"/> on the file at <paramref name="path"/>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.FileSystemService.Source">
            <summary>
            Gets or sets the file source. If no source is set, Ultraviolet will attempt to read
            files directly from the underlying file system where possible.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.FileSystemService.PatternMatch(System.Collections.Generic.IEnumerable{TwistedLogik.Ultraviolet.Platform.FileSourceNode},System.String)">
            <summary>
            Performs pattern matching on the specified collection of file source nodes.
            </summary>
            <param name="nodes">The collection of file source nodes on which to perform pattern matching.</param>
            <param name="searchPattern">The search string to match against the names of nodes in <paramref name="nodes"/>.</param>
            <returns>The collection of nodes which match the specified pattern.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.IconLoaderFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Platform.IconLoader"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.IconLoader"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.IconLoader">
            <summary>
            Contains methods for loading the application icon.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IconLoader.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.IconLoader"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.IconLoader"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IconLoader.LoadIcon">
            <summary>
            Loads the application's icon.
            </summary>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Graphics.Surface2D"/> that represents the loaded icon.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.IUltravioletClipboardInfo">
            <summary>
            Contains methods for interacting with the system clipboard.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletClipboardInfo.Text">
            <summary>
            Gets or sets the clipboard text.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay">
            <summary>
            Represents a display device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.GetSupportedDisplayModes">
            <summary>
            Gets the display device's supported display modes.
            </summary>
            <returns>A collection containing the display device's supported <see cref="T:TwistedLogik.Ultraviolet.Platform.DisplayMode"/> values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToPixels(System.Double)">
            <summary>
            Converts inches to display pixels.
            </summary>
            <param name="inches">The value in inches to convert.</param>
            <returns>The converted value in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToInches(System.Double)">
            <summary>
            Converts display pixels to inches.
            </summary>
            <param name="pixels">The value in display pixels to convert.</param>
            <returns>The converted value in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToPixels(System.Double)">
            <summary>
            Converts display independent pixels to display pixels.
            </summary>
            <param name="dips">The value in display independent pixels to convert.</param>
            <returns>The converted value in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToDips(System.Double)">
            <summary>
            Converts display pixels to display independent pixels.
            </summary>
            <param name="pixels">The value in display pixels to convert.</param>
            <returns>The converted value in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToDips(System.Double)">
            <summary>
            Converts inches to display independent pixels.
            </summary>
            <param name="inches">The value in inches to convert.</param>
            <returns>The converted value in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToInches(System.Double)">
            <summary>
            Converts display independent pixels to inches.
            </summary>
            <param name="dips">The value in display independent pixels to convert.</param>
            <returns>The converted value in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToPixels(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> value with coordinates in inches to a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/>
            value with coordinates in display pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToInches(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> value with coordinates in display pixels to a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/>
            value with coordinates in inches.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToPixels(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> value with coordinates in display independent pixels to 
            a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> value with coordinates in display pixels.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToDips(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> value with coordinates in display pixels to a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/>
            value with coordinates in display independent pixels.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToDips(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> value with coordinates in inches to a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/>
            value with coordinates in display independent pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToInches(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> value with coordinates in display independent pixels to a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/>
            value with coordinates in inches.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToPixels(TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> value with dimensions in inches to a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/>
            value with dimensions in display pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToInches(TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> value with coordinates in display pixels to a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/>
            value with coordinates in inches.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToPixels(TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> value with dimensions in display independent pixels to 
            a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> value with dimensions in display pixels.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToDips(TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> value with dimensions in display pixels to a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/>
            value with dimensions in display independent pixels.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToDips(TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> value with dimensions in inches to a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/>
            value with dimensions in display independent pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToInches(TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> value with dimensions in display independent pixels to a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/>
            value with dimensions in inches.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToPixels(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in inches 
            to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToInches(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in inches.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToPixels(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display independent pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display pixels.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToDips(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display independent pixels.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToDips(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in inches 
            to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display independent pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToInches(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in display independent pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> value with coordinates and dimensions in inches.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToPixels(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in inches 
            to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToInches(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in inches.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in inches.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToPixels(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display independent pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display pixels.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.PixelsToDips(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display independent pixels.
            </summary>
            <param name="pixels">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.InchesToDips(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in inches 
            to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display independent pixels.
            </summary>
            <param name="inches">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in inches to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display independent pixels.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DipsToInches(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in display independent pixels 
            to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> value with coordinates and dimensions in inches.
            </summary>
            <param name="dips">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in display independent pixels to convert.</param>
            <returns>The converted <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> in inches.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.Index">
            <summary>
            Gets the display's index within Ultraviolet's display list.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.Bounds">
            <summary>
            Gets the display's bounds.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.Rotation">
            <summary>
            Gets the display's rotation on devices which can be rotated.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DensityScale">
            <summary>
            Gets the scaling factor for device independent pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DpiX">
            <summary>
            Gets the display's density in dots per inch along the horizontal axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DpiY">
            <summary>
            Gets the display's density in dots per inch along the vertical axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay.DensityBucket">
            <summary>
            Gets the display's density bucket.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplayInfo">
            <summary>
            Provides access to information concerning the system's attached display devices.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplayInfo.PrimaryDisplay">
            <summary>
            Gets the application's primary display device.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.UltravioletWindowEventHandler">
            <summary>
            Represents the method that is called when an Ultraviolet window raises an event.
            </summary>
            <param name="window">The window that raised the event.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.UltravioletWindowDrawingEventHandler">
            <summary>
            Represents the method that is called when an Ultraviolet window is drawn.
            </summary>
            <param name="window">The window that raised the event.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow">
            <summary>
            Represents a window that is attached to an Ultraviolet context.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.SetFullscreenDisplayMode(TwistedLogik.Ultraviolet.Platform.DisplayMode)">
            <summary>
            Sets the window's fullscreen display mode.
            </summary>
            <param name="displayMode">The <see cref="T:TwistedLogik.Ultraviolet.Platform.DisplayMode"/> to use when the window is in fullscreen mode,
            or <c>null</c> to use the desktop display mode.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.SetFullscreenDisplayMode(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the window's fullscreen display mode.
            </summary>
            <param name="width">The width of the display in pixels when it is in fullscreen mode.</param>
            <param name="height">The height of the display in pixels when it is in fullscreen mode.</param>
            <param name="bpp">The bit depth of the display when it is in fullscreen mode.</param>
            <param name="refresh">The refresh rate of the display in hertz when it is in fullscreen mode.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.GetFullscreenDisplayMode">
            <summary>
            Gets the window's fullscreen display mode.
            </summary>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Platform.DisplayMode"/> used when the window is in fullscreen mode, 
            or <c>null</c> if the window is using the desktop display mode.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.SetWindowMode(TwistedLogik.Ultraviolet.Platform.WindowMode)">
            <summary>
            Sets the window's window mode.
            </summary>
            <param name="mode">The <see cref="T:TwistedLogik.Ultraviolet.Platform.WindowMode"/> value that represents the window mode to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.GetWindowMode">
            <summary>
            Gets the window's window mode.
            </summary>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Platform.WindowMode"/> value that represents the window's current window mode.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.SetWindowState(TwistedLogik.Ultraviolet.Platform.WindowState)">
            <summary>
            Sets the window's maximization/minimization state.
            </summary>
            <param name="state">The <see cref="T:TwistedLogik.Ultraviolet.Platform.WindowState"/> value that represents the maximization/minimization state to set.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.GetWindowState">
            <summary>
            Gets the window's maximization/minimization state.
            </summary>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Platform.WindowState"/> value that represents the window's maximization/minimization state.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.ChangeCompositor(TwistedLogik.Ultraviolet.Graphics.Compositor)">
            <summary>
            Changes the window's compositor.
            </summary>
            <param name="compositor">The compositor to set at the window's current compositor.</param>
            <remarks>The previous compositor instance will be disposed.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.ID">
            <summary>
            Gets the window's identifier within its windowing system.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Caption">
            <summary>
            Gets or sets the window's caption.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Position">
            <summary>
            Gets or sets the window's position.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.WindowedPosition">
            <summary>
            Gets or sets the position to which the window will be restored upon entering non-maximized windowed mode.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.ClientSize">
            <summary>
            Gets or sets the window's client size.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.WindowedClientSize">
            <summary>
            Gets or sets the client size to which the window will be restored upon entering non-maximized windowed mode.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.MaximumClientSize">
            <summary>
            Gets the window's maximum client size.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.SynchronizeWithVerticalRetrace">
            <summary>
            Gets or sets a value indicating whether this window's rendering is synchronized
            with the vertical retrace (i.e, whether vsync is enabled).
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Active">
            <summary>
            Gets a value indicating whether the window is currently active.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Visible">
            <summary>
            Gets or sets a value indicating whether this window is visible.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Resizable">
            <summary>
            Gets a value indicating whether this window is resizable.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Borderless">
            <summary>
            Gets a value indicating whether this window is borderless.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Icon">
            <summary>
            Gets or sets the window's icon.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Compositor">
            <summary>
            Gets the window's current compositor.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Shown">
            <summary>
            Occurs when the window is shown.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Hidden">
            <summary>
            Occurs when the window is hidden.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Minimized">
            <summary>
            Occurs when the window is minimized.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Maximized">
            <summary>
            Occurs when the window is maximized.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Restored">
            <summary>
            Occurs when the window is restored.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.Drawing">
            <summary>
            Occurs when the window is drawn.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindow.DrawingUI">
            <summary>
            Occurs when the window is drawing its UI layer.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.UltravioletWindowInfoEventHandler">
            <summary>
            Represents an event that occurs when Ultraviolet updates its window information.
            </summary>
            <param name="window">The window that was updated.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo">
            <summary>
            Provides access to information concerning the context's attached windows.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.DesignatePrimary(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Designates the specified window as the primary window.
            </summary>
            <param name="window">The window to designate as the primary window, or <c>null</c> to clear the primary window.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.GetByID(System.Int32)">
            <summary>
            Gets the window with the specified identifier.
            </summary>
            <param name="id">The identifier of the window to retrieve.</param>
            <returns>The window with the specified identifier, or <c>null</c> if no such window exists.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.GetPrimary">
            <summary>
            Gets the context's primary window.
            </summary>
            <returns>The context's primary window, or <c>null</c> if the context is headless.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.GetCurrent">
            <summary>
            Gets the context's current window.
            </summary>
            <returns>The context's current window.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.Create(System.String,System.Int32,System.Int32,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Platform.WindowFlags)">
            <summary>
            Creates a new window and attaches it to the current context.
            </summary>
            <param name="caption">The window's caption text.</param>
            <param name="x">The x-coordinate at which to position the window's top-left corner.</param>
            <param name="y">The y-coordinate at which to position the window's top-left corner.</param>
            <param name="width">The width of the window's client area in pixels.</param>
            <param name="height">The height of the window's client area in pixels.</param>
            <param name="flags">A set of <see cref="T:TwistedLogik.Ultraviolet.Platform.WindowFlags"/> values indicating how to create the window.</param>
            <returns>The Ultraviolet window that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.CreateFromNativePointer(System.IntPtr)">
            <summary>
            Creates a new Ultraviolet window from the specified native window and attaches it to the current context.
            </summary>
            <param name="ptr">A pointer that represents the native window to attach to the context.</param>
            <returns>The Ultraviolet window that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.Destroy(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Destroys the specified window.
            </summary>
            <remarks>Windows which were created from native pointers are disassociated from the current context,
            but are not actually destroyed. To destroy such windows, use the native framework which created them.</remarks>
            <param name="window">The Ultraviolet window to destroy.</param>
            <returns><c>true</c> if the window was destroyed; <c>false</c> if the window was closed.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.DestroyByID(System.Int32)">
            <summary>
            Destroys the window with the specified identifier.
            </summary>
            <param name="id">The identifier of the window to destroy.</param>
            <returns><c>true</c> if the window was destroyed; <c>false</c> if the window was closed.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.GetEnumerator">
            <summary>
            Gets the collection's enumerator.
            </summary>
            <returns>The collection's enumerator.</returns>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.WindowCreated">
            <summary>
            Occurs after a window has been created.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.WindowDestroyed">
            <summary>
            Occurs when a window is about to be destroyed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.PrimaryWindowChanging">
            <summary>
            Occurs when the primary window is about to change.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.PrimaryWindowChanged">
            <summary>
            Occurs when the primary window changes.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.CurrentWindowChanging">
            <summary>
            Occurs when the current window is about to change.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.Platform.IUltravioletWindowInfo.CurrentWindowChanged">
            <summary>
            Occurs when the current window changes.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.Platform"/> namespace contains types relating to Ultraviolet's platform interop subsystem.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.PowerManagementServiceFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Platform.PowerManagementService"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.PowerManagementService"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.PowerManagementService">
            <summary>
            Represents a platform service which retrieves the device's current power management state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.PowerManagementService.Create">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.PowerManagementService"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.PowerManagementService"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.PowerManagementService.PercentBatteryRemaining">
            <summary>
            Gets the amount of battery remaining, if the system is battery-powered.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.PowerManagementService.IsBatteryPowered">
            <summary>
            Gets a value indicating whether the system is battery-powered.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.PowerManagementService.IsPluggedIn">
            <summary>
            Gets a value indicating whether the system is currently plugged in.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket">
            <summary>
            Represents the buckets into which Ultraviolet classifies the pixel density of a display device.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.Desktop">
            <summary>
            Standard desktop DPI (72 dpi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.Low">
            <summary>
            Low mobile DPI (~120 dpi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.Retina">
            <summary>
            OS X Retina DPI (~144 dpi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.Medium">
            <summary>
            Medium mobile DPI (~160 dpi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.RetinaHD">
            <summary>
            OS X Retina HD DPI (~216 DPI).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.High">
            <summary>
            High mobile DPI (~240 dpi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.ExtraHigh">
            <summary>
            Extra high mobile DPI (~320 dpi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.ExtraExtraHigh">
            <summary>
            Extra extra high mobile DPI (~480 dpi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket.ExtraExtraExtraHigh">
            <summary>
            Extra extra extra high mobile DPI (~640 dpi).
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityServiceFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityService"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityService"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityService">
            <summary>
            Represents a service which retrieve the pixel density (DPI) of the specified display device.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.ScreenDensityService.#ctor(TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityService"/> class.
            </summary>
            <param name="display">The <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay"/> for which to retrieve density information.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.ScreenDensityService.Create(TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityService"/> class.
            </summary>
            <param name="display">The <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay"/> for which 
            to retrieve a screen density service.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityService"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.ScreenDensityService.GetDensityBucketName(TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket)">
            <summary>
            Gets the short name of the specified density bucket.
            </summary>
            <param name="bucket">The <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenDensityBucket"/> value for which to retrieve a short name.</param>
            <returns>The short name of the specified density bucket.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.ScreenDensityService.DensityScale">
            <summary>
            Gets the scaling factor for device independent pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.ScreenDensityService.DensityX">
            <summary>
            Gets the screen's density in dots per inch along the horizontal axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.ScreenDensityService.DensityY">
            <summary>
            Gets the screen's density in dots per inch along the vertical axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.ScreenDensityService.DensityBucket">
            <summary>
            Gets the screen's density bucket.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.ScreenRotation">
            <summary>
            Represents the game screen's rotation relative to its default position.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenRotation.Rotation0">
            <summary>
            The screen is in its default position.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenRotation.Rotation90">
            <summary>
            The screen is rotated 90 degrees from its default position.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenRotation.Rotation180">
            <summary>
            The screen is rotated 180 degrees from its default position.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.ScreenRotation.Rotation270">
            <summary>
            The screen is rotated 270 degrees from its default position.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.ScreenRotationServiceFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenRotationService"/> class.
            </summary>
            <param name="display">The <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay"/> for which to retrieve rotation information.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenRotationService"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.ScreenRotationService">
            <summary>
            Represents a service which is responsible for querying the screen's rotation.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.ScreenRotationService.#ctor(TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenRotationService"/> class.
            </summary>
            <param name="display">The <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay"/> for which to retrieve rotation information.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Platform.ScreenRotationService.Create(TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenRotationService"/> class.
            </summary>
            <param name="display">The <see cref="T:TwistedLogik.Ultraviolet.Platform.IUltravioletDisplay"/> for which to retrieve rotation information.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.Platform.ScreenRotationService"/> that was created.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Platform.ScreenRotationService.ScreenRotation">
            <summary>
            Gets the screen's rotation on devices which can be rotated.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.WindowFlags">
            <summary>
            Represents the set of flags which specify how to create a new Ultraviolet window.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowFlags.Resizable">
            <summary>
            The window is resizable.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowFlags.Borderless">
            <summary>
            The window is borderless.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowFlags.Hidden">
            <summary>
            The window is initially hidden.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.WindowMode">
            <summary>
            Represents Ultraviolet's supported window modes.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowMode.Windowed">
            <summary>
            Windowed mode.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowMode.Fullscreen">
            <summary>
            Fullscreen mode.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowMode.FullscreenWindowed">
            <summary>
            Fullscreen windowed mode.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Platform.WindowState">
            <summary>
            Represents a window's maximization or minimization state.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowState.Normal">
            <summary>
            The window is in a normal state.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowState.Minimized">
            <summary>
            The window is minimized.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Platform.WindowState.Maximized">
            <summary>
            The window is maximized.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Point2">
            <summary>
            Represents a point in two-dimensional space.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            </summary>
            <param name="x">The point's x-coordinate.</param>
            <param name="y">The point's y-coordinate.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.op_Addition(TwistedLogik.Ultraviolet.Point2,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Adds two points.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to add.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to add.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2"/> that represents the sum of the specified points.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.op_Subtraction(TwistedLogik.Ultraviolet.Point2,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Subtracts one point from another point.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to subtract.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to subtract.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2"/> that represents the difference of the specified points.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.op_Addition(TwistedLogik.Ultraviolet.Point2,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Offsets a point by adding the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.op_Subtraction(TwistedLogik.Ultraviolet.Point2,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Offsets a point by subtracting the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to size.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.op_Equality(TwistedLogik.Ultraviolet.Point2,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Compares two points for equality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to compare.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to compare.</param>
            <returns><c>true</c> if the specified points are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.op_Inequality(TwistedLogik.Ultraviolet.Point2,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Compares two points for inequality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to compare.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to compare.</param>
            <returns><c>true</c> if the specified points are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.TryParse(System.String,TwistedLogik.Ultraviolet.Point2@)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="point">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.Parse(System.String)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure equivalent to the point contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Point2@)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="point">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure equivalent to the point contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.Equals(TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2.Interpolate(TwistedLogik.Ultraviolet.Point2,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2.Zero">
            <summary>
            Gets the point at (0, 0).
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2.X">
            <summary>
            Gets the point's x-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2.Y">
            <summary>
            Gets the point's y-coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Point2D">
            <summary>
            Represents a point in two-dimensional space with double-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure.
            </summary>
            <param name="x">The point's x-coordinate.</param>
            <param name="y">The point's y-coordinate.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Addition(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Adds two points.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to add.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to add.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the sum of the specified points.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Subtraction(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Subtracts one point from another point.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to subtract.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to subtract.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the difference of the specified points.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Addition(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Offsets a point by adding the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Subtraction(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Offsets a point by subtracting the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Addition(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Offsets a point by adding the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Subtraction(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Offsets a point by subtracting the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Addition(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Offsets a point by adding the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Subtraction(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Offsets a point by subtracting the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Equality(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Compares two points for equality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to compare.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to compare.</param>
            <returns><c>true</c> if the specified points are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Inequality(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Compares two points for inequality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to compare.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to compare.</param>
            <returns><c>true</c> if the specified points are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Explicit(TwistedLogik.Ultraviolet.Point2D)~TwistedLogik.Ultraviolet.Point2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Implicit(TwistedLogik.Ultraviolet.Point2)~TwistedLogik.Ultraviolet.Point2D">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Explicit(TwistedLogik.Ultraviolet.Point2D)~TwistedLogik.Ultraviolet.Point2F">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.op_Implicit(TwistedLogik.Ultraviolet.Point2F)~TwistedLogik.Ultraviolet.Point2D">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.TryParse(System.String,TwistedLogik.Ultraviolet.Point2D@)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="point">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.Parse(System.String)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure equivalent to the point contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Point2D@)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="point">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure equivalent to the point contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.Transform(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms a point by a matrix.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the point.</param>
            <returns>The transformed <see cref="T:TwistedLogik.Ultraviolet.Point2D"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.Transform(TwistedLogik.Ultraviolet.Point2D@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Point2D@)">
            <summary>
            Transforms a point by a matrix.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the point.</param>
            <param name="result">The transformed <see cref="T:TwistedLogik.Ultraviolet.Point2D"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.Equals(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2D.Interpolate(TwistedLogik.Ultraviolet.Point2D,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2D.Zero">
            <summary>
            Gets the point at (0, 0).
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2D.X">
            <summary>
            Gets the point's x-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2D.Y">
            <summary>
            Gets the point's y-coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Point2F">
            <summary>
            Represents a point in two-dimensional space with single-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            </summary>
            <param name="x">The point's x-coordinate.</param>
            <param name="y">The point's y-coordinate.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Addition(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Adds two points.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to add.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to add.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> that represents the sum of the specified points.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Subtraction(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Subtracts one point from another point.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to subtract.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to subtract.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> that represents the difference of the specified points.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Subtraction(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Offsets a point by subtracting the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Addition(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Offsets a point by adding the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Addition(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Offsets a point by adding the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Subtraction(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Offsets a point by subtracting the specified size.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to offset.</param>
            <param name="offset">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> that specifies how much to offset <paramref name="point"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> that represents the original point plus the specified offset.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Equality(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Compares two points for equality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to compare.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to compare.</param>
            <returns><c>true</c> if the specified points are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Inequality(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Compares two points for inequality.
            </summary>
            <param name="p1">The first <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to compare.</param>
            <param name="p2">The second <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to compare.</param>
            <returns><c>true</c> if the specified points are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Explicit(TwistedLogik.Ultraviolet.Point2F)~TwistedLogik.Ultraviolet.Point2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.op_Explicit(TwistedLogik.Ultraviolet.Point2)~TwistedLogik.Ultraviolet.Point2F">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.TryParse(System.String,TwistedLogik.Ultraviolet.Point2F@)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="point">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.Parse(System.String)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure equivalent to the point contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Point2F@)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="point">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a point into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            </summary>
            <param name="s">A string containing a point to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure equivalent to the point contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.Transform(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms a point by a matrix.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the point.</param>
            <returns>The transformed <see cref="T:TwistedLogik.Ultraviolet.Point2F"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.Transform(TwistedLogik.Ultraviolet.Point2F@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Point2F@)">
            <summary>
            Transforms a point by a matrix.
            </summary>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the point.</param>
            <param name="result">The transformed <see cref="T:TwistedLogik.Ultraviolet.Point2F"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.Equals(TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Point2F.Interpolate(TwistedLogik.Ultraviolet.Point2F,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2F.Zero">
            <summary>
            Gets the point at (0, 0).
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2F.X">
            <summary>
            Gets the point's x-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Point2F.Y">
            <summary>
            Gets the point's y-coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Radians">
            <summary>
            Represents an angle in radians.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure.
            </summary>
            <param name="value">The value in radians.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Implicit(TwistedLogik.Ultraviolet.Radians)~System.Single">
            <summary>
            Implicitly converts an instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure to its underlying value.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Explicit(System.Single)~TwistedLogik.Ultraviolet.Radians">
            <summary>
            Explicitly converts a single-precision floating point value to a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Equality(TwistedLogik.Ultraviolet.Radians,TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Compares two instances of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure for equality.
            </summary>
            <param name="r1">The first value to compare.</param>
            <param name="r2">The second value to compare.</param>
            <returns><c>true</c> if the two values are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Inequality(TwistedLogik.Ultraviolet.Radians,TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Compares two instances of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure for inequality.
            </summary>
            <param name="r1">The first value to compare.</param>
            <param name="r2">The second value to compare.</param>
            <returns><c>true</c> if the two values are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Addition(TwistedLogik.Ultraviolet.Radians,TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Adds two values in radians.
            </summary>
            <param name="r1">The first value to add.</param>
            <param name="r2">The second value to add.</param>
            <returns>The sum of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Addition(TwistedLogik.Ultraviolet.Radians,System.Single)">
            <summary>
            Adds two values in radians.
            </summary>
            <param name="r1">The first value to add.</param>
            <param name="r2">The second value to add.</param>
            <returns>The sum of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Subtraction(TwistedLogik.Ultraviolet.Radians,TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Subtracts a value in radians from another value in radians.
            </summary>
            <param name="r1">The first value to subtract.</param>
            <param name="r2">The second value to subtract.</param>
            <returns>The difference of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Subtraction(TwistedLogik.Ultraviolet.Radians,System.Single)">
            <summary>
            Subtracts a value in radians from another value in radians.
            </summary>
            <param name="r1">The first value to subtract.</param>
            <param name="r2">The second value to subtract.</param>
            <returns>The difference of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Multiply(TwistedLogik.Ultraviolet.Radians,TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Multiplies two values in radians.
            </summary>
            <param name="r1">The first value to multiply.</param>
            <param name="r2">The second value to multiply.</param>
            <returns>The product of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Multiply(TwistedLogik.Ultraviolet.Radians,System.Single)">
            <summary>
            Multiplies two values in radians.
            </summary>
            <param name="r1">The first value to multiply.</param>
            <param name="r2">The second value to multiply.</param>
            <returns>The product of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Division(TwistedLogik.Ultraviolet.Radians,TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Divides two values in radians.
            </summary>
            <param name="r1">The first value to divide.</param>
            <param name="r2">The second value to divide.</param>
            <returns>The quotient of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_Division(TwistedLogik.Ultraviolet.Radians,System.Single)">
            <summary>
            Divides two values in radians.
            </summary>
            <param name="r1">The first value to divide.</param>
            <param name="r2">The second value to divide.</param>
            <returns>The quotient of the specified values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.op_UnaryNegation(TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Negates the specified value in radians.
            </summary>
            <param name="r1">The value to negate.</param>
            <returns>The negated value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.TryParse(System.String,TwistedLogik.Ultraviolet.Radians@)">
            <summary>
            Converts the string representation of an angle in radians into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing an angle to convert.</param>
            <param name="radians">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.Parse(System.String)">
            <summary>
            Converts the string representation of angle in radians to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure.
            </summary>
            <param name="s">A string containing the angle to convert.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Radians@)">
            <summary>
            Converts the string representation of an angle in radians into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing an angle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="radians">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of an angle in radians to an equivalent instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure.
            </summary>
            <param name="s">A string containing the angle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>An instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure that is equivalent to the specified string.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.FromPi(System.Single)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure in terms of pi.
            </summary>
            <param name="n">The number to multiply by pi in order to calculate a value in radians.</param>
            <returns>A new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure with a value equal to pi times the specified factor.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.FromTau(System.Single)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure in terms of tau.
            </summary>
            <param name="n">The number to multiply by tau in order to calculate a value in radians.</param>
            <returns>A new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure with a value equal to tau times the specified factor.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.FromDegrees(System.Single)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure equivalent to the specified number of degrees.
            </summary>
            <param name="degrees">The angle in degrees to convert to radians.</param>
            <returns>A new instance of the <see cref="T:TwistedLogik.Ultraviolet.Radians"/> structure equivalent to the specified number of degrees.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.Normalize(TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Normalizes the specified value to the range [0-2pi).
            </summary>
            <param name="radians">The value to normalize.</param>
            <returns>The normalized value.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.GetHashCode">
            <summary>
            Gets the hash code for this instance.
            </summary>
            <returns>The hash code for this instance.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.Equals(System.Object)">
            <summary>
            Gets a value indicating whether this instance and another instance represent the same value.
            </summary>
            <param name="other">The other instance to evaluate.</param>
            <returns><c>true</c> if this instance and the specified instance represent the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.Equals(TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Gets a value indicating whether this instance and another instance represent the same value.
            </summary>
            <param name="other">The other instance to evaluate.</param>
            <returns><c>true</c> if this instance and the specified instance represent the same value; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.CompareTo(TwistedLogik.Ultraviolet.Radians)">
            <summary>
            Compares this instance to the specified angle and returns an integer that indicates whether the value
            of this instance is less than, equal to, or greater than the value of the specified angle.
            </summary>
            <param name="other">The angle to compare to this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.CompareTo(System.Single)">
            <summary>
            Compares this instance to the specified angle and returns an integer that indicates whether the value
            of this instance is less than, equal to, or greater than the value of the specified angle.
            </summary>
            <param name="other">The angle to compare to this instance.</param>
            <returns>A value that indicates the relative order of the objects being compared.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.ToDegrees">
            <summary>
            Converts the angle to a value in degrees.
            </summary>
            <returns>The radian value converted to degrees.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.Interpolate(TwistedLogik.Ultraviolet.Radians,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Radians.Zero">
            <summary>
            Gets an instance which represents zero radians.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Radians.PiOver4">
            <summary>
            Gets an instance which represents π / 4 radians.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Radians.PiOver2">
            <summary>
            Gets an instance which represents π / 2 radians.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Radians.Pi">
            <summary>
            Gets an instance which represents π radians.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Radians.TwoPi">
            <summary>
            Gets an instance which represents 2π radians.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Radians.Value">
            <summary>
            Gets the value in radians.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Radians.IsNormalized">
            <summary>
            Gets a value indicating whether this is a normalized angle in the range of [0-2pi).
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Radians.RadiansPerDegree">
            <summary>
            The number of radians in one degree.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.Radians.DegreesPerRadian">
            <summary>
            The number of degrees in one radian.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.EvaluateSuffix(System.String,System.Single@)">
            <summary>
            Evaluates the specified string to determine whether it is suffixed by pi or tau,
            and determines the scaling factor to apply as a result.
            </summary>
            <param name="s">The string to evaluate for a suffix.</param>
            <param name="factor">The scaling factor to apply to the string's numeric portion.</param>
            <returns>The string's suffix, or <c>null</c> if it has no suffix.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Radians.TryParseFraction(System.String,System.Globalization.NumberStyles,System.IFormatProvider,System.Single@)">
            <summary>
            Parses the fractional factor of a string representation of an angle.
            </summary>
            <param name="s">A string containing the fractional factor to parse.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="fraction">A single-precision floating point value that is equivalent to the specified string.</param>
            <returns><c>true</c> if the string was able to be parsed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Rectangle">
            <summary>
            Represents a rectangle with integer components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.#ctor(TwistedLogik.Ultraviolet.Point2,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> class.
            </summary>
            <param name="position">The rectangle's position.</param>
            <param name="size">The rectangle's size.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure.
            </summary>
            <param name="x">The x-coordinate of the rectangle's top-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's top-right corner.</param>
            <param name="width">The rectangle's width.</param>
            <param name="height">The rectangle's height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.op_Addition(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Offsets the specified <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> by adding the specified <see cref="T:TwistedLogik.Ultraviolet.Point2"/> to its location.
            </summary>
            <param name="rect">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to offset.</param>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2"/> by which to offset the rectangle.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that has been offset by the specified amount.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.op_Subtraction(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Offsets the specified <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> by subtracting the specified <see cref="T:TwistedLogik.Ultraviolet.Point2"/> from its location.
            </summary>
            <param name="rect">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to offset.</param>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2"/> by which to offset the rectangle.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that has been offset by the specified amount.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.op_Equality(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Compares two rectangles for equality.
            </summary>
            <param name="r1">The first <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to compare.</param>
            <param name="r2">The second <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to compare.</param>
            <returns><c>true</c> if the specified rectangles are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.op_Inequality(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Compares two rectangles for inequality.
            </summary>
            <param name="r1">The first <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to compare.</param>
            <param name="r2">The second <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to compare.</param>
            <returns><c>true</c> if the specified rectangles are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.TryParse(System.String,TwistedLogik.Ultraviolet.Rectangle@)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>  structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="rect">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Parse(System.String)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure equivalent to the rectangle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Rectangle@)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="rect">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure equivalent to the rectangle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Offset(TwistedLogik.Ultraviolet.Rectangle,System.Int32,System.Int32)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to offset.</param>
            <param name="offsetX">The amount by which to offset the rectangle along the x-axis.</param>
            <param name="offsetY">The amount by which to offset the rectangle along the y-axis.</param>
            <returns>The offset <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Offset(TwistedLogik.Ultraviolet.Rectangle@,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Rectangle@)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to offset.</param>
            <param name="offsetX">The amount by which to offset the rectangle along the x-axis.</param>
            <param name="offsetY">The amount by which to offset the rectangle along the y-axis.</param>
            <param name="result">The offset <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Offset(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to offset.</param>
            <param name="offset">The amount by which to offset the rectangle.</param>
            <returns>The offset <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Offset(TwistedLogik.Ultraviolet.Rectangle@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Rectangle@)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to offset.</param>
            <param name="offset">The amount by which to offset the rectangle.</param>
            <param name="result">The offset <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Inflate(TwistedLogik.Ultraviolet.Rectangle,System.Int32,System.Int32)">
            <summary>
            Inflates the specified rectangle by the specified horizontal and vertical values.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to inflate.</param>
            <param name="horizontalAmount">The amount by which to inflate the rectangle horizontally.</param>
            <param name="verticalAmount">The amount by which to inflate the rectangle vertically.</param>
            <returns>The inflated <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Inflate(TwistedLogik.Ultraviolet.Rectangle@,System.Int32,System.Int32,TwistedLogik.Ultraviolet.Rectangle@)">
            <summary>
            Inflates the specified rectangle by the specified horizontal and vertical values.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to inflate.</param>
            <param name="horizontalAmount">The amount by which to inflate the rectangle horizontally.</param>
            <param name="verticalAmount">The amount by which to inflate the rectangle vertically.</param>
            <param name="result">The inflated <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Union(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Creates a rectangle which is the union of the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Union(TwistedLogik.Ultraviolet.Rectangle@,TwistedLogik.Ultraviolet.Rectangle@,TwistedLogik.Ultraviolet.Rectangle@)">
            <summary>
            Creates a rectangle which is the union of the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/>.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Intersect(TwistedLogik.Ultraviolet.Rectangle,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Creates a rectangle which represents the intersection between the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to intersect.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to intersect.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Intersect(TwistedLogik.Ultraviolet.Rectangle@,TwistedLogik.Ultraviolet.Rectangle@,TwistedLogik.Ultraviolet.Rectangle@)">
            <summary>
            Creates a rectangle which represents the intersection between the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to intersect.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to intersect.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Equals(TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Intersects(TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Gets a value indicating whether this rectangle intersects the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle to evaluate.</param>
            <returns><c>true</c> if this rectangle intersects the specified rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Intersects(TwistedLogik.Ultraviolet.Rectangle@,System.Boolean@)">
            <summary>
            Gets a value indicating whether this rectangle intersects the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to evaluate.</param>
            <param name="result"><c>true</c> if this rectangle intersects the specified rectangle; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Contains(System.Int32,System.Int32)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="x">The x-coordinate of the point to evaluate.</param>
            <param name="y">The y-coordinate of the point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Contains(TwistedLogik.Ultraviolet.Point2@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <param name="result">A value indicating whether the rectangle contains the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Contains(TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Contains(TwistedLogik.Ultraviolet.Vector2@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <param name="result">A value indicating whether the rectangle contains the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Contains(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Contains(TwistedLogik.Ultraviolet.Rectangle@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle completely contains the specified rectangle.
            </summary>
            <param name="rectangle">The rectangle to evaluate.</param>
            <param name="result"><c>true</c> if the rectangle completely contains the specified rectangle; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Contains(TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Gets a value indicating whether the rectangle completely contains the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> to evaluate.</param>
            <returns><c>true</c> if the rectangle completely contains the specified rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Rectangle.Interpolate(TwistedLogik.Ultraviolet.Rectangle,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Empty">
            <summary>
            Gets a rectangle at position (0, 0) with zero width and height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.IsEmpty">
            <summary>
            Gets a value indicating whether the rectangle is empty.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.X">
            <summary>
            Gets the x-coordinate of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Y">
            <summary>
            Gets the y-coordinate of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Width">
            <summary>
            Gets the rectangle's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Height">
            <summary>
            Gets the rectangle's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Top">
            <summary>
            Gets the y-coordinate of the top edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Left">
            <summary>
            Gets the x-coordinate of the left edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Right">
            <summary>
            Gets the x-coordinate of the right edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Location">
            <summary>
            Gets the position of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Center">
            <summary>
            Gets the position of the rectangle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Rectangle.Size">
            <summary>
            Gets the rectangle's size.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.RectangleD">
            <summary>
            Represents a rectangle with double-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.#ctor(TwistedLogik.Ultraviolet.Point2D,TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> class.
            </summary>
            <param name="position">The rectangle's position.</param>
            <param name="size">The rectangle's size.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            </summary>
            <param name="x">The x-coordinate of the rectangle's top-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's top-right corner.</param>
            <param name="width">The rectangle's width.</param>
            <param name="height">The rectangle's height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Addition(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Offsets the specified <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> by adding the specified <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> to its location.
            </summary>
            <param name="rect">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to offset.</param>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> by which to offset the rectangle.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> that has been offset by the specified amount.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Subtraction(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Offsets the specified <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> by subtracting the specified <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> from its location.
            </summary>
            <param name="rect">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to offset.</param>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> by which to offset the rectangle.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> that has been offset by the specified amount.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Equality(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Compares two rectangles for equality.
            </summary>
            <param name="r1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to compare.</param>
            <param name="r2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to compare.</param>
            <returns><c>true</c> if the specified rectangles are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Inequality(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Compares two rectangles for inequality.
            </summary>
            <param name="r1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to compare.</param>
            <param name="r2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to compare.</param>
            <returns><c>true</c> if the specified rectangles are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Explicit(TwistedLogik.Ultraviolet.RectangleD)~TwistedLogik.Ultraviolet.Rectangle">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure.
            </summary>
            <param name="rect">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Implicit(TwistedLogik.Ultraviolet.Rectangle)~TwistedLogik.Ultraviolet.RectangleD">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            </summary>
            <param name="rect">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Explicit(TwistedLogik.Ultraviolet.RectangleD)~TwistedLogik.Ultraviolet.RectangleF">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            </summary>
            <param name="rect">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.op_Implicit(TwistedLogik.Ultraviolet.RectangleF)~TwistedLogik.Ultraviolet.RectangleD">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            </summary>
            <param name="rect">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.TryParse(System.String,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="rect">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Parse(System.String)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure equivalent to the rectangle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="rect">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> structure equivalent to the rectangle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Offset(TwistedLogik.Ultraviolet.RectangleD,System.Double,System.Double)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to offset.</param>
            <param name="offsetX">The amount by which to offset the rectangle along the x-axis.</param>
            <param name="offsetY">The amount by which to offset the rectangle along the y-axis.</param>
            <returns>The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Offset(TwistedLogik.Ultraviolet.RectangleD@,System.Double,System.Double,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to offset.</param>
            <param name="offsetX">The amount by which to offset the rectangle along the x-axis.</param>
            <param name="offsetY">The amount by which to offset the rectangle along the y-axis.</param>
            <param name="result">The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Offset(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to offset.</param>
            <param name="offset">The amount by which to offset the rectangle.</param>
            <returns>The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Offset(TwistedLogik.Ultraviolet.RectangleD@,TwistedLogik.Ultraviolet.Point2D@,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to offset.</param>
            <param name="offset">The amount by which to offset the rectangle.</param>
            <param name="result">The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Inflate(TwistedLogik.Ultraviolet.RectangleD,System.Double,System.Double)">
            <summary>
            Inflates the specified rectangle by the specified horizontal and vertical values.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to inflate.</param>
            <param name="horizontalAmount">The amount by which to inflate the rectangle horizontally.</param>
            <param name="verticalAmount">The amount by which to inflate the rectangle vertically.</param>
            <returns>The inflated <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Inflate(TwistedLogik.Ultraviolet.RectangleD@,System.Double,System.Double,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Inflates the specified rectangle by the specified horizontal and vertical values.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to inflate.</param>
            <param name="horizontalAmount">The amount by which to inflate the rectangle horizontally.</param>
            <param name="verticalAmount">The amount by which to inflate the rectangle vertically.</param>
            <param name="result">The inflated <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Union(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Creates a rectangle which is the union of the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Union(TwistedLogik.Ultraviolet.RectangleD@,TwistedLogik.Ultraviolet.RectangleD@,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Creates a rectangle which is the union of the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/>.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Intersect(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Creates a rectangle which represents the intersection between the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to intersect.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to intersect.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Intersect(TwistedLogik.Ultraviolet.RectangleD@,TwistedLogik.Ultraviolet.RectangleD@,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Creates a rectangle which represents the intersection between the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to intersect.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to intersect.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.TransformAxisAligned(TwistedLogik.Ultraviolet.RectangleD,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms the specified rectangle and retrieves the axis-aligned bounding box of the result.
            </summary>
            <param name="rectangle">The rectangle to transform.</param>
            <param name="transform">The transform matrix.</param>
            <returns>The axis-aligned bounding box of <paramref name="rectangle"/> after it has been transformed.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.TransformAxisAligned(TwistedLogik.Ultraviolet.RectangleD@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.RectangleD@)">
            <summary>
            Transforms the specified rectangle and retrieves the axis-aligned bounding box of the result.
            </summary>
            <param name="rectangle">The rectangle to transform.</param>
            <param name="transform">The transform matrix.</param>
            <param name="result">The axis-aligned bounding box of <paramref name="rectangle"/> after it has been transformed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Equals(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Intersects(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Gets a value indicating whether this rectangle intersects the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to evaluate.</param>
            <returns><c>true</c> if this rectangle intersects the specified rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Intersects(TwistedLogik.Ultraviolet.RectangleD@,System.Boolean@)">
            <summary>
            Gets a value indicating whether this rectangle intersects the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to evaluate.</param>
            <param name="result"><c>true</c> if this rectangle intersects the specified rectangle; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Contains(System.Double,System.Double)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="x">The x-coordinate of the point to evaluate.</param>
            <param name="y">The y-coordinate of the point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Contains(TwistedLogik.Ultraviolet.Point2D@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <param name="result">A value indicating whether the rectangle contains the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Contains(TwistedLogik.Ultraviolet.Point2D)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Contains(TwistedLogik.Ultraviolet.Vector2@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> representing the point to evaluate.</param>
            <param name="result">A value indicating whether the rectangle contains the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Contains(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> representing the point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Contains(TwistedLogik.Ultraviolet.RectangleD@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle completely contains the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to evaluate.</param>
            <param name="result"><c>true</c> if the rectangle completely contains the specified rectangle; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Contains(TwistedLogik.Ultraviolet.RectangleD)">
            <summary>
            Gets a value indicating whether the rectangle completely contains the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleD"/> to evaluate.</param>
            <returns><c>true</c> if the rectangle completely contains the specified rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleD.Interpolate(TwistedLogik.Ultraviolet.RectangleD,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Empty">
            <summary>
            Gets an empty rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.IsEmpty">
            <summary>
            Gets a value indicating whether the rectangle is empty.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.X">
            <summary>
            Gets the x-coordinate of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Y">
            <summary>
            Gets the y-coordinate of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Width">
            <summary>
            Gets the rectangle's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Height">
            <summary>
            Gets the rectangle's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Top">
            <summary>
            Gets the y-coordinate of the top edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Left">
            <summary>
            Gets the x-coordinate of the left edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Right">
            <summary>
            Gets the x-coordinate of the right edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Location">
            <summary>
            Gets the position of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Center">
            <summary>
            Gets the position of the rectangle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleD.Size">
            <summary>
            Gets the rectangle's size.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.RectangleF">
            <summary>
            Represents a rectangle with single-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.#ctor(TwistedLogik.Ultraviolet.Point2F,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> class.
            </summary>
            <param name="position">The rectangle's position.</param>
            <param name="size">The rectangle's size.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            </summary>
            <param name="x">The x-coordinate of the rectangle's top-left corner.</param>
            <param name="y">The y-coordinate of the rectangle's top-right corner.</param>
            <param name="width">The rectangle's width.</param>
            <param name="height">The rectangle's height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.#ctor(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            </summary>
            <param name="position">The position of the rectangle's top-left corner.</param>
            <param name="size">The area of the rectangle.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.op_Addition(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Offsets the specified <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> by adding the specified <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> to its location.
            </summary>
            <param name="rect">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to offset.</param>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> by which to offset the rectangle.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> that has been offset by the specified amount.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.op_Subtraction(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Offsets the specified <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> by subtracting the specified <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> from its location.
            </summary>
            <param name="rect">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to offset.</param>
            <param name="point">The <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> by which to offset the rectangle.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> that has been offset by the specified amount.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.op_Equality(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Compares two rectangles for equality.
            </summary>
            <param name="r1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to compare.</param>
            <param name="r2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to compare.</param>
            <returns><c>true</c> if the specified rectangles are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.op_Inequality(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Compares two rectangles for inequality.
            </summary>
            <param name="r1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to compare.</param>
            <param name="r2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to compare.</param>
            <returns><c>true</c> if the specified rectangles are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.op_Explicit(TwistedLogik.Ultraviolet.RectangleF)~TwistedLogik.Ultraviolet.Rectangle">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure.
            </summary>
            <param name="rect">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.op_Implicit(TwistedLogik.Ultraviolet.Rectangle)~TwistedLogik.Ultraviolet.RectangleF">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Rectangle"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            </summary>
            <param name="rect">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.TryParse(System.String,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="rect">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Parse(System.String)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure equivalent to the rectangle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="rect">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a rectangle into an instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure.
            </summary>
            <param name="s">A string containing a rectangle to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> structure equivalent to the rectangle contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Offset(TwistedLogik.Ultraviolet.RectangleF,System.Single,System.Single)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to offset.</param>
            <param name="offsetX">The amount by which to offset the rectangle along the x-axis.</param>
            <param name="offsetY">The amount by which to offset the rectangle along the y-axis.</param>
            <returns>The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Offset(TwistedLogik.Ultraviolet.RectangleF@,System.Single,System.Single,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to offset.</param>
            <param name="offsetX">The amount by which to offset the rectangle along the x-axis.</param>
            <param name="offsetY">The amount by which to offset the rectangle along the y-axis.</param>
            <param name="result">The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Offset(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to offset.</param>
            <param name="offset">The amount by which to offset the rectangle.</param>
            <returns>The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Offset(TwistedLogik.Ultraviolet.RectangleF@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Offsets the specified rectangle by the specified amount.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to offset.</param>
            <param name="offset">The amount by which to offset the rectangle.</param>
            <param name="result">The offset <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Inflate(TwistedLogik.Ultraviolet.RectangleF,System.Single,System.Single)">
            <summary>
            Inflates the specified rectangle by the specified horizontal and vertical values.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to inflate.</param>
            <param name="horizontalAmount">The amount by which to inflate the rectangle horizontally.</param>
            <param name="verticalAmount">The amount by which to inflate the rectangle vertically.</param>
            <returns>The inflated <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Inflate(TwistedLogik.Ultraviolet.RectangleF@,System.Single,System.Single,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Inflates the specified rectangle by the specified horizontal and vertical values.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to inflate.</param>
            <param name="horizontalAmount">The amount by which to inflate the rectangle horizontally.</param>
            <param name="verticalAmount">The amount by which to inflate the rectangle vertically.</param>
            <param name="result">The inflated <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Union(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Creates a rectangle which is the union of the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Union(TwistedLogik.Ultraviolet.RectangleF@,TwistedLogik.Ultraviolet.RectangleF@,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Creates a rectangle which is the union of the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/>.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Intersect(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Creates a rectangle which represents the intersection between the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to intersect.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to intersect.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Intersect(TwistedLogik.Ultraviolet.RectangleF@,TwistedLogik.Ultraviolet.RectangleF@,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Creates a rectangle which represents the intersection between the specified rectangles.
            </summary>
            <param name="rectangle1">The first <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to intersect.</param>
            <param name="rectangle2">The second <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to intersect.</param>
            <param name="result">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.TransformAxisAligned(TwistedLogik.Ultraviolet.RectangleF,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms the specified rectangle and retrieves the axis-aligned bounding box of the result.
            </summary>
            <param name="rectangle">The rectangle to transform.</param>
            <param name="transform">The transform matrix.</param>
            <returns>The axis-aligned bounding box of <paramref name="rectangle"/> after it has been transformed.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.TransformAxisAligned(TwistedLogik.Ultraviolet.RectangleF@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.RectangleF@)">
            <summary>
            Transforms the specified rectangle and retrieves the axis-aligned bounding box of the result.
            </summary>
            <param name="rectangle">The rectangle to transform.</param>
            <param name="transform">The transform matrix.</param>
            <param name="result">The axis-aligned bounding box of <paramref name="rectangle"/> after it has been transformed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Equals(TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Intersects(TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Gets a value indicating whether this rectangle intersects the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to evaluate.</param>
            <returns><c>true</c> if this rectangle intersects the specified rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Intersects(TwistedLogik.Ultraviolet.RectangleF@,System.Boolean@)">
            <summary>
            Gets a value indicating whether this rectangle intersects the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to evaluate.</param>
            <param name="result"><c>true</c> if this rectangle intersects the specified rectangle; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Contains(System.Single,System.Single)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="x">The x-coordinate of the point to evaluate.</param>
            <param name="y">The y-coordinate of the point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Contains(TwistedLogik.Ultraviolet.Point2F@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <param name="result">A value indicating whether the rectangle contains the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Contains(TwistedLogik.Ultraviolet.Point2F)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">The point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Contains(TwistedLogik.Ultraviolet.Vector2@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> representing the point to evaluate.</param>
            <param name="result">A value indicating whether the rectangle contains the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Contains(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Gets a value indicating whether the rectangle contains the specified point.
            </summary>
            <param name="point">A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> representing the point to evaluate.</param>
            <returns><c>true</c> if the rectangle contains the specified point; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Contains(TwistedLogik.Ultraviolet.RectangleF@,System.Boolean@)">
            <summary>
            Gets a value indicating whether the rectangle completely contains the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to evaluate.</param>
            <param name="result"><c>true</c> if the rectangle completely contains the specified rectangle; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Contains(TwistedLogik.Ultraviolet.RectangleF)">
            <summary>
            Gets a value indicating whether the rectangle completely contains the specified rectangle.
            </summary>
            <param name="rectangle">The <see cref="T:TwistedLogik.Ultraviolet.RectangleF"/> to evaluate.</param>
            <returns><c>true</c> if the rectangle completely contains the specified rectangle; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.RectangleF.Interpolate(TwistedLogik.Ultraviolet.RectangleF,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Empty">
            <summary>
            Gets an empty rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.IsEmpty">
            <summary>
            Gets a value indicating whether the rectangle is empty.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.X">
            <summary>
            Gets the x-coordinate of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Y">
            <summary>
            Gets the y-coordinate of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Width">
            <summary>
            Gets the rectangle's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Height">
            <summary>
            Gets the rectangle's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Top">
            <summary>
            Gets the y-coordinate of the top edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Left">
            <summary>
            Gets the x-coordinate of the left edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Bottom">
            <summary>
            Gets the y-coordinate of the bottom edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Right">
            <summary>
            Gets the x-coordinate of the right edge of the rectangle.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Location">
            <summary>
            Gets the position of the rectangle's top-left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Center">
            <summary>
            Gets the position of the rectangle's center.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.RectangleF.Size">
            <summary>
            Gets the rectangle's size.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Size2">
            <summary>
            Represents a two-dimensional size with integer components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure.
            </summary>
            <param name="width">The size's width.</param>
            <param name="height">The size's height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.op_Equality(TwistedLogik.Ultraviolet.Size2,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Compares two sizes for equality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size2"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size2"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.op_Inequality(TwistedLogik.Ultraviolet.Size2,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Compares two sizes for inequality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size2"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size2"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.op_Addition(TwistedLogik.Ultraviolet.Size2,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Size2"/> to another <see cref="T:TwistedLogik.Ultraviolet.Size2"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> on the right side of the operator.</param>
            <returns>The result of adding the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.op_Subtraction(TwistedLogik.Ultraviolet.Size2,TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Subtracts a <see cref="T:TwistedLogik.Ultraviolet.Size2"/> from another <see cref="T:TwistedLogik.Ultraviolet.Size2"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size2"/> on the right side of the operator.</param>
            <returns>The result of subtracting the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.op_Implicit(TwistedLogik.Ultraviolet.Size2)~TwistedLogik.Ultraviolet.Size2F">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.TryParse(System.String,TwistedLogik.Ultraviolet.Size2@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.Parse(System.String)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Size2@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.Equals(TwistedLogik.Ultraviolet.Size2)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2.Interpolate(TwistedLogik.Ultraviolet.Size2,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2.Zero">
            <summary>
            Gets a size with zero width and height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2.Width">
            <summary>
            Gets the size's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2.Height">
            <summary>
            Gets the size's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2.Area">
            <summary>
            Gets the size's total area (width times height).
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Size2D">
            <summary>
            Represents a two-dimensional area with double-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure.
            </summary>
            <param name="width">The area's width.</param>
            <param name="height">The area's height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Equality(TwistedLogik.Ultraviolet.Size2D,TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Compares two sizes for equality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Inequality(TwistedLogik.Ultraviolet.Size2D,TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Compares two sizes for inequality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Addition(TwistedLogik.Ultraviolet.Size2D,TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> to another <see cref="T:TwistedLogik.Ultraviolet.Size2D"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> on the right side of the operator.</param>
            <returns>The result of adding the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Subtraction(TwistedLogik.Ultraviolet.Size2D,TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Subtracts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> from another <see cref="T:TwistedLogik.Ultraviolet.Size2D"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> on the right side of the operator.</param>
            <returns>The result of subtracting the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Explicit(TwistedLogik.Ultraviolet.Size2D)~TwistedLogik.Ultraviolet.Size2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Implicit(TwistedLogik.Ultraviolet.Size2)~TwistedLogik.Ultraviolet.Size2D">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Explicit(TwistedLogik.Ultraviolet.Size2D)~TwistedLogik.Ultraviolet.Size2F">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.op_Implicit(TwistedLogik.Ultraviolet.Size2F)~TwistedLogik.Ultraviolet.Size2D">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.TryParse(System.String,TwistedLogik.Ultraviolet.Size2D@)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.Parse(System.String)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure.
            </summary>
            <param name="s">A string containing an area to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure equivalent to the area contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Size2D@)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure.
            </summary>
            <param name="s">A string containing an area to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2D"/> structure equivalent to the area contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.Equals(TwistedLogik.Ultraviolet.Size2D)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2D.Interpolate(TwistedLogik.Ultraviolet.Size2D,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2D.Zero">
            <summary>
            Gets an area with zero width and height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2D.Width">
            <summary>
            Gets the area's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2D.Height">
            <summary>
            Gets the area's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2D.Area">
            <summary>
            Gets the size's total area (width times height).
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Size2F">
            <summary>
            Represents a two-dimensional area with single-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            </summary>
            <param name="width">The area's width.</param>
            <param name="height">The area's height.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.op_Equality(TwistedLogik.Ultraviolet.Size2F,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Compares two sizes for equality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.op_Inequality(TwistedLogik.Ultraviolet.Size2F,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Compares two sizes for inequality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.op_Addition(TwistedLogik.Ultraviolet.Size2F,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> to another <see cref="T:TwistedLogik.Ultraviolet.Size2F"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> on the right side of the operator.</param>
            <returns>The result of adding the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.op_Subtraction(TwistedLogik.Ultraviolet.Size2F,TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Subtracts a <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> from another <see cref="T:TwistedLogik.Ultraviolet.Size2F"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> on the right side of the operator.</param>
            <returns>The result of subtracting the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.op_Explicit(TwistedLogik.Ultraviolet.Size2F)~TwistedLogik.Ultraviolet.Size2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.op_Implicit(TwistedLogik.Ultraviolet.Size2)~TwistedLogik.Ultraviolet.Size2F">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.TryParse(System.String,TwistedLogik.Ultraviolet.Size2F@)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.Parse(System.String)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            </summary>
            <param name="s">A string containing an area to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure equivalent to the area contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Size2F@)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of an area into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure.
            </summary>
            <param name="s">A string containing an area to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size2F"/> structure equivalent to the area contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.Equals(TwistedLogik.Ultraviolet.Size2F)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size2F.Interpolate(TwistedLogik.Ultraviolet.Size2F,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2F.Zero">
            <summary>
            Gets an area with zero width and height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2F.Width">
            <summary>
            Gets the area's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2F.Height">
            <summary>
            Gets the area's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size2F.Area">
            <summary>
            Gets the size's total area (width times height).
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Size3">
            <summary>
            Represents a three-dimensional size with integer components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure.
            </summary>
            <param name="width">The area's width.</param>
            <param name="height">The area's height.</param>
            <param name="depth">The area's depth</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.op_Equality(TwistedLogik.Ultraviolet.Size3,TwistedLogik.Ultraviolet.Size3)">
            <summary>
            Compares two sizes for equality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size3"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size3"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.op_Inequality(TwistedLogik.Ultraviolet.Size3,TwistedLogik.Ultraviolet.Size3)">
            <summary>
            Compares two sizes for inequality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size3"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size3"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.op_Addition(TwistedLogik.Ultraviolet.Size3,TwistedLogik.Ultraviolet.Size3)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Size3"/> to another <see cref="T:TwistedLogik.Ultraviolet.Size3"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size3"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size3"/> on the right side of the operator.</param>
            <returns>The result of adding the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.op_Subtraction(TwistedLogik.Ultraviolet.Size3,TwistedLogik.Ultraviolet.Size3)">
            <summary>
            Subtracts a <see cref="T:TwistedLogik.Ultraviolet.Size3"/> from another <see cref="T:TwistedLogik.Ultraviolet.Size3"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size3"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size3"/> on the right side of the operator.</param>
            <returns>The result of subtracting the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.TryParse(System.String,TwistedLogik.Ultraviolet.Size3@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.Parse(System.String)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Size3@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.Equals(TwistedLogik.Ultraviolet.Size3)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3.Interpolate(TwistedLogik.Ultraviolet.Size3,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3.Zero">
            <summary>
            A size with zero width, height, and depth.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3.Width">
            <summary>
            Gets the size's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3.Height">
            <summary>
            Gets the size's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3.Depth">
            <summary>
            Gets the size's depth.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3.Volume">
            <summary>
            Gets the size's total volume (width times height times depth).
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Size3D">
            <summary>
            Represents a three-dimensional size with double-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure.
            </summary>
            <param name="width">The area's width.</param>
            <param name="height">The area's height.</param>
            <param name="depth">The area's depth</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Equality(TwistedLogik.Ultraviolet.Size3D,TwistedLogik.Ultraviolet.Size3D)">
            <summary>
            Compares two sizes for equality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Inequality(TwistedLogik.Ultraviolet.Size3D,TwistedLogik.Ultraviolet.Size3D)">
            <summary>
            Compares two sizes for inequality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Addition(TwistedLogik.Ultraviolet.Size3D,TwistedLogik.Ultraviolet.Size3D)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> to another <see cref="T:TwistedLogik.Ultraviolet.Size3D"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> on the right side of the operator.</param>
            <returns>The result of adding the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Subtraction(TwistedLogik.Ultraviolet.Size3D,TwistedLogik.Ultraviolet.Size3D)">
            <summary>
            Subtracts a <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> from another <see cref="T:TwistedLogik.Ultraviolet.Size3D"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> on the right side of the operator.</param>
            <returns>The result of subtracting the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Explicit(TwistedLogik.Ultraviolet.Size3D)~TwistedLogik.Ultraviolet.Size3">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Implicit(TwistedLogik.Ultraviolet.Size3)~TwistedLogik.Ultraviolet.Size3D">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Explicit(TwistedLogik.Ultraviolet.Size3D)~TwistedLogik.Ultraviolet.Size3F">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.op_Implicit(TwistedLogik.Ultraviolet.Size3F)~TwistedLogik.Ultraviolet.Size3D">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.TryParse(System.String,TwistedLogik.Ultraviolet.Size3D@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.Parse(System.String)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Size3D@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3D"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.Equals(TwistedLogik.Ultraviolet.Size3D)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3D.Interpolate(TwistedLogik.Ultraviolet.Size3D,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3D.Zero">
            <summary>
            A size with zero width, height, and depth.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3D.Width">
            <summary>
            Gets the size's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3D.Height">
            <summary>
            Gets the size's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3D.Depth">
            <summary>
            Gets the size's depth.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3D.Volume">
            <summary>
            Gets the size's total volume (width times height times depth).
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Size3F">
            <summary>
            Represents a three-dimensional size with single-precision floating point components.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure.
            </summary>
            <param name="width">The area's width.</param>
            <param name="height">The area's height.</param>
            <param name="depth">The area's depth</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.op_Equality(TwistedLogik.Ultraviolet.Size3F,TwistedLogik.Ultraviolet.Size3F)">
            <summary>
            Compares two sizes for equality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.op_Inequality(TwistedLogik.Ultraviolet.Size3F,TwistedLogik.Ultraviolet.Size3F)">
            <summary>
            Compares two sizes for inequality.
            </summary>
            <param name="s1">The first <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> to compare.</param>
            <param name="s2">The second <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> to compare.</param>
            <returns><c>true</c> if the specified sizes are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.op_Addition(TwistedLogik.Ultraviolet.Size3F,TwistedLogik.Ultraviolet.Size3F)">
            <summary>
            Adds a <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> to another <see cref="T:TwistedLogik.Ultraviolet.Size3F"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> on the right side of the operator.</param>
            <returns>The result of adding the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.op_Subtraction(TwistedLogik.Ultraviolet.Size3F,TwistedLogik.Ultraviolet.Size3F)">
            <summary>
            Subtracts a <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> from another <see cref="T:TwistedLogik.Ultraviolet.Size3F"/>.
            </summary>
            <param name="s1">The <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> on the left side of the operator.</param>
            <param name="s2">The <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> on the right side of the operator.</param>
            <returns>The result of subtracting the two instances.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.op_Explicit(TwistedLogik.Ultraviolet.Size3F)~TwistedLogik.Ultraviolet.Size3">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.op_Implicit(TwistedLogik.Ultraviolet.Size3)~TwistedLogik.Ultraviolet.Size3F">
            <summary>
            Implicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Size3"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure.
            </summary>
            <param name="size">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.TryParse(System.String,TwistedLogik.Ultraviolet.Size3F@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.Parse(System.String)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Size3F@)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="size">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a size into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure.
            </summary>
            <param name="s">A string containing a size to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Size3F"/> structure equivalent to the size contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.Equals(TwistedLogik.Ultraviolet.Size3F)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Size3F.Interpolate(TwistedLogik.Ultraviolet.Size3F,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3F.Zero">
            <summary>
            A size with zero width, height, and depth.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3F.Width">
            <summary>
            Gets the size's width.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3F.Height">
            <summary>
            Gets the size's height.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3F.Depth">
            <summary>
            Gets the size's depth.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Size3F.Volume">
            <summary>
            Gets the size's total volume (width times height times depth).
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.TaskUtil">
            <summary>
            Contains utility methods for creating Task objects.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TaskUtil.FromResult``1(``0)">
            <summary>
            Creates a Task object which encapsulates the specified result value.
            </summary>
            <typeparam name="T">The type of value returned from the task.</typeparam>
            <param name="value">The result value.</param>
            <returns>The Task that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Tweening">
            <summary>
            Contains methods for tweening values.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.Tweening"/> type.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Object,System.Object,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Object,System.Object,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Boolean,System.Boolean,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Boolean,System.Boolean,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Byte,System.Byte,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Byte,System.Byte,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.SByte,System.SByte,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.SByte,System.SByte,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Char,System.Char,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Char,System.Char,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Int16,System.Int16,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Int16,System.Int16,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.UInt16,System.UInt16,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.UInt16,System.UInt16,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Int32,System.Int32,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Int32,System.Int32,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.UInt32,System.UInt32,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.UInt32,System.UInt32,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Int64,System.Int64,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Int64,System.Int64,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.UInt64,System.UInt64,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.UInt64,System.UInt64,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Single,System.Single,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Single,System.Single,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Double,System.Double,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Double,System.Double,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween(System.Decimal,System.Decimal,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp(System.Decimal,System.Decimal,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Tween``1(``0,``0,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <typeparam name="T">The type of value to tween.</typeparam>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.Lerp``1(``0,``0,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <typeparam name="T">The type of value to tween.</typeparam>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.TweenRef``1(``0@,``0@,TwistedLogik.Ultraviolet.EasingFunction,System.Single)">
            <summary>
            Tweens the specified values.
            </summary>
            <typeparam name="T">The type of value to tween.</typeparam>
            <param name="tweenStart">The start value.</param>
            <param name="tweenEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Tweening.LerpRef``1(``0@,``0@,System.Single)">
            <summary>
            Performs a linear interpolation between the specified values.
            </summary>
            <typeparam name="T">The type of value to tween.</typeparam>
            <param name="lerpStart">The start value.</param>
            <param name="lerpEnd">The end value.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the interpolation.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Tweening.Interpolators">
            <summary>
            Gets the tweening system's custom interpolation function registry.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Interpolator`1">
            <summary>
            Represents a custom interpolation function.
            </summary>
            <typeparam name="T">The type of value being interpolated.</typeparam>
            <param name="valueStart">The start value.</param>
            <param name="valueEnd">The end value.</param>
            <param name="fn">The easing function to apply.</param>
            <param name="t">A value between 0.0 and 1.0 indicating the current position in the tween.</param>
            <returns>A value which is interpolated from the specified start and end values.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry">
            <summary>
            Represents the registry of interpolation methods used by the Ultraviolet tweening system.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry.RegisterDefault``1">
            <summary>
            Registers a default interpolator for the specified type.
            </summary>
            <typeparam name="T">The type for which to register a default interpolator.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry.Register``1(TwistedLogik.Ultraviolet.Interpolator{``0})">
            <summary>
            Registers a custom interpolator function for the specified type.
            </summary>
            <typeparam name="T">The type of value for which to register a custom interpolator.</typeparam>
            <param name="interpolator">The custom interpolator function to register for the specified type.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry.Unregister``1">
            <summary>
            Unregisters any custom interpolation function for the specified type.
            </summary>
            <typeparam name="T">The type of value for which to unregister a custom interpolator.</typeparam>
            <returns><c>true</c> if the specified type had a function that was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry.Contains``1">
            <summary>
            Gets a value indicating whether the specified type has a custom interpolation function.
            </summary>
            <typeparam name="T">The type of value for which to determine whether a custom interpolator exists.</typeparam>
            <returns><c>true</c> if the specified type has a custom interpolation function; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry.TryGet``1(TwistedLogik.Ultraviolet.Interpolator{``0}@)">
            <summary>
            Attempts to retrieve the interpolator for the specified type.
            </summary>
            <typeparam name="T">The type of value for which to retrieve an interpolator.</typeparam>
            <param name="interpolator">The interpolator for the specified type, if one exists.</param>
            <returns><c>true</c> if an interpolator was registered for the specified type; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.TweeningInterpolationRegistry.RegisterNullable``1(TwistedLogik.Ultraviolet.Interpolator{``0})">
            <summary>
            Registers an interpolator for the nullable version of the specified type.
            </summary>
            <typeparam name="T">The type for which to register an interpolator.</typeparam>
            <param name="interpolator">The interpolator for the non-nullable type.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.NamespaceDoc">
            <summary>
            The <see cref="N:TwistedLogik.Ultraviolet.UI"/> namespace contains types relating to Ultraviolet's user interface subsystem.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanelEventHandler">
            <summary>
            Represents the method that is called when a <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> raises an event.
            </summary>
            <param name="panel">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> that raised the event.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanelUpdateEventHandler">
            <summary>
            Represents the method that is called when a <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> is updated.
            </summary>
            <param name="panel">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> that raised the event.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanelDrawEventHandler">
            <summary>
            Represents the method that is called when a <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> is being drawn.
            </summary>
            <param name="panel">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> that raised the event.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The sprite batch with which the panel is being drawn.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanel">
            <summary>
            Represents a user interface panel.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.#ctor(System.String,TwistedLogik.Ultraviolet.Content.ContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> class.
            </summary>
            <param name="rootDirectory">The root directory of the panel's local content manager.</param>
            <param name="globalContent">The content manager with which to load globally-available assets.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.String,TwistedLogik.Ultraviolet.Content.ContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="rootDirectory">The root directory of the panel's local content manager.</param>
            <param name="globalContent">The content manager with which to load globally-available assets.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the panel's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.Draw(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <summary>
            Draws the panel using the specified sprite batch.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which to draw the panel.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.GlobalContent">
            <summary>
            Gets the content manager which is used to load globally-available assets.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.LocalContent">
            <summary>
            Gets the content manager which is used to load assets which are local to this screen.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.View">
            <summary>
            Gets the screen's view, if it has one.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.X">
            <summary>
            Gets the panel's x-coordinate on the screen.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.Y">
            <summary>
            Gets the panel's y-coordinate on the screen.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.Size">
            <summary>
            Gets the panel's size in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.Width">
            <summary>
            Gets the panel's width in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.Height">
            <summary>
            Gets the panel's height in pixels.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsReadyForInput">
            <summary>
            Gets a value indicating whether this panel is ready for input.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsReadyForBackgroundInput">
            <summary>
            Gets a value indicating whether this panel is ready for input which does
            not require the panel to be foremost on the window.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.State">
            <summary>
            Gets the <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanelState"/> value that represents the panel's current transition state.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsTransitioning">
            <summary>
            Gets a value indicating whether the screen is in a transition state.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.TransitionPosition">
            <summary>
            Gets the panel's position within its current transition, if it is transitioning.
            A value of 0.0 indicates that the panel is closed, while a value of 1.0 indicates
            that the panel is open.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.TransitionDuration">
            <summary>
            Gets the duration in milliseconds of the panel's current transition, if it is transitioning.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.DefaultOpenTransitionDuration">
            <summary>
            Gets or sets the amount of time over which the panel will transition to
            its open state if no time is explicitly specified.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.DefaultCloseTransitionDuration">
            <summary>
            Gets or sets the amount of time over which the panel will transition to
            its closed state if no time is explicitly specified.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.Window">
            <summary>
            Gets the window to which the screen is drawn.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.Screens">
            <summary>
            The screen stack for the panel's current window.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.Updating">
            <summary>
            Occurs when the panel is being updated.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.DrawingBackground">
            <summary>
            Occurs when the panel is drawing its background.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.DrawingLayout">
            <summary>
            Occurs when the panel is drawing its layout.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.DrawingForeground">
            <summary>
            Occurs when the panel is drawing its foreground.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.Opening">
            <summary>
            Occurs when the panel begins opening.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.Opened">
            <summary>
            Occurs after the panel has opened.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.Closing">
            <summary>
            Occurs when the panel begins closing.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UIPanel.Closed">
            <summary>
            Occurs after the panel has closed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.Open(System.Nullable{System.TimeSpan})">
            <summary>
            Opens the panel.
            </summary>
            <param name="duration">The amount of time over which to transition the panel's state, or
            <c>null</c> to use the default transition time.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OpenAsync(System.Nullable{System.TimeSpan})">
            <summary>
            Asynchronously opens the panel.
            </summary>
            <param name="duration">The amount of time over which to transition the panel's state, or
            <c>null</c> to use the default transition time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.Close(System.Nullable{System.TimeSpan})">
            <summary>
            Closes the panel.
            </summary>
            <param name="duration">The amount of time over which to transition the panel's state, or
            <c>null</c> to use the default transition time.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.CloseAsync(System.Nullable{System.TimeSpan})">
            <summary>
            Asynchronously closes the panel.
            </summary>
            <param name="duration">The amount of time over which to transition the panel's state, or
            <c>null</c> to use the default transition time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous operation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.CreateViewModel(TwistedLogik.Ultraviolet.UI.UIView)">
            <summary>
            Creates a view model for the specified view.
            </summary>
            <param name="view">The view for which to create a view model.</param>
            <returns>The view model for the specified view, or <c>null</c> if the view has no view model.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnUpdating(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Updating"/> event.
            </summary>
            <param name="time">The Ultraviolet time.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnDrawingBackground(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.DrawingBackground"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which the panel is being drawn.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnDrawingLayout(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.DrawingLayout"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which the panel is being drawn.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnDrawingForeground(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.DrawingForeground"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which the panel is being drawn.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnOpening">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Opening"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnOpened">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Opened"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnClosing">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Closing"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OnClosed">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Closed"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.LoadView(TwistedLogik.Ultraviolet.UI.UIPanelDefinition)">
            <summary>
            Loads the view from the specified panel definition.
            </summary>
            <param name="definition">The panel definition from which to load the view.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.DrawView(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <summary>
            Draws the panel's view.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which the panel is being drawn.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.UpdateView(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the panel's view.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.UpdateViewPosition">
            <summary>
            Updates the position of the panel's view.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.UpdateTransition(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the panel's transition state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.ResetViewModel">
            <summary>
            Creates a new view model for the panel's view and sets it on the view.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsOnPrimaryWindow">
            <summary>
            Gets a value indicating whether the panel is on the primary window.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsOnCurrentWindow">
            <summary>
            Gets a value indicating whether the panel is on the current window.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsOpen">
            <summary>
            Gets a value indicating whether the panel is in the <see cref="F:TwistedLogik.Ultraviolet.UI.UIPanelState.Open"/> state.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsClosed">
            <summary>
            Gets a value indicating whether the panel is in the <see cref="F:TwistedLogik.Ultraviolet.UI.UIPanelState.Closed"/> state.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.WindowSize">
            <summary>
            Gets the size of the panel's current window.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.WindowWidth">
            <summary>
            Gets the width of the panel's current window.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.WindowHeight">
            <summary>
            Gets the height of the panel's current window.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanel.WindowScreens">
            <summary>
            Gets the screen stack for the panel's current window.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.HandleOpening">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Opening"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.HandleOpened">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Opened"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.HandleClosing">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Closing"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.HandleClosed">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UI.UIPanel.Closed"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.HandleViewLoaded">
            <summary>
            Occurs when the panel's view is loaded.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.CancelPendingTasks">
            <summary>
            Cancels any pending tasks associated with the panel's state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.OpenInternal(System.TimeSpan,System.Boolean)">
            <summary>
            Opens the panel.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.CloseInternal(System.TimeSpan,System.Boolean)">
            <summary>
            Closes the panel.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanel.CreateTaskCompletionSourceIfNeeded(System.Boolean,System.Threading.Tasks.TaskCompletionSource{TwistedLogik.Ultraviolet.UI.UIPanel}@)">
            <summary>
            Creates the specified task completion source if it is requested and does not already exist.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanelDefinition">
            <summary>
            Represents a UI panel's definition file.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDefinition.AssetFilePath">
            <summary>
            Gets the path to the asset file from which the panel definition was loaded.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDefinition.DefaultOpenTransitionDuration">
            <summary>
            Gets the amount of time over which the panel will transition to
            its open state if no time is explicitly specified.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDefinition.DefaultCloseTransitionDuration">
            <summary>
            Gets the amount of time over which the panel will transition to
            its closed state if no time is explicitly specified.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDefinition.RootElement">
            <summary>
            Gets the root element of the panel definition.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDefinition.ViewElement">
            <summary>
            Gets the XML element which describes the panel's view layout.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDefinition.StyleSheets">
            <summary>
            Gets the contents of the panel's associated style sheets, if it has any.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDefinition.Directives">
            <summary>
            Gets the panel's collection of directives, if it has any.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanelDefinitionProcessor">
            <summary>
            Represents a content processor which processes XML panel
            definitions into instances of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanelDefinition"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanelDefinitionProcessor.Process(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.IContentProcessorMetadata,System.Xml.Linq.XDocument)">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanelDirective">
            <summary>
            Represents a directive indicating how a <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanelDefinition"/> should be processed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIPanelDirective.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanelDirective"/> class.
            </summary>
            <param name="type">The directive's type.</param>
            <param name="value">The directive's value.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDirective.Type">
            <summary>
            Gets the directive's type.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIPanelDirective.Value">
            <summary>
            Gets the directive's value.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIPanelState">
            <summary>
            Represents a UI panel's possible transition states.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UI.UIPanelState.Opening">
            <summary>
            The panel is in the process of opening.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UI.UIPanelState.Open">
            <summary>
            The panel is open.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UI.UIPanelState.Closing">
            <summary>
            The panel is in the process of closing.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UI.UIPanelState.Closed">
            <summary>
            The panel is closed.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIScreen">
            <summary>
            Represents a user interface screen.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.#ctor(System.String,System.String,TwistedLogik.Ultraviolet.Content.ContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> class.
            </summary>
            <param name="rootDirectory">The root directory of the panel's local content manager.</param>
            <param name="definitionAsset">The asset path of the screen's definition file.</param>
            <param name="globalContent">The content manager with which to load globally-available assets.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,System.String,System.String,TwistedLogik.Ultraviolet.Content.ContentManager)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="rootDirectory">The root directory of the panel's local content manager.</param>
            <param name="definitionAsset">The asset path of the screen's definition file.</param>
            <param name="globalContent">The content manager with which to load globally-available assets.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.Draw(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.X">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.Y">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.Size">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.Width">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.Height">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.IsReadyForInput">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.IsReadyForBackgroundInput">
            <inheritdoc/>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.IsOpaque">
            <summary>
            Gets or sets a value indicating whether this screen is opaque.
            </summary>
            <remarks>Marking a screen as opaque is a performance optimization. If a screen is opaque, then Ultraviolet
            will not render any screens below it in the screen stack.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreen.IsTopmost">
            <summary>
            Gets a value indicating whether this screen is the topmost screen on its current window.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.HandleOpening">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.HandleOpened">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.OnClosing">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.HandleClosed">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.HandleViewLoaded">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreen.LoadPanelDefinition(System.String)">
            <summary>
            Loads the screen's panel definition from the specified asset.
            </summary>
            <param name="asset">The name of the asset that contains the panel definition.</param>
            <returns>The panel definition that was loaded from the specified asset.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIScreenStack">
            <summary>
            Represents a window's stack of active screens.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIScreenStack.PendingOpening">
            <summary>
            Represents a screen that is waiting for another screen to close before being opened.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.#ctor(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreenStack"/> class.
            </summary>
            <param name="window">The window that owns the screen stack.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Clear">
            <summary>
            Clears the stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Draw(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <summary>
            Draws the screens in the stack.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which to draw the screen stack's screens.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the screen stack's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.BringToFront(TwistedLogik.Ultraviolet.UI.UIScreen)">
            <summary>
            Brings the specified screen to the front of the stack.
            </summary>
            <param name="screen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to bring to the front of the stack.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.SendToBack(TwistedLogik.Ultraviolet.UI.UIScreen)">
            <summary>
            Sends the specified screen to the back of the stack.
            </summary>
            <param name="screen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to send to the back of the stack.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Open(TwistedLogik.Ultraviolet.UI.UIScreen,System.Nullable{System.TimeSpan})">
            <summary>
            Opens the specified screen on the top of the stack.
            </summary>
            <param name="screen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to open.</param>
            <param name="duration">The amount of time over which to transition the screen's state, or
            <c>null</c> to use the default transition time.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.OpenAsync(TwistedLogik.Ultraviolet.UI.UIScreen,System.Nullable{System.TimeSpan})">
            <summary>
            Opens the specified screen on the top of the stack.
            </summary>
            <param name="screen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to open.</param>
            <param name="duration">The amount of time over which to transition the screen's state, or
            <c>null</c> to use the default transition time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.OpenBelow(TwistedLogik.Ultraviolet.UI.UIScreen,TwistedLogik.Ultraviolet.UI.UIScreen,System.Nullable{System.TimeSpan})">
            <summary>
            Opens the specified screen and positions it immediately beneath a second
            screen which is already on the screen stack.
            </summary>
            <param name="screenToOpen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to open.</param>
            <param name="screenAbove">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> below which to open <paramref name="screenToOpen"/>.</param>
            <param name="duration">The amount of time over which to transition the screen's state, or
            <c>null</c> to use the default transition time.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.OpenBelowAsync(TwistedLogik.Ultraviolet.UI.UIScreen,TwistedLogik.Ultraviolet.UI.UIScreen,System.Nullable{System.TimeSpan})">
            <summary>
            Opens the specified screen and positions it immediately beneath a second
            screen which is already on the screen stack.
            </summary>
            <param name="screenToOpen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to open.</param>
            <param name="screenAbove">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> below which to open <paramref name="screenToOpen"/>.</param>
            <param name="duration">The amount of time over which to transition the screen's state, or
            <c>null</c> to use the default transition time.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> which represents the asynchronous operation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Close(TwistedLogik.Ultraviolet.UI.UIScreen,System.Nullable{System.TimeSpan})">
            <summary>
            Closes the specified screen.
            </summary>
            <param name="screen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to close.</param>
            <param name="duration">The amount of time over which to transition the screen's state, or
            <c>null</c> to use the default transition time.</param>
            <returns><c>true</c> if the screen was closed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.CloseAsync(TwistedLogik.Ultraviolet.UI.UIScreen,System.Nullable{System.TimeSpan})">
            <summary>
            Asynchronously closes the specified screen.
            </summary>
            <param name="screen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to close.</param>
            <param name="duration">The amount of time over which to transition the screen's state, or
            <c>null</c> to use the default transition time.</param>
            <returns>A task which represents the asynchronous operation.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Close(System.Func{TwistedLogik.Ultraviolet.UI.UIScreen,System.Boolean},System.Nullable{System.TimeSpan})">
            <summary>
            Closes any screens which match the specified predicate.
            </summary>
            <param name="predicate">The predicate with which to determine which screens to close.</param>
            <param name="duration">The amount of time over which to transition the screens' states, or
            <c>null</c> to use the default transition time.</param>
            <returns><c>true</c> if any screens were closed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.CloseAsync(System.Func{TwistedLogik.Ultraviolet.UI.UIScreen,System.Boolean},System.Nullable{System.TimeSpan})">
            <summary>
            Asynchronously closes any screens which match the specified predicate.
            </summary>
            <param name="predicate">The predicate with which to determine which screens to close.</param>
            <param name="duration">The amount of time over which to transition the screens' states, or
            <c>null</c> to use the default transition time.</param>
            <returns>A collection of <see cref="T:System.Threading.Tasks.Task"/> objects representing the asynchronous operations.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.CloseThenOpen(TwistedLogik.Ultraviolet.UI.UIScreen,TwistedLogik.Ultraviolet.UI.UIScreen)">
            <summary>
            Closes the specified screen, then opens another screen once the first screen has finished closing.
            </summary>
            <param name="closing">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to close.</param>
            <param name="opening">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to open.</param>
            <returns><c>true</c> if the first screen needed to be closed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.CloseThenOpen(TwistedLogik.Ultraviolet.UI.UIScreen,System.TimeSpan,TwistedLogik.Ultraviolet.UI.UIScreen,System.TimeSpan)">
            <summary>
            Closes the specified screen, then opens another screen once the first screen has finished closing.
            </summary>
            <param name="closing">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to close.</param>
            <param name="closingDuration">The amount of time over which to close the screen.</param>
            <param name="opening">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to open.</param>
            <param name="openingDuration">The amount of time over which to open the screen.</param>
            <returns><c>true</c> if the first screen needed to be closed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Contains(TwistedLogik.Ultraviolet.UI.UIScreen)">
            <summary>
            Gets a value indicating whether the screen stack contains the specified screen.
            </summary>
            <param name="screen">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> to evaluate.</param>
            <returns><c>true</c> if the screen stack contains the specified screen; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.Peek">
            <summary>
            Retrieves the topmost screen on the stack.
            </summary>
            <returns>The topmost <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreen"/> on the stack.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.System#Collections#Generic#IEnumerable{TwistedLogik#Ultraviolet#UI#UIScreen}#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>An enumerator for the collection.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreenStack.Window">
            <summary>
            Gets the window that owns the screen stack.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreenStack.Count">
            <summary>
            Gets the number of screens on the stack.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.FindFirstScreenToRender">
            <summary>
            Searches the screen stack for the first screen that should be rendered.
            This takes into consideration which screens are marked opaque; screen beneath opaque screens
            are not rendered as a performance optimization.
            </summary>
            <returns>The linked list node that contains the first screen in the stack to render.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.RemoveIfClosed(TwistedLogik.Ultraviolet.UI.UIScreen)">
            <summary>
            Removes the specified screen from the screen list, if the screen is closed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.RemoveIfClosed(System.Collections.Generic.LinkedListNode{TwistedLogik.Ultraviolet.UI.UIScreen})">
            <summary>
            Removes the specified screen from the screen list, if the screen is closed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.UpdatePendingOpenings">
            <summary>
            Updates the stack's pending openings.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStack.CloseThenOpenInternal(TwistedLogik.Ultraviolet.UI.UIScreen,System.TimeSpan,TwistedLogik.Ultraviolet.UI.UIScreen,System.TimeSpan)">
            <summary>
            Closes the specified screen, then opens another screen once the first screen has finished closing.
            </summary>
            <param name="closing">The screen to close.</param>
            <param name="closingDuration">The amount of time over which to close the screen.</param>
            <param name="opening">The screen to open.</param>
            <param name="openingDuration">The amount of time over which to open the screen.</param>
            <returns><c>true</c> if the first screen needed to be closed; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection">
            <summary>
            Represents a collection of screen stacks organized by window.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.Dispose">
            <summary>
            Releases resources associated with the object.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.Item(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Gets the screen stack associated with the specified window.
            </summary>
            <param name="window">The window for which to retrieve a screen stack.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreenStack"/> associated with the specified window.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.Window_DrawingUI(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Handles a window's DrawingUI event.
            </summary>
            <param name="window">The window being drawn.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.WindowInfo_WindowCreated(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Handles the window manager's WindowCreated event.
            </summary>
            <param name="window">The window that was created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.WindowInfo_WindowDestroyed(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Handles the window manager's WindowDestroyed event.
            </summary>
            <param name="window">The window that was destroyed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.CreateScreenStack(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Creates the specified window's screen stack.
            </summary>
            <param name="window">The window being created.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.DestroyScreenStack(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Destroys the specified window's screen stack.
            </summary>
            <param name="window">The window being destroyed.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIScreenStackCollection.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIViewModelFactory">
            <summary>
            Represents a method which constructs view model instances for the specified view.
            </summary>
            <param name="view">The view for which to create a view model.</param>
            <returns>The view model that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIViewFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIView"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="uiPanel">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> that is creating the view.</param>
            <param name="uiPanelDefinition">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanelDefinition"/> that defines the view's containing panel.</param>
            <param name="vmfactory">A view model factory which is used to create the view's initial view model, or <c>null</c> to skip view model creation.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.UI.UIView"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIView">
            <summary>
            Represents a 
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.UI.UIPanel,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIView"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="panel">The panel that owns the view.</param>
            <param name="viewModelType">The view's associated view model type.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.Create(TwistedLogik.Ultraviolet.UI.UIPanel,TwistedLogik.Ultraviolet.UI.UIPanelDefinition,TwistedLogik.Ultraviolet.UI.UIViewModelFactory)">
            <summary>
            Creates a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIView"/> class.
            </summary>
            <param name="uiPanel">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanel"/> which is creating the view.</param>
            <param name="uiPanelDefinition">The <see cref="T:TwistedLogik.Ultraviolet.UI.UIPanelDefinition"/> that defines the view's containing panel.</param>
            <param name="vmfactory">A view model factory which is used to create the view's initial view model, or <c>null</c> to skip view model creation.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.UI.UIView"/> that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.Draw(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch)">
            <summary>
            Draws the view.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="spriteBatch">The <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteBatch"/> with which to draw the view.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the view's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.SetContentManagers(TwistedLogik.Ultraviolet.Content.ContentManager,TwistedLogik.Ultraviolet.Content.ContentManager)">
            <summary>
            Sets the content managers used to load UI assets.
            </summary>
            <param name="global">The content manager used to load globally-sourced assets.</param>
            <param name="local">The content manager used to load locally-sourced assets.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.SetViewModel(System.Object)">
            <summary>
            Sets the view's associated view model.
            </summary>
            <param name="viewModel">The view's associated view model.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.SetViewPosition(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow,TwistedLogik.Ultraviolet.Rectangle)">
            <summary>
            Positions the view on the specified window.
            </summary>
            <param name="window">The window on which to position the view.</param>
            <param name="area">The area on the window in which to position the view.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.LoadGlobalContent``1(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Loads the specified asset from the global content manager.
            </summary>
            <typeparam name="TOutput">The type of object being loaded.</typeparam>
            <param name="asset">The identifier of the asset to load.</param>
            <returns>The asset that was loaded.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.LoadLocalContent``1(TwistedLogik.Ultraviolet.Content.AssetID)">
            <summary>
            Loads the specified asset from the local content manager.
            </summary>
            <typeparam name="TOutput">The type of object being loaded.</typeparam>
            <param name="asset">The identifier of the asset to load.</param>
            <returns>The asset that was loaded.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.LoadGlobalImage``1(``0)">
            <summary>
            Loads the specified image from the global content manager.
            </summary>
            <typeparam name="TImage">The type of image to load.</typeparam>
            <param name="image">The image to load.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.LoadLocalImage``1(``0)">
            <summary>
            Loads the specified image from the local content manager.
            </summary>
            <typeparam name="TImage">The type of image to load.</typeparam>
            <param name="image">The image to load.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.ScreenPositionToViewPosition(System.Int32,System.Int32)">
            <summary>
            Converts a position in screen space to a position in view space.
            </summary>
            <param name="x">The x-coordinate of the screen space position to convert.</param>
            <param name="y">The y-coordinate of the screen space position to convert.</param>
            <returns>The converted view space position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.ScreenPositionToViewPosition(TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Converts a position in screen space to a position in view space.
            </summary>
            <param name="position">The screen space position to convert.</param>
            <returns>The converted view space position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.ViewPositionToScreenPosition(System.Int32,System.Int32)">
            <summary>
            Converts a position in view space to a position in screen space.
            </summary>
            <param name="x">The x-coordinate of the view space position to convert.</param>
            <param name="y">The y-coordinate of the view space position to convert.</param>
            <returns>The converted screen space position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.ViewPositionToScreenPosition(TwistedLogik.Ultraviolet.Point2)">
            <summary>
            Converts a position in view space to a position in screen space.
            </summary>
            <param name="position">The view space position to convert.</param>
            <returns>The converted screen space position.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.GetViewModel``1">
            <summary>
            Gets the view's view model object.
            </summary>
            <typeparam name="TViewModel">The type of view model to retrieve.</typeparam>
            <returns>The view's view model object.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.Panel">
            <summary>
            Gets the panel that owns the view.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.GlobalContent">
            <summary>
            Gets the content manager used to load globally-sourced assets.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.LocalContent">
            <summary>
            Gets the content manager used to load locally-sourced assets.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.ViewModelType">
            <summary>
            Gets the type of view model expected by this view.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.ViewModelActualType">
            <summary>
            Gets the actual type of the view's current view model.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.ViewModel">
            <summary>
            Gets the view's view model.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.Area">
            <summary>
            Gets the area on the screen that the UI view occupies.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.X">
            <summary>
            Gets the x-coordinate of the view's top left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.Y">
            <summary>
            Gets the y-coordinate of the view's top left corner.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.Width">
            <summary>
            Gets the view's width on the screen.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.Height">
            <summary>
            Gets the view's height on the screen.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.IsInputEnabled">
            <summary>
            Gets or sets a value indicating whether input is enabled for this view.
            If <c>false</c>, then the view will not receive any input events.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.IsInputAllowed">
            <summary>
            Gets or sets a value indicating whether input is allowed for this view.
            If <c>false</c>, then the view will not receive any input events.
            </summary>
            <remarks>While <see cref="P:TwistedLogik.Ultraviolet.UI.UIView.IsInputEnabled"/> may be changed at any time, the value of <see cref="P:TwistedLogik.Ultraviolet.UI.UIView.IsInputAllowed"/> is managed
            by Ultraviolet itself and corresponds to the <see cref="P:TwistedLogik.Ultraviolet.UI.UIPanel.IsReadyForInput"/> property on the panel that owns the view.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.IsInputEnabledAndAllowed">
            <summary>
            Gets a value indicating whether input is currently both enabled and allowed on this view.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.Window">
            <summary>
            Gets the window in which the view is being rendered.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UI.UIView.Display">
            <summary>
            Gets the display on which the view is being rendered.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnOpening">
            <summary>
            Occurs when the view is about to be opened.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnOpened">
            <summary>
            Occurs when the view has been opened.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnClosing">
            <summary>
            Occurs when the view is about to be closed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnClosed">
            <summary>
            Occurs when the view has been closed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnContentManagersChanged">
            <summary>
            Called when the view's content managers are changed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnViewPositionChanged">
            <summary>
            Called when the view is repositioned.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnViewSizeChanged">
            <summary>
            Called when the view's size changes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.OnViewModelChanged">
            <summary>
            Called when the view's view model is changed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIView.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIViewProviderInitializerFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIViewProviderInitializer"/> class.
            </summary>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.UI.UIViewProviderInitializer"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UIViewProviderInitializer">
            <summary>
            Represents a class which is responsible for initializing the application's view provider.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UIViewProviderInitializer.Initialize(TwistedLogik.Ultraviolet.UltravioletContext,System.Object)">
            <summary>
            Initializes the view provider.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="configuration">The view provider configuration object.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UI.UltravioletUI">
            <summary>
            Represents the core implementation of the Ultraviolet UI subsystem.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UltravioletUI.#ctor(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.UltravioletConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UI.UltravioletUI"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="configuration">The Ultraviolet Framework configuration settings for the current context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UltravioletUI.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the subsystem's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UltravioletUI.GetScreens">
            <summary>
            Gets the screen stack associated with the primary window.
            </summary>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreenStack"/> associated with the primary window.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UltravioletUI.GetScreens(TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Gets the screen stack associated with the specified window.
            </summary>
            <param name="window">The window for which to retrieve a screen stack, 
            or <c>null</c> to retrieve the screen stack for the primary window.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.UI.UIScreenStack"/> associated with the specified window.</returns>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UI.UltravioletUI.Updating">
            <summary>
            Occurs when the subsystem is updating its state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UltravioletUI.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with this object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UI.UltravioletUI.OnUpdating(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Raises the Updating event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletBoxedValues">
            <summary>
            Contains commonly-used boxed values of the Ultraviolet Framework's value types.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletBoxedValues.Color">
            <summary>
            Contains boxed <see cref="T:TwistedLogik.Ultraviolet.Color"/> values.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletBoxedValues.Color.White">
            <summary>
            The cached box for the value <see cref="P:TwistedLogik.Ultraviolet.Color.White"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletBoxedValues.Color.Black">
            <summary>
            The cached box for the value <see cref="P:TwistedLogik.Ultraviolet.Color.Black"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletBoxedValues.Color.Transparent">
            <summary>
            The cached box for the value <see cref="P:TwistedLogik.Ultraviolet.Color.Transparent"/>.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletBoxedValues.SpriteFontStyle">
            <summary>
            Contains boxed <see cref="T:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle"/> values.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletBoxedValues.SpriteFontStyle.Regular">
            <summary>
            The cached box for the value <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.Regular"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletBoxedValues.SpriteFontStyle.Bold">
            <summary>
            The cached box for the value <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.Bold"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletBoxedValues.SpriteFontStyle.Italic">
            <summary>
            The cached box for the value <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.Italic"/>.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletBoxedValues.SpriteFontStyle.BoldItalic">
            <summary>
            The cached box for the value <see cref="F:TwistedLogik.Ultraviolet.Graphics.Graphics2D.SpriteFontStyle.BoldItalic"/>.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletCollection`1">
            <summary>
            Represents an enumerable collection.
            </summary>
            <typeparam name="T">The type of item stored in the collection.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletCollection`1"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletCollection`1"/> class.
            </summary>
            <param name="capacity">The collection's initial capacity.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.GetEnumerator">
            <summary>
            Gets an enumerator for the result.
            </summary>
            <returns>An enumerator for the result.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Gets an enumerator for the result.
            </summary>
            <returns>An enumerator for the result.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the result.
            </summary>
            <returns>An enumerator for the result.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletCollection`1.Item(System.Int32)">
            <summary>
            Gets the item at the specified index within the collection.
            </summary>
            <param name="ix">The index of the item to retrieve.</param>
            <returns>The item at the specified index within the collection.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletCollection`1.Count">
            <summary>
            Gets the number of items in the collection.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.ClearInternal">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.AddInternal(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.RemoveInternal(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><c>true</c> if the item was removed from the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletCollection`1.ContainsInternal(`0)">
            <summary>
            Gets a value indicating whether the collection contains the specified item.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns><c>true</c> if the collection contains the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletCollection`1.Storage">
            <summary>
            Gets the collection's underlying storage.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletConfiguration">
            <summary>
            Represents the Ultraviolet Framework's configuration settings.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletConfiguration"/> class.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.BackBufferRenderTargetUsage">
            <summary>
            Gets or sets the <see cref="T:TwistedLogik.Ultraviolet.Graphics.RenderTargetUsage"/> value which is used by the back buffer.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.ViewProviderAssembly">
            <summary>
            Gets or sets the full name of the assembly which is responsible for
            creating and managing instances of the <see cref="T:TwistedLogik.Ultraviolet.UI.UIView"/> class.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.ViewProviderConfiguration">
            <summary>
            Gets or sets an object which provides configuration values for the view provider.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.Debug">
            <summary>
            Gets or sets a value indicating whether to create a debug context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.DebugLevels">
            <summary>
            Gets or sets the levels of debug output which are enabled.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.DebugCallback">
            <summary>
            Gets or sets the delegate that is invoked when a debug message is logged.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.Headless">
            <summary>
            Gets or sets a value indicating whether the Ultraviolet context is headless.
            A headless context will not create a default window upon initialization.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.EnableServiceMode">
            <summary>
            Gets or sets a value indicating whether service mode is enabled. 
            </summary>
            <remarks>
            <para>In service mode, the graphics subsystem is never intialized and no windows are ever created. 
            This is different from headless mode, where the context's primary window is invisible but
            still exists.</para>
            <para>This mode is primarily useful in circumstances where an Ultraviolet-based application has to run in the context of a
            Windows service, for example on a build server. The Windows security model prevents services from accessing the graphics device,
            so we need to avoid doing so or else we'll run into errors.</para>
            </remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.WindowIsVisible">
            <summary>
            Gets or sets a value indicating whether the Ultraviolet context's default window is visible at startup.
            If the context is headless, this setting has no effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.WindowIsResizable">
            <summary>
            Gets or sets a value indicating whether the Ultraviolet context's default window can be resized.
            If the context is headless, this setting has no effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.WindowIsBorderless">
            <summary>
            Gets or sets a value indicating whether the Ultraviolet context's default window is borderless.
            If the context is headless, this setting has no effect.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletConfiguration.InitialWindowPosition">
            <summary>
            Gets or sets the intial size and position of the context's primary window.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.DebugCallback">
            <summary>
            Represents a callback that is invoked when the Ultraviolet Framework logs a debug message.
            </summary>
            <param name="uv">The Ultraviolet Context that logged the message.</param>
            <param name="level">A <see cref="T:TwistedLogik.Ultraviolet.DebugLevels"/> value representing the debug level of the message.</param>
            <param name="message">The debug message text.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletContextEventHandler">
            <summary>
            Represents a method that is called in response to an Ultraviolet context event.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletContextDrawEventHandler">
            <summary>
            Represents the method that is called when an Ultraviolet context is about to draw the current scene.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletContextWindowDrawEventHandler">
            <summary>
            Represents the method that is called when an Ultraviolet context has drawn or is about to draw a particular window.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="window">The window that was drawn or is about to be drawn.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletContextUpdateEventHandler">
            <summary>
            Represents the method that is called when an Ultraviolet context updates the application state.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletContext">
            <summary>
            Represents the Ultraviolet Framework and all of its subsystems.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletContext.Native">
            <summary>
            Contains native method declarations.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.#ctor(TwistedLogik.Ultraviolet.IUltravioletHost,TwistedLogik.Ultraviolet.UltravioletConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletContext"/> class.
            </summary>
            <param name="host">The object that is hosting the Ultraviolet context.</param>
            <param name="configuration">The Ultraviolet Framework configuration settings for this context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.TwistedLogik#Nucleus#Messages#IMessageSubscriber{TwistedLogik#Ultraviolet#UltravioletMessageID}#ReceiveMessage(TwistedLogik.Ultraviolet.UltravioletMessageID,TwistedLogik.Nucleus.Messages.MessageData)">
            <summary>
            Receives a message that has been published to a queue.
            </summary>
            <param name="type">The type of message that was received.</param>
            <param name="data">The data for the message that was received.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.Dispose">
            <summary>
            Releases resources associated with the object.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.ProcessSingleWorkItem">
            <summary>
            Processes a single queued work item, if any work items have been queued.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.ProcessWorkItems">
            <summary>
            Processes all queued work items.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.UpdateSuspended">
            <summary>
            Updates the game state while the application is suspended.
            </summary>
            <remarks>Certain platforms, such as phones and tablets, may suspend the application while it is in the background
            in order to save power. Ultraviolet will automatically cease calling <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/> and <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/> when
            this happens; however, some implementations may require that certain processing continues to take place even while 
            the application is suspended. The <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.UpdateSuspended"/> method is provided for such a scenario.
            </remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.HandleFrameStart">
            <summary>
            Called when a new frame is started.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.HandleFrameEnd">
            <summary>
            Called when a frame is completed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the game state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Draws the scene.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetPlatform">
            <summary>
            Gets the platform interop subsystem.
            </summary>
            <returns>The platform interop subsystem.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetContent">
            <summary>
            Gets the content management subsystem.
            </summary>
            <returns>The content management subsystem.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetGraphics">
            <summary>
            Gets the graphics subsystem.
            </summary>
            <returns>The graphics subsystem.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetAudio">
            <summary>
            Gets the audio subsystem.
            </summary>
            <returns>The audio subsystem.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetInput">
            <summary>
            Gets the input subsystem.
            </summary>
            <returns>The input subsystem.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetUI">
            <summary>
            Gets the user interface subsystem.
            </summary>
            <returns>The user interface subsystem.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.TryGetFactoryMethod``1">
            <summary>
            Gets the factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <returns>The default factory method of the specified delegate type, or <c>null</c> if no such factory method is registered.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.TryGetFactoryMethod``1(System.String)">
            <summary>
            Attempts to retrieve a named factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <param name="name">The name of the factory method to retrieve.</param>
            <returns>The specified named factory method, or <c>null</c> if no such factory method is registered.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetFactoryMethod``1">
            <summary>
            Gets the factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <returns>The default factory method of the specified delegate type.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.GetFactoryMethod``1(System.String)">
            <summary>
            Gets a named factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <param name="name">The name of the factory method to retrieve.</param>
            <returns>The specified named factory method.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.SpawnTask(System.Action{System.Threading.CancellationToken})">
            <summary>
            Spawns a new task.
            </summary>
            <remarks>Tasks spawned using this method will not be started until the next call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>, and will prevent
            the Ultraviolet context from shutting down until they complete or are canceled.  Do not attempt to <see cref="M:System.Threading.Tasks.Task.Wait"/> on these
            tasks from the main Ultraviolet thread; doing so will introduce a deadlock.</remarks>
            <param name="action">The action to perform within the task.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that was spawned.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.WaitForPendingTasks(System.Boolean)">
            <summary>
            Waits for any pending tasks to complete.
            </summary>
            <param name="cancel">A value indicating whether to cancel pending tasks.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItemAndWait(System.Action,System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread and waits for the work item to be executed.
            </summary>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItemAndWait(System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread and waits for the work item to be executed.
            </summary>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="state">An object containing state to pass to the work item.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItemAndWait``1(System.Func{``0},System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread and waits for the work item to be executed.
            </summary>
            <typeparam name="T">The type of value returned by the work item.</typeparam>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
            <returns>The result of executing the work item.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItemAndWait``1(System.Func{System.Object,``0},System.Object,System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread and waits for the work item to be executed.
            </summary>
            <typeparam name="T">The type of value returned by the work item.</typeparam>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="state">An object containing state to pass to the work item.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
            <returns>The result of executing the work item.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItem(System.Action,System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread.
            </summary>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that encapsulates the work item.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItem(System.Action{System.Object},System.Object,System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread.
            </summary>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="state">An object containing state to pass to the work item.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that encapsulates the work item.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItem``1(System.Func{``0},System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread.
            </summary>
            <typeparam name="T">The type of value returned by the work item.</typeparam>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that encapsulates the work item.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItem``1(System.Func{System.Object,``0},System.Object,System.Boolean)">
            <summary>
            Queues a work item for execution on Ultraviolet's main thread.
            </summary>
            <typeparam name="T">The type of value returned by the work item.</typeparam>
            <param name="workItem">The work item to execute on Ultraviolet's main thread.</param>
            <param name="state">An object containing state to pass to the work item.</param>
            <param name="forceAsync">A value indicating whether to force the work item to be queued and executed asynchronously.
            If this value is <c>false</c>, then calls to this method from the main Ultraviolet thread will execute synchronously.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that encapsulates the work item.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.ValidateResource(TwistedLogik.Ultraviolet.UltravioletResource)">
            <summary>
            Ensures that the specified resource was created by this context.
            This method is compiled out if the <c>DEBUG</c> compilation symbol is not specified.
            </summary>
            <param name="resource">The <see cref="T:TwistedLogik.Ultraviolet.UltravioletResource"/> to validate.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.Platform">
            <summary>
            Gets the platform on which this context is running.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.Host">
            <summary>
            Gets the object that is hosting the Ultraviolet context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.Messages">
            <summary>
            Gets the context's message queue.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.IsHardwareInputDisabled">
            <summary>
            Gets or sets a value indicating whether the context is currently processing messages
            from the physical input devices.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.IsRunningInServiceMode">
            <summary>
            Gets a value indicating whether the context is running in service mode.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.IsExecutingOnCurrentThread">
            <summary>
            Gets a value indicating whether the current thread is the thread which
            created the Ultraviolet context.
            </summary>
            <remarks>Many tasks, such as content loading, must take place on the Ultraviolet
            context's main thread.  Such tasks can be queued using the <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.QueueWorkItem(System.Action,System.Boolean)"/> method
            or one of its overloads, which will run the task at the start of the next update.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.IsInitialized">
            <summary>
            Gets a value indicating whether the context has been initialized.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.Disposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.ContextInvalidated">
            <summary>
            Occurs when the current context is invalidated.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.ContextInitialized">
            <summary>
            Occurs when the current context is initialized.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.FrameStart">
            <summary>
            Occurs when a new frame is started.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.FrameEnd">
            <summary>
            Occurs when a frame is completed.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.Drawing">
            <summary>
            Occurs when the context is preparing to draw the current scene. This event is called
            before the context associates itself to any windows.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.WindowDrawing">
            <summary>
            Occurs when the context is preparing to draw a particular window.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.WindowDrawn">
            <summary>
            Occurs after the context has drawn a particular window.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.UpdatingSubsystems">
            <summary>
            Occurs when the context is about to update the state of its subsystems.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.Updating">
            <summary>
            Occurs when the context is updating the application's state.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.Initialized">
            <summary>
            Occurs when the context is initialized.
            </summary>
        </member>
        <member name="E:TwistedLogik.Ultraviolet.UltravioletContext.Shutdown">
            <summary>
            Occurs when the Ultraviolet context is being shut down.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.EnsureSuccessfulCreation(System.Func{TwistedLogik.Ultraviolet.UltravioletContext})">
            <summary>
            Ensures that the specified function produces a valid instance of <see cref="T:TwistedLogik.Ultraviolet.UltravioletContext"/>. If it does not,
            then the current context is immediately disposed.
            </summary>
            <param name="fn">The function which will create the Ultraviolet context.</param>
            <returns>The Ultraviolet context that was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.RequestCurrent">
            <summary>
            Retrieves the current Ultraviolet context, throwing an exception if it does not exist.
            </summary>
            <returns>The current Ultraviolet context, or <c>null</c> if no contex exists.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.DemandCurrent">
            <summary>
            Retrieves the current Ultraviolet context, throwing an exception if it does not exist.
            </summary>
            <returns>The current Ultraviolet context.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.ProcessWorkItemsInternal">
            <summary>
            Processes all queued work items.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.AcquireContext">
            <summary>
            Acquires an exclusive context claim, preventing other instances from being instantiated.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.ReleaseContext">
            <summary>
            Releases the current exclusive context claim.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.InitializeContext">
            <summary>
            Initializes the context and marks it ready for use.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.InitializeFactoryMethodsInAssembly(System.Reflection.Assembly)">
            <summary>
            Initializes any factory methods that are exposed by the specified assembly.
            </summary>
            <param name="asm">The assembly for which to initialize factory methods.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.InitializeViewProvider(TwistedLogik.Ultraviolet.UltravioletConfiguration)">
            <summary>
            Initializes the context's view provider.
            </summary>
            <param name="configuration">The Ultraviolet Framework configuration settings for this context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.UpdateContext(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the context's state.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnFrameStart">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.FrameStart"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnFrameEnd">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.FrameEnd"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnDrawing(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.Drawing"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnWindowDrawing(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.WindowDrawing"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="window">The window that is about to be drawn.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnWindowDrawn(TwistedLogik.Ultraviolet.UltravioletTime,TwistedLogik.Ultraviolet.Platform.IUltravioletWindow)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.WindowDrawn"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
            <param name="window">The window that was just drawn.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnUpdatingSubsystems(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.UpdatingSubsystems"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnUpdating(TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.Updating"/> event.
            </summary>
            <param name="time">Time elapsed since the last call to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnReceivedMessage(TwistedLogik.Ultraviolet.UltravioletMessageID,TwistedLogik.Nucleus.Messages.MessageData)">
            <summary>
            Occurs when the context receives a message from its queue.
            </summary>
            <param name="type">The message type.</param>
            <param name="data">The message data.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnInitialized">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.Initialized"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnShutdown">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.Shutdown"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.ProcessMessages">
            <summary>
            Processes the context's message queue.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletContext.Factory">
            <summary>
            Gets the context's object factory.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnContextInitialized">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.ContextInitialized"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.OnContextInvalidated">
            <summary>
            Raises the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.ContextInvalidated"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.InitializeFactory(TwistedLogik.Ultraviolet.UltravioletConfiguration)">
            <summary>
            Initializes the context's object factory.
            </summary>
            <param name="configuration">The Ultraviolet Framework configuration settings for this context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.InitializeFactoryMethodsInCompatibilityShim">
            <summary>
            Initializes any factory methods exposed by the current platform compatibility shim.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.InitializeFactoryMethodsInViewProvider(TwistedLogik.Ultraviolet.UltravioletConfiguration)">
            <summary>
            Initializes any factory methods exposed by the registered view provider.
            </summary>
            <param name="configuration">The Ultraviolet Framework configuration settings for this context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.UpdateTasks">
            <summary>
            Updates the context's list of tasks.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletContext.DetectPlatform">
            <summary>
            Detects the platform on which the context is running.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletDebugUtil">
            <summary>
            Contains useful debugging methods.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletDebugUtil.GetOriginalContentFilePath(System.String,System.String)">
            <summary>
            Evaluates whether the specified path is beneath the specified root content directory, and if so, attempts to
            determine the path of the project file which produced it. 
            </summary>
            <param name="root">The root content directory.</param>
            <param name="path">The path for which to find the original content path.</param>
            <returns>The original content path, if it was found; otherwise, <paramref name="path"/>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletDebugUtil.WasCompiledAsDebug">
            <summary>
            Gets a value indicating whether the Ultraviolet core assembly was compiled in Debug mode.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletDebugUtil.WasCompiledAsRelease">
            <summary>
            Gets a value indicating whether the Ultraviolet core assembly was compiled in Release mode.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletDebugUtil.GetDirectoryUri(System.String)">
            <summary>
            Gets a URI which represents the absolute specified directory path.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletFactory">
            <summary>
            Represents an Ultraviolet context's object factory.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.TryGetFactoryMethod``1">
            <summary>
            Attempts to retrieve the default factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <returns>The default factory method of the specified type, or <c>null</c> if no such factory method is registered..</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.TryGetFactoryMethod``1(System.String)">
            <summary>
            Attempts to retrieve a named factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <param name="name">The name of the factory method to retrieve.</param>
            <returns>The specified named factory method, or <c>null</c> if no such factory method is registered.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.GetFactoryMethod``1">
            <summary>
            Gets the default factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <returns>The default factory method of the specified type.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.GetFactoryMethod``1(System.String)">
            <summary>
            Gets a named factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to retrieve.</typeparam>
            <param name="name">The name of the factory method to retrieve.</param>
            <returns>The specified named factory method.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.SetFactoryMethod``1(``0)">
            <summary>
            Registers the default factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to register.</typeparam>
            <param name="factory">A delegate representing the factory method to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.SetFactoryMethod``1(System.String,``0)">
            <summary>
            Registers a named factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to register.</typeparam>
            <param name="name">The name of the factory method to register.</param>
            <param name="factory">A delegate representing the factory method to register.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.RemoveFactoryMethod``1">
            <summary>
            Unregisters the default factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to remove.</typeparam>
            <returns><c>true</c> if the factory method was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactory.RemoveFactoryMethod``1(System.String)">
            <summary>
            Unregisters a named factory method of the specified delegate type.
            </summary>
            <typeparam name="T">The delegate type of the factory method to remove.</typeparam>
            <param name="name">The name of the factory method to unregister.</param>
            <returns><c>true</c> if the factory method was unregistered; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletFactoryInitializer">
            <summary>
            Initializes factory methods for the Framework core.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletFactoryInitializer.Initialize(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.UltravioletFactory)">
            <summary>
            Initializes the specified factory.
            </summary>
            <param name="owner">The Ultraviolet context that owns the initializer.</param>
            <param name="factory">The <see cref="T:TwistedLogik.Ultraviolet.UltravioletFactory"/> to initialize.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletHostCore">
            <summary>
            Contains core functionality for Ultraviolet host processes.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletHostCore.#ctor(TwistedLogik.Ultraviolet.IUltravioletHost)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletHostCore"/> class.
            </summary>
            <param name="host">The Ultraviolet host.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletHostCore.ResetElapsed">
            <summary>
            Resets the timers used to determine how much time has passed since the last calls
            to <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/> and <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletHostCore.RunOneTickSuspended">
            <summary>
            Advances the application state by one tick when the application is in a suspended state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletHostCore.RunOneTick">
            <summary>
            Advances the application state by one tick.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletHostCore.DefaultTargetElapsedTime">
            <summary>
            Gets the default value for TargetElapsedTime.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletHostCore.DefaultInactiveSleepTime">
            <summary>
            Gets the default value for InactiveSleepTime.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletHostCore.DefaultIsFixedTimeStep">
            <summary>
            Gets the default value for IsFixedTimeStep.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletHostCore.Ultraviolet">
            <summary>
            Gets the Ultraviolet context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletHostCore.TargetElapsedTime">
            <summary>
            Gets or sets the target time between frames when the application is running on a fixed time step.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletHostCore.InactiveSleepTime">
            <summary>
            Gets or sets the amount of time to sleep every frame when
            the application's primary window is inactive.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletHostCore.IsFixedTimeStep">
            <summary>
            Gets or sets a value indicating whether the application is running on a fixed time step.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletHostCore.UpdateContext(TwistedLogik.Ultraviolet.UltravioletContext,TwistedLogik.Ultraviolet.UltravioletTime)">
            <summary>
            Updates the specified context.
            </summary>
            <param name="uv">The Ultraviolet context to update.</param>
            <param name="time">Time elapsed since the last update.</param>
            <returns><c>true</c> if the host should continue processing; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletMessageID">
            <summary>
            Represents an identifier for a message send through the Ultraviolet context's message queue. 
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletMessageID"/> structure.
            </summary>
            <param name="name">The message type's name.</param>
            <param name="value">The message's identifier value.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.op_Equality(TwistedLogik.Ultraviolet.UltravioletMessageID,TwistedLogik.Ultraviolet.UltravioletMessageID)">
            <summary>
            Compares two Ultraviolet message identifiers for equality.
            </summary>
            <param name="id1">The first <see cref="T:TwistedLogik.Ultraviolet.UltravioletMessageID"/>.</param>
            <param name="id2">The second <see cref="T:TwistedLogik.Ultraviolet.UltravioletMessageID"/>.</param>
            <returns><c>true</c> if the specified identifiers are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.op_Inequality(TwistedLogik.Ultraviolet.UltravioletMessageID,TwistedLogik.Ultraviolet.UltravioletMessageID)">
            <summary>
            Compares two Ultraviolet message identifiers for inequality.
            </summary>
            <param name="id1">The first <see cref="T:TwistedLogik.Ultraviolet.UltravioletMessageID"/>.</param>
            <param name="id2">The second <see cref="T:TwistedLogik.Ultraviolet.UltravioletMessageID"/>.</param>
            <returns><c>true</c> if the specified identifiers are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.Acquire(System.String)">
            <summary>
            Acquires an unused message identifier.
            </summary>
            <param name="name">The message type's name.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.UltravioletMessageID"/> that was acquired.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletMessageID.Equals(TwistedLogik.Ultraviolet.UltravioletMessageID)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletMessageID.Value">
            <summary>
            Gets the message identifier's underlying value.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletMessages">
            <summary>
            Represents the standard set of Ultraviolet Framework events.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletMessages.Quit">
            <summary>
            An event indicating that the application should exit.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletMessages.OrientationChanged">
            <summary>
            An event indicating that the screen orientation has changed.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletMessages.ApplicationSuspended">
            <summary>
            An event indicating that the application was suspended.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletMessages.ApplicationResumed">
            <summary>
            An event indicating that the application was resumed after being suspended.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1">
            <summary>
            Represents an enumerable collection of named objects.
            </summary>
            <typeparam name="T">The type of item stored in the collection.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1"/> class.
            </summary>
            <param name="capacity">The collection's initial capacity.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.Item(System.String)">
            <summary>
            Gets the item with the specified name.
            </summary>
            <param name="name">The name of the item to retrieve.</param>
            <returns>The item with the specified name, or a default value if the item does not exist.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1"/>.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.Values">
            <summary>
            Gets a collection containing the values in the <see cref="T:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1"/>.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.GetName(`0)">
            <summary>
            Gets the specified item's name.
            </summary>
            <param name="item">The item for which to retrieve a name.</param>
            <returns>The specified item's name.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.ClearInternal">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.AddInternal(`0)">
            <summary>
            Adds an item to the collection.
            </summary>
            <param name="item">The item to add to the collection.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.RemoveInternal(`0)">
            <summary>
            Removes an item from the collection.
            </summary>
            <param name="item">The item to remove from the collection.</param>
            <returns><c>true</c> if the item was removed from the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.ContainsInternal(`0)">
            <summary>
            Gets a value indicating whether the collection contains the specified item.
            </summary>
            <param name="item">The item to evaluate.</param>
            <returns><c>true</c> if the collection contains the specified item; otherwise, <c>false</c>.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletNamedCollection`1.StorageByName">
            <summary>
            Gets the underlying dictionary which associates names with their collection items.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletPlatform">
            <summary>
            Represents the platforms on which an Ultraviolet application can run.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletPlatform.Windows">
            <summary>
            Dekstop Windows.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletPlatform.Linux">
            <summary>
            Desktop Linux.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletPlatform.Android">
            <summary>
            Mobile Android.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletPlatform.OSX">
            <summary>
            Mac OS X.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletProfiler">
            <summary>
            Contains methods for profiling Ultraviolet applications.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.Section(System.String)">
            <summary>
            Creates an <see cref="T:TwistedLogik.Ultraviolet.UltravioletProfilerSection"/> object which represents a profiler section
            and immediately begins that section.
            </summary>
            <param name="name">The name of the profiler section.</param>
            <returns>The <see cref="T:TwistedLogik.Ultraviolet.UltravioletProfilerSection"/> object which was created.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.TakeSnapshotOfNextFrame">
            <summary>
            Requests that the profiler take a snapshot that contains the entirety of the next frame.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.BeginSection(System.String)">
            <summary>
            Begins a profiler section.
            </summary>
            <param name="name">The name of the section to begin.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.EndSection(System.String)">
            <summary>
            Ends a profiler section.
            </summary>
            <param name="name">The name of the section to begin.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.BeginSnapshot">
            <summary>
            Begins a profiler snapshot.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.EndSnapshot">
            <summary>
            Ends the current profiler snapshot.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.EnableSection(System.String)">
            <summary>
            Enables a profiler section.
            </summary>
            <param name="name">The name of the section to enable.</param>
            <remarks>Only enabled sections will be included in profiler snapshots.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfiler.DisableSection(System.String)">
            <summary>
            Disables a profiler section.
            </summary>
            <param name="name">The name of the section to enable.</param>
            <remarks>Only enabled sections will be included in profiler snapshots.</remarks>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletProfiler.instance">
            <summary>
            Represents the singleton profiler instance used by the current context.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletProfilerFactory">
            <summary>
            Represents a factory method which constructs instances of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletProfilerBase"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
            <returns>The instance of <see cref="T:TwistedLogik.Ultraviolet.UltravioletProfilerBase"/> that was created.</returns>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletProfilerBase">
            <summary>
            Represents the base class for Ultraviolet profilers.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletProfilerBase"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.TakeSnapshotOfNextFrame">
            <summary>
            Requests that the profiler take a snapshot that contains the entirety of the next frame.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.BeginSection(System.String)">
            <summary>
            Begins a profiler section.
            </summary>
            <param name="name">The name of the section to begin.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.EndSection(System.String)">
            <summary>
            Ends a profiler section.
            </summary>
            <param name="name">The name of the section to begin.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.BeginSnapshot">
            <summary>
            Begins a profiler snapshot.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.EndSnapshot">
            <summary>
            Ends the current profiler snapshot.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.EnableSection(System.String)">
            <summary>
            Enables a profiler section.
            </summary>
            <param name="name">The name of the section to enable.</param>
            <remarks>Only enabled sections will be included in profiler snapshots.</remarks>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerBase.DisableSection(System.String)">
            <summary>
            Disables a profiler section.
            </summary>
            <param name="name">The name of the section to enable.</param>
            <remarks>Only enabled sections will be included in profiler snapshots.</remarks>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletProfilerBase.IsTakingSnapshot">
            <summary>
            Gets a value indicating whether the profiler is currently taking a snapshot.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletProfilerBase.IsTakingSnapshotNextFrame">
            <summary>
            Gets a value indicating whether the profiler is going to take a snapshot of the next frame.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletProfilerSection">
            <summary>
            Represents a section of code which is being measured by a profiler.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerSection.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletProfilerSection"/> structure.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletProfilerSection.Dispose">
            <summary>
            Releases resources associated with the object.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletProfilerSection.Name">
            <summary>
            Gets the name of the profiler section.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletProfilerSections">
            <summary>
            Contains identifiers for the Ultraviolet Framework's profiler sections.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletProfilerSections.Frame">
            <summary>
            Identifies the profiler section that starts at the beginning of a frame and ends at the end of a frame.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletProfilerSections.Draw">
            <summary>
            Identifies the profiler section that starts at the beginning of <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Draw(TwistedLogik.Ultraviolet.UltravioletTime)"/> and
            ends and the end of that method.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletProfilerSections.Update">
            <summary>
            Identifies the profiler section that starts at the beginning of <see cref="M:TwistedLogik.Ultraviolet.UltravioletContext.Update(TwistedLogik.Ultraviolet.UltravioletTime)"/> and
            ends and the end of that method.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletResource">
            <summary>
            Represents an object which encapsulates some native or implementation-specific resource.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletResource.#ctor(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletResource"/> class.
            </summary>
            <param name="uv">The Ultraviolet context.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletResource.Dispose">
            <summary>
            Releases resources associated with the object.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletResource.Ultraviolet">
            <summary>
            Gets the Ultraviolet context.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletResource.Disposed">
            <summary>
            Gets a value indicating whether the object has been disposed.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletResource.Dispose(System.Boolean)">
            <summary>
            Releases resources associated with the object.
            </summary>
            <param name="disposing"><c>true</c> if the object is being disposed; <c>false</c> if the object is being finalized.</param>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletSingleton`1">
            <summary>
            Represents a singleton resource.  Only one instance of the resource will be created
            during the lifespan of a particular Ultraviolet context, but the resource will be destroyed
            and recreated if a new context is introduced.
            </summary>
            <typeparam name="T">The type of object which is owned by the singleton.</typeparam>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletSingleton`1.#ctor(System.Func{TwistedLogik.Ultraviolet.UltravioletContext,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletSingleton`1"/> class.
            </summary>
            <param name="initializer">A function which initializes a new instance of the bound resource.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletSingleton`1.#ctor(TwistedLogik.Ultraviolet.UltravioletSingletonFlags,System.Func{TwistedLogik.Ultraviolet.UltravioletContext,`0})">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletSingleton`1"/> class.
            </summary>
            <param name="flags">A set of flags which modify the singleton's behavior.</param>
            <param name="initializer">A function which initializes a new instance of the bound resource.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletSingleton`1.op_Implicit(TwistedLogik.Ultraviolet.UltravioletSingleton{`0})~`0">
            <summary>
            Implicitly converts a bound resource to its underlying resource object.
            </summary>
            <param name="resource">The bound resource to convert.</param>
            <returns>The converted resource.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletSingleton`1.Flags">
            <summary>
            Gets the singleton's flags.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletSingleton`1.Value">
            <summary>
            Gets the bound resource.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletSingleton`1.ShouldInitializeResource(TwistedLogik.Ultraviolet.UltravioletContext)">
            <summary>
            Gets a value indicating whether the singleton should be initialized for the
            specified Ultraviolet context.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletSingleton`1.InitializeResource">
            <summary>
            Initializes the singleton resource.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletSingleton`1.UltravioletContext_ContextInitialized(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.ContextInitialized"/> event.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletSingleton`1.UltravioletContext_ContextInvalidated(System.Object,System.EventArgs)">
            <summary>
            Handles the <see cref="E:TwistedLogik.Ultraviolet.UltravioletContext.ContextInvalidated"/> event.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletSingletonFlags">
            <summary>
            Represents a collection of flags which modify the behavior of an instance of
            the <see cref="T:TwistedLogik.Ultraviolet.UltravioletSingleton`1"/> class.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletSingletonFlags.None">
            <summary>
            No flags.
            </summary>
        </member>
        <member name="F:TwistedLogik.Ultraviolet.UltravioletSingletonFlags.DisabledInServiceMode">
            <summary>
            The singleton is disabled when the context is in service mode.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletStrings">
            <summary>
            Contains Ultraviolet's string resources.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletStrings.#cctor">
            <summary>
            Initializes the <see cref="T:TwistedLogik.Ultraviolet.UltravioletStrings"/> type.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletTime">
            <summary>
            Represents the application's timing state.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletTime.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletTime"/> class.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletTime.#ctor(System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.UltravioletTime"/> class with the specified elapsed and total times.
            </summary>
            <param name="elapsedTime">The time that has elapsed since the last update.</param>
            <param name="totalTime">The total time that has elapsed since the Ultraviolet context was created.</param>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletTime.ElapsedTime">
            <summary>
            The time that has elapsed since the last update.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletTime.TotalTime">
            <summary>
            The total time that has elapsed since the Ultraviolet context was created.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletTime.IsRunningSlowly">
            <summary>
            Gets a value indicating whether the application's main loop is taking longer than its target time.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.UltravioletTimeTracker">
            <summary>
            Contains methods for tracking the amount of time that has passed since an Ultraviolet context was created.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletTimeTracker.Reset">
            <summary>
            Resets the time.
            </summary>
            <returns>The Ultraviolet time value after the reset has been applied.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.UltravioletTimeTracker.Increment(System.TimeSpan,System.Boolean)">
            <summary>
            Increments the time.
            </summary>
            <param name="ts">The amount by which to increment the time.</param>
            <param name="isRunningSlowly">A value indicating whether the application's main loop is taking longer than its target time.</param>
            <returns>The Ultraviolet time value after the increment has been applied.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.UltravioletTimeTracker.Time">
            <summary>
            Gets the current Ultraviolet time value.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Vector2">
            <summary>
            Represents a two-dimensional vector.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure with all of its components set to the specified value.
            </summary>
            <param name="value">The value to which to set the vector's components.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure with the specified x and y components.
            </summary>
            <param name="x">The vector's x component.</param>
            <param name="y">The vector's y component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Equality(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to compare.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to compare.</param>
            <returns><c>true</c> if the specified vectors are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Inequality(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Compares two vectors for inequality.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to compare.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to compare.</param>
            <returns><c>true</c> if the specified vectors are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Addition(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the addition operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Subtraction(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the subtraction operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Multiply(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the multiplication operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Multiply(System.Single,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Multiply(TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Division(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the division operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Division(TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_UnaryNegation(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Reverses the signs of a vector's components.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to reverse.</param>
            <returns>The reversed <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Explicit(TwistedLogik.Ultraviolet.Vector2)~TwistedLogik.Ultraviolet.Point2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure.
            </summary>
            <param name="vector">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Explicit(TwistedLogik.Ultraviolet.Vector2)~TwistedLogik.Ultraviolet.Point2F">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure.
            </summary>
            <param name="vector">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Explicit(TwistedLogik.Ultraviolet.Vector2)~TwistedLogik.Ultraviolet.Point2D">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure.
            </summary>
            <param name="vector">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Explicit(TwistedLogik.Ultraviolet.Point2)~TwistedLogik.Ultraviolet.Vector2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Explicit(TwistedLogik.Ultraviolet.Point2F)~TwistedLogik.Ultraviolet.Vector2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2F"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.op_Explicit(TwistedLogik.Ultraviolet.Point2D)~TwistedLogik.Ultraviolet.Vector2">
            <summary>
            Explicitly converts a <see cref="T:TwistedLogik.Ultraviolet.Point2D"/> structure to a <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure.
            </summary>
            <param name="point">The structure to convert.</param>
            <returns>The converted structure.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.TryParse(System.String,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="vector">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Parse(System.String)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure equivalent to the vector contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="vector">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> structure equivalent to the vector contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Dot(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <returns>The dot product of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Dot(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="result">The dot product of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Add(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the addition operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Add(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the addition operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the addition operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Subtract(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the subtraction operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Subtract(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the subtraction operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the subtraction operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Multiply(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the multiplication operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Multiply(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the multiplication operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Multiply(TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Multiply(TwistedLogik.Ultraviolet.Vector2@,System.Single,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Divide(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the division operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Divide(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to the right of the division operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Divide(TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Divide(TwistedLogik.Ultraviolet.Vector2@,System.Single,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Transform(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms a vector by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <returns>The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Transform(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Transforms a vector by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <param name="result">The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.TransformNormal(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <returns>The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.TransformNormal(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <param name="result">The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Normalize(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to normalize.</param>
            <returns>The normalized <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Normalize(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to normalize.</param>
            <param name="result">The normalized <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Negate(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to negate.</param>
            <returns>The negated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Negate(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to negate.</param>
            <param name="result">The negated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Clamp(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Clamps a vector to the specified range.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Clamp(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Clamps a vector to the specified range.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">The clamped <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Min(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Returns a vector which contains the lowest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> which contains the lowest value of each component of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Min(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Returns a vector which contains the lowest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> which contains the lowest value of each component of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Max(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Returns a vector which contains the highest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> which contains the highest value of each component of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Max(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Returns a vector which contains the highest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> which contains the highest value of each component of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Reflect(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Reflects the specified vector off of a surface with the specified normal.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to reflect.</param>
            <param name="normal">The normal vector of the surface over which to reflect the vector.</param>
            <returns>The reflected <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Reflect(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Reflects the specified vector off of a surface with the specified normal.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> to reflect.</param>
            <param name="normal">The normal vector of the surface over which to reflect the vector.</param>
            <param name="result">The reflected <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Lerp(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Performs a linear interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Lerp(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Performs a linear interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Hermite(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Performs a cubic Hermite spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="vector2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Hermite(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Performs a cubic Hermite spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="vector2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.SmoothStep(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Performs a smooth step interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.SmoothStep(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Performs a smooth step interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.CatmullRom(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Performs a Catmull-Rom spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="vector3">The third vector.</param>
            <param name="vector4">The fourth vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.CatmullRom(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Performs a Catmull-Rom spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="vector3">The third vector.</param>
            <param name="vector4">The fourth vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector2"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Distance(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Calculates the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <returns>The distance between the specified coordinates.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Distance(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single@)">
            <summary>
            Calculates the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <param name="result">The distance between the specified coordinates.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.DistanceSquared(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Calculates the square of the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <returns>The square of the distance between the specified coordinates.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.DistanceSquared(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single@)">
            <summary>
            Calculates the square of the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <param name="result">The square of the distance between the specified coordinates.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Barycentric(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single)">
            <summary>
            Computes the Cartesian coordinates of a point specified in areal Barycentric coordinates relative to a triangle.
            </summary>
            <param name="v1">The first vertex of the triangle.</param>
            <param name="v2">The second vertex of the triangle.</param>
            <param name="v3">The third vertex of the triangle.</param>
            <param name="b2">Barycentric coordinate b2, which expresses the weighting factor towards the second triangle vertex.</param>
            <param name="b3">Barycentric coordinate b3, which expresses the weighting factor towards the third triangle vertex.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> containing the Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Barycentric(TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,TwistedLogik.Ultraviolet.Vector2@,System.Single,System.Single,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>
            Computes the Cartesian coordinates of a point specified in areal Barycentric coordinates relative to a triangle.
            </summary>
            <param name="v1">The first vertex of the triangle.</param>
            <param name="v2">The second vertex of the triangle.</param>
            <param name="v3">The third vertex of the triangle.</param>
            <param name="b2">Barycentric coordinate b2, which expresses the weighting factor towards the second triangle vertex.</param>
            <param name="b3">Barycentric coordinate b3, which expresses the weighting factor towards the third triangle vertex.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> containing the Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Equals(TwistedLogik.Ultraviolet.Vector2)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector2.Interpolate(TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector2.Zero">
            <summary>
            Gets a vector with both components set to zero.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector2.One">
            <summary>
            Gets a vector with both components set to one.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector2.UnitX">
            <summary>
            Returns the unit vector for the x-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector2.UnitY">
            <summary>
            Returns the unit vector for the y-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector2.X">
            <summary>
            Gets the vector's x-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector2.Y">
            <summary>
            Gets the vector's y-coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Vector3">
            <summary>
            Represents a three-dimensional vector.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure with all of its components set to the specified value.
            </summary>
            <param name="value">The value to which to set the vector's components.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure with the specified x, y, and z component.
            </summary>
            <param name="x">The vector's x component.</param>
            <param name="y">The vector's y component.</param>
            <param name="z">The vector's z component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.#ctor(TwistedLogik.Ultraviolet.Vector2,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure with its x and y components set to the 
            x and y components of the specified vector, and its z component set to the specified value.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector2"/> from which to set the vector's x and y components.</param>
            <param name="z">The vector's z component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Equality(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to compare.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to compare.</param>
            <returns><c>true</c> if the specified vectors are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Inequality(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Compares two vectors for inequality.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to compare.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to compare.</param>
            <returns><c>true</c> if the specified vectors are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Addition(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the addition operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Subtraction(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the subtraction operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Multiply(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the multiplication operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Multiply(System.Single,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Multiply(TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Division(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the division operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_Division(TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.op_UnaryNegation(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Reverses the signs of a vector's components.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to reverse.</param>
            <returns>The reversed <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.TryParse(System.String,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="vector">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Parse(System.String)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure equivalent to the vector contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="vector">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> structure equivalent to the vector contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Cross(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <returns>The cross product of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Cross(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="result">The cross product of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Dot(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <returns>The dot product of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Dot(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="result">The dot product of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Add(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the addition operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Add(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the addition operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the addition operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Subtract(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Subtract(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the subtraction operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Multiply(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the multiplication operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Multiply(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the multiplication operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Multiply(TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Multiply(TwistedLogik.Ultraviolet.Vector3@,System.Single,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Divide(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the division operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Divide(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to the right of the division operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Divide(TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Divide(TwistedLogik.Ultraviolet.Vector3@,System.Single,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Transform(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms a vector by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <returns>The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Transform(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Transforms a vector by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <param name="result">The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.TransformNormal(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <returns>The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.TransformNormal(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Transforms a vector normal by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <param name="result">The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Normalize(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to normalize.</param>
            <returns>The normalized <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Normalize(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to normalize.</param>
            <param name="result">The normalized <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Negate(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to negate.</param>
            <returns>The negated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Negate(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to negate.</param>
            <param name="result">The negated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Clamp(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Clamps a vector to the specified range.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Clamp(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Clamps a vector to the specified range.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">The clamped <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Min(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Returns a vector which contains the lowest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> which contains the lowest value of each component of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Min(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Returns a vector which contains the lowest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> which contains the lowest value of each component of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Max(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Returns a vector which contains the highest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> which contains the highest value of each component of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Max(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Returns a vector which contains the highest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> which contains the highest value of each component of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Reflect(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Reflects the specified vector off of a surface with the specified normal.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to reflect.</param>
            <param name="normal">The normal vector of the surface over which to reflect the vector.</param>
            <returns>The reflected <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Reflect(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Reflects the specified vector off of a surface with the specified normal.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> to reflect.</param>
            <param name="normal">The normal vector of the surface over which to reflect the vector.</param>
            <param name="result">The reflected <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Lerp(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Performs a linear interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Lerp(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Performs a linear interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Hermite(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Performs a cubic Hermite spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="vector2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Hermite(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Performs a cubic Hermite spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="vector2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated vector.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.SmoothStep(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Performs a smooth step interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.SmoothStep(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Performs a smooth step interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.CatmullRom(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Performs a Catmull-Rom spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="vector3">The third vector.</param>
            <param name="vector4">The fourth vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.CatmullRom(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Performs a Catmull-Rom spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="vector3">The third vector.</param>
            <param name="vector4">The fourth vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector3"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Distance(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Calculates the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <returns>The distance between the specified coordinates.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Distance(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single@)">
            <summary>
            Calculates the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <param name="result">The distance between the specified coordinates.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.DistanceSquared(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Calculates the square of the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <returns>The square of the distance between the specified coordinates.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.DistanceSquared(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single@)">
            <summary>
            Calculates the square of the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <param name="result">The square of the distance between the specified coordinates.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Barycentric(TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,TwistedLogik.Ultraviolet.Vector3,System.Single,System.Single)">
            <summary>
            Computes the Cartesian coordinates of a point specified in areal Barycentric coordinates relative to a triangle.
            </summary>
            <param name="v1">The first vertex of the triangle.</param>
            <param name="v2">The second vertex of the triangle.</param>
            <param name="v3">The third vertex of the triangle.</param>
            <param name="b2">Barycentric coordinate b2, which expresses the weighting factor towards the second triangle vertex.</param>
            <param name="b3">Barycentric coordinate b3, which expresses the weighting factor towards the third triangle vertex.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> containing the Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Barycentric(TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,TwistedLogik.Ultraviolet.Vector3@,System.Single,System.Single,TwistedLogik.Ultraviolet.Vector3@)">
            <summary>
            Computes the Cartesian coordinates of a point specified in areal Barycentric coordinates relative to a triangle.
            </summary>
            <param name="v1">The first vertex of the triangle.</param>
            <param name="v2">The second vertex of the triangle.</param>
            <param name="v3">The third vertex of the triangle.</param>
            <param name="b2">Barycentric coordinate b2, which expresses the weighting factor towards the second triangle vertex.</param>
            <param name="b3">Barycentric coordinate b3, which expresses the weighting factor towards the third triangle vertex.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector3"/> containing the Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Equals(TwistedLogik.Ultraviolet.Vector3)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector3.Interpolate(TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Zero">
            <summary>
            Gets a vector with all three components set to zero.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.One">
            <summary>
            Gets a vector with all three components set to one.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.UnitX">
            <summary>
            Returns the unit vector for the x-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.UnitY">
            <summary>
            Returns the unit vector for the y-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.UnitZ">
            <summary>
            Returns the unit vector for the z-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Right">
            <summary>
            Returns a unit vector representing right in a right-handed coordinate system.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Left">
            <summary>
            Returns a unit vector representing left in a right-handed coordinate system.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Up">
            <summary>
            Returns a unit vector representing up in a right-handed coordinate system.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Down">
            <summary>
            Returns a unit vector representing down in a right-handed coordinate system.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Backward">
            <summary>
            Returns a unit vector representing backward in a right-handed coordinate system.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Forward">
            <summary>
            Returns a unit vector representing forward in a right-handed coordinate system.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.X">
            <summary>
            Gets the vector's x-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Y">
            <summary>
            Gets the vector's y-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector3.Z">
            <summary>
            Gets the vector's z-coordinate.
            </summary>
        </member>
        <member name="T:TwistedLogik.Ultraviolet.Vector4">
            <summary>
            Represents a four-dimensional vector.
            </summary>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure with all of its components set to the specified value.
            </summary>
            <param name="value">The value to which to set the vector's components.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the Vector4 structure with the specified x, y, z, and w components.
            </summary>
            <param name="x">The vector's x component.</param>
            <param name="y">The vector's y component.</param>
            <param name="z">The vector's z component.</param>
            <param name="w">The vector's w component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.#ctor(TwistedLogik.Ultraviolet.Vector2,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure with its x and y components set to the 
            x and y components of the specified vector, and its z and w components set to the specified values.
            </summary>
            <param name="vector">The vector from which to set the vector's x and y components.</param>
            <param name="z">The vector's z component.</param>
            <param name="w">The vector's w component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.#ctor(TwistedLogik.Ultraviolet.Vector3,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure with its x, y, and z components set to the 
            x, y, and z components of the specified vector, and its w component set to the specified values.
            </summary>
            <param name="vector">The vector from which to set the vector's x, y, and z components.</param>
            <param name="w">The vector's w component.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Equality(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Compares two vectors for equality.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to compare.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to compare.</param>
            <returns><c>true</c> if the specified vectors are equal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Inequality(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Compares two vectors for inequality.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to compare.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to compare.</param>
            <returns><c>true</c> if the specified vectors are unequal; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Addition(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the addition operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Subtraction(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the subtraction operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Multiply(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the multiplication operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Multiply(System.Single,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Multiply(TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Division(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the division operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_Division(TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.op_UnaryNegation(TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Reverses the signs of a vector's components.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to reverse.</param>
            <returns>The reversed <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.TryParse(System.String,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="vector">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Parse(System.String)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure equivalent to the vector contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure.
            A return value indicates whether the conversion succeeded.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <param name="vector">A variable to populate with the converted value.</param>
            <returns><c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a vector into an instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure.
            </summary>
            <param name="s">A string containing a vector to convert.</param>
            <param name="style">A set of <see cref="T:System.Globalization.NumberStyles"/> values indicating which elements are present in <paramref name="s"/>.</param>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A instance of the <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> structure equivalent to the vector contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Dot(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <returns>The dot product of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Dot(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="result">The dot product of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Add(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the addition operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the addition operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Add(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the addition operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the addition operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Subtract(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the subtraction operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Subtract(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Subtracts one vector from another vector.
            </summary>
            <param name="left">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the subtraction operator.</param>
            <param name="right">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the subtraction operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Multiply(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the multiplication operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Multiply(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Multiplies two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the multiplication operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the multiplication operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Multiply(TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Multiply(TwistedLogik.Ultraviolet.Vector4@,System.Single,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Multiplies a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to multiply.</param>
            <param name="factor">The scaling factor by which to multiply the vector.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Divide(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the division operator.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Divide(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Divides two vectors.
            </summary>
            <param name="vector1">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the left of the division operator.</param>
            <param name="vector2">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to the right of the division operator.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Divide(TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <returns>The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Divide(TwistedLogik.Ultraviolet.Vector4@,System.Single,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Divides a vector by a scaling factor.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to divide.</param>
            <param name="factor">The scaling factor by which to divide the vector.</param>
            <param name="result">The resulting <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Transform(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Matrix)">
            <summary>
            Transforms a vector by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <returns>The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Transform(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Matrix@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Transforms a vector by a matrix.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to transform.</param>
            <param name="matrix">The matrix by which to transform the vector.</param>
            <param name="result">The transformed <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Normalize(TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to normalize.</param>
            <returns>The normalized <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Normalize(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to normalize.</param>
            <param name="result">The normalized <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Negate(TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to negate.</param>
            <returns>The negated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Negate(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to negate.</param>
            <param name="result">The negated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Clamp(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Clamps a vector to the specified range.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Clamp(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Clamps a vector to the specified range.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <param name="result">The clamped <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Min(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Returns a vector which contains the lowest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> which contains the lowest value of each component of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Min(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Returns a vector which contains the lowest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> which contains the lowest value of each component of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Max(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Returns a vector which contains the highest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> which contains the highest value of each component of the specified vectors.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Max(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Returns a vector which contains the highest value of each component of the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> which contains the highest value of each component of the specified vectors.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Reflect(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Reflects the specified vector off of a surface with the specified normal.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to reflect.</param>
            <param name="normal">The normal vector of the surface over which to reflect the vector.</param>
            <returns>The reflected <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Reflect(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Reflects the specified vector off of a surface with the specified normal.
            </summary>
            <param name="vector">The <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> to reflect.</param>
            <param name="normal">The normal vector of the surface over which to reflect the vector.</param>
            <param name="result">The reflected <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Lerp(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Performs a linear interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Lerp(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Performs a linear interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="vector2">The second <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Hermite(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Performs a cubic Hermite spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="vector2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Hermite(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Performs a cubic Hermite spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first position vector.</param>
            <param name="tangent1">The first tangent vector.</param>
            <param name="vector2">The second position vector.</param>
            <param name="tangent2">The second tangent vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.SmoothStep(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Performs a smooth step interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.SmoothStep(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Performs a smooth step interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.CatmullRom(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Performs a Catmull-Rom spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="vector3">The third vector.</param>
            <param name="vector4">The fourth vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <returns>The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.CatmullRom(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Performs a Catmull-Rom spline interpolation between the specified vectors.
            </summary>
            <param name="vector1">The first vector.</param>
            <param name="vector2">The second vector.</param>
            <param name="vector3">The third vector.</param>
            <param name="vector4">The fourth vector.</param>
            <param name="amount">A value from 0.0 to 1.0 representing the interpolation factor.</param>
            <param name="result">The interpolated <see cref="T:TwistedLogik.Ultraviolet.Vector4"/>.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Distance(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Calculates the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <returns>The distance between the specified coordinates.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Distance(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single@)">
            <summary>
            Calculates the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <param name="result">The distance between the specified coordinates.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.DistanceSquared(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Calculates the square of the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <returns>The square of the distance between the specified coordinates.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.DistanceSquared(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single@)">
            <summary>
            Calculates square of the distance between two coordinates.
            </summary>
            <param name="vector1">The first coordinate.</param>
            <param name="vector2">The second coordinate.</param>
            <param name="result">The square of the distance between the specified coordinates.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Barycentric(TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,TwistedLogik.Ultraviolet.Vector4,System.Single,System.Single)">
            <summary>
            Computes the Cartesian coordinates of a point specified in areal Barycentric coordinates relative to a triangle.
            </summary>
            <param name="v1">The first vertex of the triangle.</param>
            <param name="v2">The second vertex of the triangle.</param>
            <param name="v3">The third vertex of the triangle.</param>
            <param name="b2">Barycentric coordinate b2, which expresses the weighting factor towards the second triangle vertex.</param>
            <param name="b3">Barycentric coordinate b3, which expresses the weighting factor towards the third triangle vertex.</param>
            <returns>A <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> containing the Cartesian coordinates of the specified point.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Barycentric(TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,TwistedLogik.Ultraviolet.Vector4@,System.Single,System.Single,TwistedLogik.Ultraviolet.Vector4@)">
            <summary>
            Computes the Cartesian coordinates of a point specified in areal Barycentric coordinates relative to a triangle.
            </summary>
            <param name="v1">The first vertex of the triangle.</param>
            <param name="v2">The second vertex of the triangle.</param>
            <param name="v3">The third vertex of the triangle.</param>
            <param name="b2">Barycentric coordinate b2, which expresses the weighting factor towards the second triangle vertex.</param>
            <param name="b3">Barycentric coordinate b3, which expresses the weighting factor towards the third triangle vertex.</param>
            <param name="result">A <see cref="T:TwistedLogik.Ultraviolet.Vector4"/> containing the Cartesian coordinates of the specified point.</param>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.GetHashCode">
            <summary>
            Gets the object's hash code.
            </summary>
            <returns>The object's hash code.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.ToString">
            <summary>
            Converts the object to a human-readable string.
            </summary>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.ToString(System.IFormatProvider)">
            <summary>
            Converts the object to a human-readable string using the specified culture information.
            </summary>
            <param name="provider">A format provider that provides culture-specific formatting information.</param>
            <returns>A human-readable string that represents the object.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Equals(System.Object)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Equals(TwistedLogik.Ultraviolet.Vector4)">
            <summary>
            Determines whether this instance is equal to the specified object.
            </summary>
            <param name="other">The object to compare to this instance.</param>
            <returns><c>true</c> if this instance is equal to the specified object; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Length">
            <summary>
            Calculates the length of the vector.
            </summary>
            <returns>The length of the vector.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the vector.
            </summary>
            <returns>The squared length of the vector.</returns>
        </member>
        <member name="M:TwistedLogik.Ultraviolet.Vector4.Interpolate(TwistedLogik.Ultraviolet.Vector4,System.Single)">
            <summary>
            Interpolates between this value and the specified value.
            </summary>
            <param name="target">The target value.</param>
            <param name="t">A value between 0.0 and 1.0 representing the interpolation factor.</param>
            <returns>The interpolated value.</returns>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.Zero">
            <summary>
            Gets a vector with all four components set to zero.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.One">
            <summary>
            Gets a vector with all four components set to one.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.UnitX">
            <summary>
            Returns the unit vector for the x-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.UnitY">
            <summary>
            Returns the unit vector for the y-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.UnitZ">
            <summary>
            Returns the unit vector for the z-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.UnitW">
            <summary>
            Returns the unit vector for the w-axis.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.X">
            <summary>
            Gets the vector's x-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.Y">
            <summary>
            Gets the vector's y-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.Z">
            <summary>
            Gets the vector's z-coordinate.
            </summary>
        </member>
        <member name="P:TwistedLogik.Ultraviolet.Vector4.W">
            <summary>
            Gets the vector's w-coordinate.
            </summary>
        </member>
        <member name="T:sspack.OutOfSpaceException">
            <summary>Insufficient space left in packing area to contain a given object</summary>
            <remarks>
              An exception being sent to you from deep space. Erm, no, wait, it's an exception
              that occurs when a packing algorithm runs out of space and is unable to fit
              the object you tried to pack into the remaining packing area.
            </remarks>
        </member>
        <member name="M:sspack.OutOfSpaceException.#ctor(System.String)">
            <summary>Initializes the exception with an error message</summary>
            <param name="message">Error message describing the cause of the exception</param>
        </member>
        <member name="T:sspack.ArevaloRectanglePacker">
            <summary>Rectangle packer using an algorithm by Javier Arevalo</summary>
            <remarks>
              <para>
                Original code by Javier Arevalo (jare at iguanademos dot com). Rewritten
                to C# / .NET by Markus Ewald (cygon at nuclex dot org). The following comments
                were written by the original author when he published his algorithm.
              </para>
              <para>
                You have a bunch of rectangular pieces. You need to arrange them in a
                rectangular surface so that they don't overlap, keeping the total area of the
                rectangle as small as possible. This is fairly common when arranging characters
                in a bitmapped font, lightmaps for a 3D engine, and I guess other situations as
                well.
              </para>
              <para>
                The idea of this algorithm is that, as we add rectangles, we can pre-select
                "interesting" places where we can try to add the next rectangles. For optimal
                results, the rectangles should be added in order. I initially tried using area
                as a sorting criteria, but it didn't work well with very tall or very flat
                rectangles. I then tried using the longest dimension as a selector, and it
                worked much better. So much for intuition...
              </para>
              <para>
                These "interesting" places are just to the right and just below the currently
                added rectangle. The first rectangle, obviously, goes at the top left, the next
                one would go either to the right or below this one, and so on. It is a weird way
                to do it, but it seems to work very nicely.
              </para>
              <para>
                The way we search here is fairly brute-force, the fact being that for most
                offline purposes the performance seems more than adequate. I have generated a
                japanese font with around 8500 characters and all the time was spent generating
                the bitmaps.
              </para>
              <para>
                Also, for all we care, we could grow the parent rectangle in a different way
                than power of two. It just happens that power of 2 is very convenient for
                graphics hardware textures.
              </para>
              <para>
                I'd be interested in hearing of other approaches to this problem. Make sure
                to post them on http://www.flipcode.com
              </para>
            </remarks>
        </member>
        <member name="T:sspack.ArevaloRectanglePacker.AnchorRankComparer">
            <summary>Compares the 'rank' of anchoring points</summary>
            <remarks>
              Anchoring points are potential locations for the placement of new rectangles.
              Each time a rectangle is inserted, an anchor point is generated on its upper
              right end and another one at its lower left end. The anchor points are kept
              in a list that is ordered by their closeness to the upper left corner of the
              packing area (their 'rank') so the packer favors positions that are closer to
              the upper left for new rectangles.
            </remarks>
        </member>
        <member name="F:sspack.ArevaloRectanglePacker.AnchorRankComparer.Default">
            <summary>Provides a default instance for the anchor rank comparer</summary>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.AnchorRankComparer.Compare(TwistedLogik.Ultraviolet.Vector2,TwistedLogik.Ultraviolet.Vector2)">
            <summary>Compares the rank of two anchors against each other</summary>
            <param name="left">Left anchor point that will be compared</param>
            <param name="right">Right anchor point that will be compared</param>
            <returns>The relation of the two anchor point's ranks to each other</returns>
        </member>
        <member name="F:sspack.ArevaloRectanglePacker.actualPackingAreaHeight">
            <summary>Current height of the packing area</summary>
        </member>
        <member name="F:sspack.ArevaloRectanglePacker.actualPackingAreaWidth">
            <summary>Current width of the packing area</summary>
        </member>
        <member name="F:sspack.ArevaloRectanglePacker.anchors">
            <summary>Anchoring points where new rectangles can potentially be placed</summary>
        </member>
        <member name="F:sspack.ArevaloRectanglePacker.packedRectangles">
            <summary>Rectangles contained in the packing area</summary>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Maximum width of the packing area</param>
            <param name="packingAreaHeight">Maximum height of the packing area</param>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.TryPack(System.Int32,System.Int32,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.OptimizePlacement(TwistedLogik.Ultraviolet.Vector2@,System.Int32,System.Int32)">
            <summary>
              Optimizes the rectangle's placement by moving it either left or up to fill
              any gaps resulting from rectangles blocking the anchors of the most optimal
              placements.
            </summary>
            <param name="placement">Placement to be optimized</param>
            <param name="rectangleWidth">Width of the rectangle to be optimized</param>
            <param name="rectangleHeight">Height of the rectangle to be optimized</param>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.SelectAnchorRecursive(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
              Searches for a free anchor and recursively enlarges the packing area
              if none can be found.
            </summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Width of the tested packing area</param>
            <param name="testedPackingAreaHeight">Height of the tested packing area</param>
            <returns>
              Index of the anchor the rectangle is to be placed at or -1 if the rectangle
              does not fit in the packing area anymore.
            </returns>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.FindFirstFreeAnchor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Locates the first free anchor at which the rectangle fits</summary>
            <param name="rectangleWidth">Width of the rectangle to be placed</param>
            <param name="rectangleHeight">Height of the rectangle to be placed</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>The index of the first free anchor or -1 if none is found</returns>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.IsFree(TwistedLogik.Ultraviolet.Rectangle@,System.Int32,System.Int32)">
            <summary>
              Determines whether the rectangle can be placed in the packing area
              at its current location.
            </summary>
            <param name="rectangle">Rectangle whose position to check</param>
            <param name="testedPackingAreaWidth">Total width of the packing area</param>
            <param name="testedPackingAreaHeight">Total height of the packing area</param>
            <returns>True if the rectangle can be placed at its current position</returns>
        </member>
        <member name="M:sspack.ArevaloRectanglePacker.InsertAnchor(TwistedLogik.Ultraviolet.Vector2)">
            <summary>Inserts a new anchor point into the anchor list</summary>
            <param name="anchor">Anchor point that will be inserted</param>
            <remarks>
              This method tries to keep the anchor list ordered by ranking the anchors
              depending on the distance from the top left corner in the packing area.
            </remarks>
        </member>
        <member name="T:sspack.RectanglePacker">
            <summary>Base class for rectangle packing algorithms</summary>
            <remarks>
              <para>
                By uniting all rectangle packers under this common base class, you can
                easily switch between different algorithms to find the most efficient or
                performant one for a given job.
              </para>
              <para>
                An almost exhaustive list of packing algorithms can be found here:
                http://www.csc.liv.ac.uk/~epa/surveyhtml.html
              </para>
            </remarks>
        </member>
        <member name="P:sspack.RectanglePacker.PackingAreaWidth">
            <summary>Maximum width the packing area is allowed to have</summary>
        </member>
        <member name="P:sspack.RectanglePacker.PackingAreaHeight">
            <summary>Maximum height the packing area is allowed to have</summary>
        </member>
        <member name="M:sspack.RectanglePacker.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new rectangle packer</summary>
            <param name="packingAreaWidth">Width of the packing area</param>
            <param name="packingAreaHeight">Height of the packing area</param>
        </member>
        <member name="M:sspack.RectanglePacker.Pack(System.Int32,System.Int32)">
            <summary>Allocates space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <returns>The location at which the rectangle has been placed</returns>
        </member>
        <member name="M:sspack.RectanglePacker.TryPack(System.Int32,System.Int32,TwistedLogik.Ultraviolet.Vector2@)">
            <summary>Tries to allocate space for a rectangle in the packing area</summary>
            <param name="rectangleWidth">Width of the rectangle to allocate</param>
            <param name="rectangleHeight">Height of the rectangle to allocate</param>
            <param name="placement">Output parameter receiving the rectangle's placement</param>
            <returns>True if space for the rectangle could be allocated</returns>
        </member>
    </members>
</doc>
